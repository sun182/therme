
D:\sunny\stm32\therme\Project\RIDE\STM3210C-EVAL\stm32f10x_wwdg.o:     file format elf32-littlearm
D:\sunny\stm32\therme\Project\RIDE\STM3210C-EVAL\stm32f10x_wwdg.o


Disassembly of section .text.WWDG_DeInit:

00000000 <WWDG_DeInit>:
WWDG_DeInit():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:103
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
   0:	2101      	movs	r1, #1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:102
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
   2:	b510      	push	{r4, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:103
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
   4:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:104
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
   c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  10:	2100      	movs	r1, #0
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:105
}
  12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:104
  * @retval None
  */
void WWDG_DeInit(void)
{
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
  16:	f7ff bffe 	b.w	0 <RCC_APB1PeriphResetCmd>

Disassembly of section .text.WWDG_SetPrescaler:

00000000 <WWDG_SetPrescaler>:
WWDG_SetPrescaler():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:123
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_Mask;
   0:	4b03      	ldr	r3, [pc, #12]	; (10 <WWDG_SetPrescaler+0x10>)
   2:	685a      	ldr	r2, [r3, #4]
   4:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:125
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
   8:	ea40 0202 	orr.w	r2, r0, r2
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:127
  /* Store the new value */
  WWDG->CFR = tmpreg;
   c:	605a      	str	r2, [r3, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:128
}
   e:	4770      	bx	lr
  10:	40002c00 	.word	0x40002c00

Disassembly of section .text.WWDG_SetWindowValue:

00000000 <WWDG_SetWindowValue>:
WWDG_SetWindowValue():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:137
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
   0:	b082      	sub	sp, #8
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:138
  __IO uint32_t tmpreg = 0;
   2:	2300      	movs	r3, #0
   4:	9301      	str	r3, [sp, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:144

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_Mask;
   6:	4b07      	ldr	r3, [pc, #28]	; (24 <WWDG_SetWindowValue+0x24>)
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:147

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_Mask;
   8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:144

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_Mask;
   c:	685a      	ldr	r2, [r3, #4]
   e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  12:	9201      	str	r2, [sp, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:147

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_Mask;
  14:	9a01      	ldr	r2, [sp, #4]
  16:	ea40 0202 	orr.w	r2, r0, r2
  1a:	9201      	str	r2, [sp, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:150

  /* Store the new value */
  WWDG->CFR = tmpreg;
  1c:	9a01      	ldr	r2, [sp, #4]
  1e:	605a      	str	r2, [r3, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:151
}
  20:	b002      	add	sp, #8
  22:	4770      	bx	lr
  24:	40002c00 	.word	0x40002c00

Disassembly of section .text.WWDG_EnableIT:

00000000 <WWDG_EnableIT>:
WWDG_EnableIT():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:160
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
   0:	22014b01 	.word	0x22014b01
   4:	601a      	str	r2, [r3, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:161
}
   6:	4770      	bx	lr
   8:	420580a4 	.word	0x420580a4

Disassembly of section .text.WWDG_SetCounter:

00000000 <WWDG_SetCounter>:
WWDG_SetCounter():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:175
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_Mask;
   0:	4b02      	ldr	r3, [pc, #8]	; (c <WWDG_SetCounter+0xc>)
   2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   6:	6018      	str	r0, [r3, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:176
}
   8:	4770      	bx	lr
   a:	bf00      	nop
   c:	40002c00 	.word	0x40002c00

Disassembly of section .text.WWDG_Enable:

00000000 <WWDG_Enable>:
WWDG_Enable():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:188
  */
void WWDG_Enable(uint8_t Counter)
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = CR_WDGA_Set | Counter;
   0:	4b02      	ldr	r3, [pc, #8]	; (c <WWDG_Enable+0xc>)
   2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   6:	6018      	str	r0, [r3, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:189
}
   8:	4770      	bx	lr
   a:	bf00      	nop
   c:	40002c00 	.word	0x40002c00

Disassembly of section .text.WWDG_GetFlagStatus:

00000000 <WWDG_GetFlagStatus>:
WWDG_GetFlagStatus():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:198
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
  */
FlagStatus WWDG_GetFlagStatus(void)
{
  return (FlagStatus)(WWDG->SR);
   0:	68984b01 	.word	0x68984b01
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:199
}
   4:	b2c0      	uxtb	r0, r0
   6:	4770      	bx	lr
   8:	40002c00 	.word	0x40002c00

Disassembly of section .text.WWDG_ClearFlag:

00000000 <WWDG_ClearFlag>:
WWDG_ClearFlag():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:208
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
  WWDG->SR = (uint32_t)RESET;
   0:	4b01      	ldr	r3, [pc, #4]	; (8 <WWDG_ClearFlag+0x8>)
   2:	2200      	movs	r2, #0
   4:	609a      	str	r2, [r3, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_wwdg.c:209
}
   6:	4770      	bx	lr
   8:	40002c00 	.word	0x40002c00
