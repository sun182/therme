
D:\sunny\stm32\therme\Project\RIDE\STM3210C-EVAL\stm32f10x_spi.o:     file format elf32-littlearm
D:\sunny\stm32\therme\Project\RIDE\STM3210C-EVAL\stm32f10x_spi.o


Disassembly of section .text.SPI_I2S_DeInit:

00000000 <SPI_I2S_DeInit>:
SPI_I2S_DeInit():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:123
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
   0:	4b15      	ldr	r3, [pc, #84]	; (58 <SPI_I2S_DeInit+0x58>)
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:119
  *   reset values (Affects also the I2Ss).
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
   2:	b510      	push	{r4, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:123
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
   4:	4298      	cmp	r0, r3
   6:	d10b      	bne.n	20 <SPI_I2S_DeInit+0x20>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:126
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
   8:	2101      	movs	r1, #1
   a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   e:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:128
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  12:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  16:	2100      	movs	r1, #0
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:147
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
  18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:128
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  1c:	f7ff bffe 	b.w	0 <RCC_APB2PeriphResetCmd>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:130
  }
  else if (SPIx == SPI2)
  20:	4b0e      	ldr	r3, [pc, #56]	; (5c <SPI_I2S_DeInit+0x5c>)
  22:	4298      	cmp	r0, r3
  24:	d107      	bne.n	36 <SPI_I2S_DeInit+0x36>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:133
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
  26:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  2a:	2101      	movs	r1, #1
  2c:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:135
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  30:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  34:	e009      	b.n	4a <SPI_I2S_DeInit+0x4a>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:139
  }
  else
  {
    if (SPIx == SPI3)
  36:	4b0a      	ldr	r3, [pc, #40]	; (60 <SPI_I2S_DeInit+0x60>)
  38:	4298      	cmp	r0, r3
  3a:	d10b      	bne.n	54 <SPI_I2S_DeInit+0x54>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:142
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
  3c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  40:	2101      	movs	r1, #1
  42:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:144
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  46:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  4a:	2100      	movs	r1, #0
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:147
    }
  }
}
  4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:144
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  50:	f7ff bffe 	b.w	0 <RCC_APB1PeriphResetCmd>
  54:	bd10      	pop	{r4, pc}
  56:	bf00      	nop
  58:	40013000 	.word	0x40013000
  5c:	40003800 	.word	0x40003800
  60:	40003c00 	.word	0x40003c00

Disassembly of section .text.SPI_Init:

00000000 <SPI_Init>:
SPI_Init():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:188
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
   0:	880b      	ldrh	r3, [r1, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:158
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *   contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
   2:	b510      	push	{r4, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:188
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
   4:	884c      	ldrh	r4, [r1, #2]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:177
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
   6:	8802      	ldrh	r2, [r0, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:188
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
   8:	ea44 0303 	orr.w	r3, r4, r3
   c:	888c      	ldrh	r4, [r1, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:179

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
   e:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:188
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
  12:	4323      	orrs	r3, r4
  14:	88cc      	ldrh	r4, [r1, #6]
  16:	4323      	orrs	r3, r4
  18:	890c      	ldrh	r4, [r1, #8]
  1a:	4323      	orrs	r3, r4
  1c:	894c      	ldrh	r4, [r1, #10]
  1e:	4323      	orrs	r3, r4
  20:	898c      	ldrh	r4, [r1, #12]
  22:	4323      	orrs	r3, r4
  24:	89cc      	ldrh	r4, [r1, #14]
  26:	4323      	orrs	r3, r4
  28:	ea42 0303 	orr.w	r3, r2, r3
  2c:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:193
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
  2e:	8003      	strh	r3, [r0, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:196
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
  30:	8b83      	ldrh	r3, [r0, #28]
  32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  36:	041b      	lsls	r3, r3, #16
  38:	0c1b      	lsrs	r3, r3, #16
  3a:	8383      	strh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:200

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
  3c:	8a0b      	ldrh	r3, [r1, #16]
  3e:	8203      	strh	r3, [r0, #16]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:201
}
  40:	bd10      	pop	{r4, pc}

Disassembly of section .text.I2S_Init:

00000000 <I2S_Init>:
I2S_Init():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:219
  *  and the product configuration). But in case the prescaler value is greater 
  *  than 511, the default value (0x02) will be configured instead.  *   
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
   0:	b5f0      	push	{r4, r5, r6, r7, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:236
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
   2:	8b83      	ldrh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:219
  *  and the product configuration). But in case the prescaler value is greater 
  *  than 511, the default value (0x02) will be configured instead.  *   
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
   4:	b087      	sub	sp, #28
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:236
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
   6:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
   a:	f023 031f 	bic.w	r3, r3, #31
   e:	041b      	lsls	r3, r3, #16
  10:	0c1b      	lsrs	r3, r3, #16
  12:	8383      	strh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:237
  SPIx->I2SPR = 0x0002;
  14:	2302      	movs	r3, #2
  16:	8403      	strh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:243
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  18:	688b      	ldr	r3, [r1, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:240
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  1a:	8b86      	ldrh	r6, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:243
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  1c:	2b02      	cmp	r3, #2
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:219
  *  and the product configuration). But in case the prescaler value is greater 
  *  than 511, the default value (0x02) will be configured instead.  *   
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
  1e:	4604      	mov	r4, r0
  20:	460d      	mov	r5, r1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:240
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  22:	b2b6      	uxth	r6, r6
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:243
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  24:	d046      	beq.n	b4 <I2S_Init+0xb4>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:278
    }

    /* Check the I2S clock source configuration depending on the Device:
       Only Connectivity line devices have the PLL3 VCO clock */
#ifdef STM32F10X_CL
    if((RCC->CFGR2 & tmp) != 0)
  26:	4b31      	ldr	r3, [pc, #196]	; (ec <I2S_Init+0xec>)
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:252
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
  28:	888f      	ldrh	r7, [r1, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:267

    /* Get the I2S clock source mask depending on the peripheral number */
    if(((uint32_t)SPIx) == SPI2_BASE)
    {
      /* The mask is relative to I2S2 */
      tmp = I2S2_CLOCK_SRC;
  2a:	4931      	ldr	r1, [pc, #196]	; (f0 <I2S_Init+0xf0>)
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:278
    }

    /* Check the I2S clock source configuration depending on the Device:
       Only Connectivity line devices have the PLL3 VCO clock */
#ifdef STM32F10X_CL
    if((RCC->CFGR2 & tmp) != 0)
  2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:267

    /* Get the I2S clock source mask depending on the peripheral number */
    if(((uint32_t)SPIx) == SPI2_BASE)
    {
      /* The mask is relative to I2S2 */
      tmp = I2S2_CLOCK_SRC;
  2e:	4288      	cmp	r0, r1
  30:	bf14      	ite	ne
  32:	f44f 2180 	movne.w	r1, #262144	; 0x40000
  36:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:255
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
    {
      /* Packet length is 16 bits */
      packetlength = 1;
  3a:	2f00      	cmp	r7, #0
  3c:	bf14      	ite	ne
  3e:	2702      	movne	r7, #2
  40:	2701      	moveq	r7, #1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:278
    }

    /* Check the I2S clock source configuration depending on the Device:
       Only Connectivity line devices have the PLL3 VCO clock */
#ifdef STM32F10X_CL
    if((RCC->CFGR2 & tmp) != 0)
  42:	4211      	tst	r1, r2
  44:	d017      	beq.n	76 <I2S_Init+0x76>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:281
    {
      /* Get the configuration bits of RCC PLL3 multiplier */
      tmp = (uint32_t)((RCC->CFGR2 & I2S_MUL_MASK) >> 12);
  46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  48:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  4c:	0b1b      	lsrs	r3, r3, #12
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:284

      /* Get the value of the PLL3 multiplier */      
      if((tmp > 5) && (tmp < 15))
  4e:	1f9a      	subs	r2, r3, #6
  50:	2a08      	cmp	r2, #8
  52:	d801      	bhi.n	58 <I2S_Init+0x58>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:287
      {
        /* Multplier is between 8 and 14 (value 15 is forbidden) */
        tmp += 2;
  54:	3302      	adds	r3, #2
  56:	e002      	b.n	5e <I2S_Init+0x5e>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:294
      else
      {
        if (tmp == 15)
        {
          /* Multiplier is 20 */
          tmp = 20;
  58:	2b0f      	cmp	r3, #15
  5a:	bf08      	it	eq
  5c:	2314      	moveq	r3, #20
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:298
        }
      }      
      /* Get the PREDIV2 value */
      sourceclock = (uint32_t)(((RCC->CFGR2 & I2S_DIV_MASK) >> 4) + 1);
  5e:	4a23      	ldr	r2, [pc, #140]	; (ec <I2S_Init+0xec>)
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:301
      
      /* Calculate the Source Clock frequency based on PLL3 and PREDIV2 values */
      sourceclock = (uint32_t) ((HSE_Value / sourceclock) * tmp * 2); 
  60:	4924      	ldr	r1, [pc, #144]	; (f4 <I2S_Init+0xf4>)
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:298
          /* Multiplier is 20 */
          tmp = 20;
        }
      }      
      /* Get the PREDIV2 value */
      sourceclock = (uint32_t)(((RCC->CFGR2 & I2S_DIV_MASK) >> 4) + 1);
  62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  64:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  68:	0912      	lsrs	r2, r2, #4
  6a:	3201      	adds	r2, #1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:301
      
      /* Calculate the Source Clock frequency based on PLL3 and PREDIV2 values */
      sourceclock = (uint32_t) ((HSE_Value / sourceclock) * tmp * 2); 
  6c:	fbb1 f2f2 	udiv	r2, r1, r2
  70:	0052      	lsls	r2, r2, #1
  72:	4353      	muls	r3, r2
  74:	e003      	b.n	7e <I2S_Init+0x7e>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:306
    }
    else
    {
      /* I2S Clock source is System clock: Get System Clock frequency */
      RCC_GetClocksFreq(&RCC_Clocks);      
  76:	a801      	add	r0, sp, #4
  78:	f7ff fffe 	bl	0 <RCC_GetClocksFreq>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:309
      
      /* Get the source clock value: based on System Clock value */
      sourceclock = RCC_Clocks.SYSCLK_Frequency;
  7c:	9b01      	ldr	r3, [sp, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:320
    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    
#endif /* STM32F10X_CL */    

    /* Compute the Real divider depending on the MCLK output state with a flaoting point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
  7e:	88ea      	ldrh	r2, [r5, #6]
  80:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  84:	f04f 020a 	mov.w	r2, #10
  88:	d101      	bne.n	8e <I2S_Init+0x8e>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:323
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
  8a:	0a1b      	lsrs	r3, r3, #8
  8c:	e002      	b.n	94 <I2S_Init+0x94>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:328
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
  8e:	017f      	lsls	r7, r7, #5
  90:	fbb3 f3f7 	udiv	r3, r3, r7
  94:	4353      	muls	r3, r2
  96:	68a9      	ldr	r1, [r5, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:332
    }
    
    /* Remove the flaoting point */
    tmp = tmp / 10;  
  98:	220a      	movs	r2, #10
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:328
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
  9a:	fbb3 f3f1 	udiv	r3, r3, r1
  9e:	3305      	adds	r3, #5
  a0:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:332
    }
    
    /* Remove the flaoting point */
    tmp = tmp / 10;  
  a2:	fbb3 f3f2 	udiv	r3, r3, r2
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:338
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
  a6:	f003 0201 	and.w	r2, r3, #1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:341
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  aa:	0212      	lsls	r2, r2, #8
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:338
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
  ac:	085b      	lsrs	r3, r3, #1
  ae:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:341
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  b0:	b292      	uxth	r2, r2
  b2:	e000      	b.n	b6 <I2S_Init+0xb6>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:245
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  {
    i2sodd = (uint16_t)0;
  b4:	2200      	movs	r2, #0
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:345
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }
  
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
  b6:	1e99      	subs	r1, r3, #2
  b8:	b289      	uxth	r1, r1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:349
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
  ba:	29fe      	cmp	r1, #254	; 0xfe
  bc:	bf28      	it	cs
  be:	2200      	movcs	r2, #0
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:353
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
  c0:	88e9      	ldrh	r1, [r5, #6]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:349
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
  c2:	bf28      	it	cs
  c4:	2302      	movcs	r3, #2
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:353
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
  c6:	4313      	orrs	r3, r2
  c8:	430b      	orrs	r3, r1
  ca:	b29b      	uxth	r3, r3
  cc:	8423      	strh	r3, [r4, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:357
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
  ce:	882b      	ldrh	r3, [r5, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:356

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
  d0:	886a      	ldrh	r2, [r5, #2]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:357
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
  d2:	ea46 0303 	orr.w	r3, r6, r3
  d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:356

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
  da:	4313      	orrs	r3, r2
  dc:	88aa      	ldrh	r2, [r5, #4]
  de:	4313      	orrs	r3, r2
  e0:	89aa      	ldrh	r2, [r5, #12]
  e2:	4313      	orrs	r3, r2
  e4:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:361
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;   
  e6:	83a3      	strh	r3, [r4, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:362
}
  e8:	b007      	add	sp, #28
  ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ec:	40021000 	.word	0x40021000
  f0:	40003800 	.word	0x40003800
  f4:	017d7840 	.word	0x017d7840

Disassembly of section .text.SPI_StructInit:

00000000 <SPI_StructInit>:
SPI_StructInit():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:373
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
   0:	2300      	movs	r3, #0
   2:	8003      	strh	r3, [r0, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:375
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
   4:	8043      	strh	r3, [r0, #2]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:377
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
   6:	8083      	strh	r3, [r0, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:379
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
   8:	80c3      	strh	r3, [r0, #6]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:381
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
   a:	8103      	strh	r3, [r0, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:383
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
   c:	8143      	strh	r3, [r0, #10]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:385
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
   e:	8183      	strh	r3, [r0, #12]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:387
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
  10:	81c3      	strh	r3, [r0, #14]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:389
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
  12:	2307      	movs	r3, #7
  14:	8203      	strh	r3, [r0, #16]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:390
}
  16:	4770      	bx	lr

Disassembly of section .text.I2S_StructInit:

00000000 <I2S_StructInit>:
I2S_StructInit():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:401
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
   0:	2300      	movs	r3, #0
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:413
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
   2:	2202      	movs	r2, #2
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:401
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
   4:	8003      	strh	r3, [r0, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:404
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
   6:	8043      	strh	r3, [r0, #2]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:407
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
   8:	8083      	strh	r3, [r0, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:410
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
   a:	80c3      	strh	r3, [r0, #6]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:413
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
   c:	6082      	str	r2, [r0, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:416
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
   e:	8183      	strh	r3, [r0, #12]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:417
}
  10:	4770      	bx	lr

Disassembly of section .text.SPI_Cmd:

00000000 <SPI_Cmd>:
SPI_Cmd():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:431
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <SPI_Cmd+0xc>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:434
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
   2:	8803      	ldrh	r3, [r0, #0]
   4:	b29b      	uxth	r3, r3
   6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a:	e004      	b.n	16 <SPI_Cmd+0x16>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:439
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
   c:	8803      	ldrh	r3, [r0, #0]
   e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  12:	041b      	lsls	r3, r3, #16
  14:	0c1b      	lsrs	r3, r3, #16
  16:	8003      	strh	r3, [r0, #0]
  18:	4770      	bx	lr

Disassembly of section .text.I2S_Cmd:

00000000 <I2S_Cmd>:
I2S_Cmd():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:455
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <I2S_Cmd+0xc>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:458
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
   2:	8b83      	ldrh	r3, [r0, #28]
   4:	b29b      	uxth	r3, r3
   6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   a:	e004      	b.n	16 <I2S_Cmd+0x16>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:463
  }
  else
  {
    /* Disable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
   c:	8b83      	ldrh	r3, [r0, #28]
   e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  12:	041b      	lsls	r3, r3, #16
  14:	0c1b      	lsrs	r3, r3, #16
  16:	8383      	strh	r3, [r0, #28]
  18:	4770      	bx	lr

Disassembly of section .text.SPI_I2S_ITConfig:

00000000 <SPI_I2S_ITConfig>:
SPI_I2S_ITConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:493

  /* Get the SPI/I2S IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
   0:	0909      	lsrs	r1, r1, #4
   2:	2301      	movs	r3, #1
   4:	408b      	lsls	r3, r1
   6:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:495

  if (NewState != DISABLE)
   8:	b11a      	cbz	r2, 12 <SPI_I2S_ITConfig+0x12>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:498
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
   a:	8882      	ldrh	r2, [r0, #4]
   c:	b292      	uxth	r2, r2
   e:	4313      	orrs	r3, r2
  10:	e003      	b.n	1a <SPI_I2S_ITConfig+0x1a>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:503
  }
  else
  {
    /* Disable the selected SPI/I2S interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  12:	8882      	ldrh	r2, [r0, #4]
  14:	b292      	uxth	r2, r2
  16:	ea22 0303 	bic.w	r3, r2, r3
  1a:	8083      	strh	r3, [r0, #4]
  1c:	4770      	bx	lr

Disassembly of section .text.SPI_I2S_DMACmd:

00000000 <SPI_I2S_DMACmd>:
SPI_I2S_DMACmd():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:526
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
  if (NewState != DISABLE)
   0:	b11a      	cbz	r2, a <SPI_I2S_DMACmd+0xa>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:529
  {
    /* Enable the selected SPI/I2S DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	b29b      	uxth	r3, r3
   6:	4319      	orrs	r1, r3
   8:	e003      	b.n	12 <SPI_I2S_DMACmd+0x12>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:534
  }
  else
  {
    /* Disable the selected SPI/I2S DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
   a:	8883      	ldrh	r3, [r0, #4]
   c:	b29b      	uxth	r3, r3
   e:	ea23 0101 	bic.w	r1, r3, r1
  12:	8081      	strh	r1, [r0, #4]
  14:	4770      	bx	lr

Disassembly of section .text.SPI_I2S_SendData:

00000000 <SPI_I2S_SendData>:
SPI_I2S_SendData():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:552
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
   0:	8181      	strh	r1, [r0, #12]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:553
}
   2:	4770      	bx	lr

Disassembly of section .text.SPI_I2S_ReceiveData:

00000000 <SPI_I2S_ReceiveData>:
SPI_I2S_ReceiveData():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:568
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
   0:	8980      	ldrh	r0, [r0, #12]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:569
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr

Disassembly of section .text.SPI_NSSInternalSoftwareConfig:

00000000 <SPI_NSSInternalSoftwareConfig>:
SPI_NSSInternalSoftwareConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:585
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
   0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
   4:	4299      	cmp	r1, r3
   6:	d004      	beq.n	12 <SPI_NSSInternalSoftwareConfig+0x12>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:588
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
   8:	8803      	ldrh	r3, [r0, #0]
   a:	b29b      	uxth	r3, r3
   c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  10:	e004      	b.n	1c <SPI_NSSInternalSoftwareConfig+0x1c>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:593
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
  12:	8803      	ldrh	r3, [r0, #0]
  14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  18:	041b      	lsls	r3, r3, #16
  1a:	0c1b      	lsrs	r3, r3, #16
  1c:	8003      	strh	r3, [r0, #0]
  1e:	4770      	bx	lr

Disassembly of section .text.SPI_SSOutputCmd:

00000000 <SPI_SSOutputCmd>:
SPI_SSOutputCmd():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:609
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <SPI_SSOutputCmd+0xc>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:612
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	b29b      	uxth	r3, r3
   6:	f043 0304 	orr.w	r3, r3, #4
   a:	e004      	b.n	16 <SPI_SSOutputCmd+0x16>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:617
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
   c:	8883      	ldrh	r3, [r0, #4]
   e:	f023 0304 	bic.w	r3, r3, #4
  12:	041b      	lsls	r3, r3, #16
  14:	0c1b      	lsrs	r3, r3, #16
  16:	8083      	strh	r3, [r0, #4]
  18:	4770      	bx	lr

Disassembly of section .text.SPI_DataSizeConfig:

00000000 <SPI_DataSizeConfig>:
SPI_DataSizeConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:636
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
   0:	8803      	ldrh	r3, [r0, #0]
   2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8003      	strh	r3, [r0, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:638
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
   c:	8803      	ldrh	r3, [r0, #0]
   e:	b29b      	uxth	r3, r3
  10:	ea41 0303 	orr.w	r3, r1, r3
  14:	8003      	strh	r3, [r0, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:639
}
  16:	4770      	bx	lr

Disassembly of section .text.SPI_TransmitCRC:

00000000 <SPI_TransmitCRC>:
SPI_TransmitCRC():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:652
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= CR1_CRCNext_Set;
   0:	8803      	ldrh	r3, [r0, #0]
   2:	b29b      	uxth	r3, r3
   4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   8:	8003      	strh	r3, [r0, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:653
}
   a:	4770      	bx	lr

Disassembly of section .text.SPI_CalculateCRC:

00000000 <SPI_CalculateCRC>:
SPI_CalculateCRC():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:667
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <SPI_CalculateCRC+0xc>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:670
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= CR1_CRCEN_Set;
   2:	8803      	ldrh	r3, [r0, #0]
   4:	b29b      	uxth	r3, r3
   6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   a:	e004      	b.n	16 <SPI_CalculateCRC+0x16>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:675
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= CR1_CRCEN_Reset;
   c:	8803      	ldrh	r3, [r0, #0]
   e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  12:	041b      	lsls	r3, r3, #16
  14:	0c1b      	lsrs	r3, r3, #16
  16:	8003      	strh	r3, [r0, #0]
  18:	4770      	bx	lr

Disassembly of section .text.SPI_GetCRC:

00000000 <SPI_GetCRC>:
SPI_GetCRC():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:694
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
   0:	2901      	cmp	r1, #1
   2:	d002      	beq.n	a <SPI_GetCRC+0xa>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:697
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
   4:	8b00      	ldrh	r0, [r0, #24]
   6:	b280      	uxth	r0, r0
   8:	4770      	bx	lr
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:702
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
   a:	8a80      	ldrh	r0, [r0, #20]
   c:	b280      	uxth	r0, r0
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:706
  }
  /* Return the selected CRC register */
  return crcreg;
}
   e:	4770      	bx	lr

Disassembly of section .text.SPI_GetCRCPolynomial:

00000000 <SPI_GetCRCPolynomial>:
SPI_GetCRCPolynomial():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:719
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
   0:	8a00      	ldrh	r0, [r0, #16]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:720
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr

Disassembly of section .text.SPI_BiDirectionalLineConfig:

00000000 <SPI_BiDirectionalLineConfig>:
SPI_BiDirectionalLineConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:736
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
   0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   4:	d104      	bne.n	10 <SPI_BiDirectionalLineConfig+0x10>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:739
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
   6:	8803      	ldrh	r3, [r0, #0]
   8:	b29b      	uxth	r3, r3
   a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   e:	e004      	b.n	1a <SPI_BiDirectionalLineConfig+0x1a>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:744
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
  10:	8803      	ldrh	r3, [r0, #0]
  12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  16:	041b      	lsls	r3, r3, #16
  18:	0c1b      	lsrs	r3, r3, #16
  1a:	8003      	strh	r3, [r0, #0]
  1c:	4770      	bx	lr

Disassembly of section .text.SPI_I2S_GetFlagStatus:

00000000 <SPI_I2S_GetFlagStatus>:
SPI_I2S_GetFlagStatus():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:772
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
   0:	8903      	ldrh	r3, [r0, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:775
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
   2:	4219      	tst	r1, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:784
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
   4:	bf0c      	ite	eq
   6:	2000      	moveq	r0, #0
   8:	2001      	movne	r0, #1
   a:	4770      	bx	lr

Disassembly of section .text.SPI_I2S_ClearFlag:

00000000 <SPI_I2S_ClearFlag>:
SPI_I2S_ClearFlag():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:810
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
    /* Clear the selected SPI CRC Error (CRCERR) flag */
    SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
   0:	43c9      	mvns	r1, r1
   2:	b289      	uxth	r1, r1
   4:	8101      	strh	r1, [r0, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:811
}
   6:	4770      	bx	lr

Disassembly of section .text.SPI_I2S_GetITStatus:

00000000 <SPI_I2S_GetITStatus>:
SPI_I2S_GetITStatus():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:838
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI/I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
   0:	2301      	movs	r3, #1
   2:	f001 020f 	and.w	r2, r1, #15
   6:	fa13 f202 	lsls.w	r2, r3, r2
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:829
  *     @arg SPI_IT_CRCERR: CRC Error interrupt.
  *     @arg I2S_IT_UDR: Underrun Error interrupt.
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
   a:	b510      	push	{r4, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:847

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
   c:	8884      	ldrh	r4, [r0, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:850

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
   e:	8900      	ldrh	r0, [r0, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:847

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
  10:	b2a4      	uxth	r4, r4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:850

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
  12:	b280      	uxth	r0, r0
  14:	4010      	ands	r0, r2
  16:	d005      	beq.n	24 <SPI_I2S_GetITStatus+0x24>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:844

  /* Get the SPI/I2S IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
  18:	0909      	lsrs	r1, r1, #4
  1a:	408b      	lsls	r3, r1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:828
  *     @arg SPI_IT_MODF: Mode Fault interrupt.
  *     @arg SPI_IT_CRCERR: CRC Error interrupt.
  *     @arg I2S_IT_UDR: Underrun Error interrupt.
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
  1c:	421c      	tst	r4, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:853

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
  1e:	bf0c      	ite	eq
  20:	2000      	moveq	r0, #0
  22:	2001      	movne	r0, #1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:862
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
  24:	bd10      	pop	{r4, pc}

Disassembly of section .text.SPI_I2S_ClearITPendingBit:

00000000 <SPI_I2S_ClearITPendingBit>:
SPI_I2S_ClearITPendingBit():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:890
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
   0:	f001 010f 	and.w	r1, r1, #15
   4:	2301      	movs	r3, #1
   6:	408b      	lsls	r3, r1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:893

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
   8:	43db      	mvns	r3, r3
   a:	b29b      	uxth	r3, r3
   c:	8103      	strh	r3, [r0, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_spi.c:894
}
   e:	4770      	bx	lr
