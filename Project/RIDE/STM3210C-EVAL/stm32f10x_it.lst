
D:\sunny\stm32\therme\Project\RIDE\STM3210C-EVAL\stm32f10x_it.o:     file format elf32-littlearm
D:\sunny\stm32\therme\Project\RIDE\STM3210C-EVAL\stm32f10x_it.o


Disassembly of section .text.NMI_Handler:

00000000 <NMI_Handler>:
NMI_Handler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:78
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{}
   0:	4770      	bx	lr

Disassembly of section .text.HardFault_Handler:

00000000 <HardFault_Handler>:
HardFault_Handler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:86
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
   0:	e7fe      	b.n	0 <HardFault_Handler>

Disassembly of section .text.MemManage_Handler:

00000000 <MemManage_Handler>:
MemManage_Handler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:98
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
   0:	e7fe      	b.n	0 <MemManage_Handler>

Disassembly of section .text.BusFault_Handler:

00000000 <BusFault_Handler>:
BusFault_Handler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:110
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
   0:	e7fe      	b.n	0 <BusFault_Handler>

Disassembly of section .text.UsageFault_Handler:

00000000 <UsageFault_Handler>:
UsageFault_Handler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:122
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
   0:	e7fe      	b.n	0 <UsageFault_Handler>

Disassembly of section .text.SVC_Handler:

00000000 <SVC_Handler>:
SVC_Handler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:134
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{}
   0:	4770      	bx	lr

Disassembly of section .text.DebugMon_Handler:

00000000 <DebugMon_Handler>:
DebugMon_Handler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:142
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{}
   0:	4770      	bx	lr

Disassembly of section .text.PendSV_Handler:

00000000 <PendSV_Handler>:
PendSV_Handler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:150
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{}
   0:	4770      	bx	lr

Disassembly of section .text.SysTick_Handler:

00000000 <SysTick_Handler>:
SysTick_Handler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:160
  * @retval None
  */
void SysTick_Handler(void)
{
  /* Update the LocalTime by adding SYSTEMTICK_PERIOD_MS each SysTick interrupt */
  Time_Update();
   0:	f7ff bffe 	b.w	0 <Time_Update>

Disassembly of section .text.RTC_IRQHandler:

00000000 <RTC_IRQHandler>:
RTC_IRQHandler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:250
      // RTC_SetCounter(0x0);
      // /* Wait until last write operation on RTC registers has finished */
      // RTC_WaitForLastTask();
    // }
  // }
}
   0:	4770      	bx	lr

Disassembly of section .text.USART2_IRQHandler:

00000000 <USART2_IRQHandler>:
USART2_IRQHandler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:259
  * @retval None
  */

// todo 280512
void USART2_IRQHandler(void)
{
   0:	b510      	push	{r4, lr}
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:260
  if(USART_GetITStatus(EVAL_COM2, USART_IT_RXNE) != RESET)
   2:	4824      	ldr	r0, [pc, #144]	; (94 <USART2_IRQHandler+0x94>)
   4:	f240 5125 	movw	r1, #1317	; 0x525
   8:	f7ff fffe 	bl	0 <USART_GetITStatus>
   c:	b310      	cbz	r0, 54 <USART2_IRQHandler+0x54>
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:264
  {
	  int i;
	  char buf_s;
	  buf_s = USART_ReceiveData(EVAL_COM2);
   e:	4821      	ldr	r0, [pc, #132]	; (94 <USART2_IRQHandler+0x94>)
  10:	f7ff fffe 	bl	0 <USART_ReceiveData>
  14:	b2c0      	uxtb	r0, r0
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:269
    /* Read one byte from the receive data register */
	
	

	if(buf_s >= 30)
  16:	b243      	sxtb	r3, r0
  18:	2b1d      	cmp	r3, #29
  1a:	4c1f      	ldr	r4, [pc, #124]	; (98 <USART2_IRQHandler+0x98>)
  1c:	dd05      	ble.n	2a <USART2_IRQHandler+0x2a>
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:270
    RxBuffer2[RxCounter2++] = buf_s;
  1e:	7823      	ldrb	r3, [r4, #0]
  20:	4a1e      	ldr	r2, [pc, #120]	; (9c <USART2_IRQHandler+0x9c>)
  22:	54d0      	strb	r0, [r2, r3]
  24:	3301      	adds	r3, #1
  26:	b2db      	uxtb	r3, r3
  28:	e008      	b.n	3c <USART2_IRQHandler+0x3c>
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:272
	
	if(buf_s == 3)
  2a:	2b03      	cmp	r3, #3
  2c:	d107      	bne.n	3e <USART2_IRQHandler+0x3e>
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:286

			

		}
		
		memset(RxBuffer2, NULL, sizeof(RxBuffer2));
  2e:	481b      	ldr	r0, [pc, #108]	; (9c <USART2_IRQHandler+0x9c>)
  30:	2100      	movs	r1, #0
  32:	22c8      	movs	r2, #200	; 0xc8
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:274
	if(buf_s >= 30)
    RxBuffer2[RxCounter2++] = buf_s;
	
	if(buf_s == 3)
	{
		if(RxCounter2 >= 4)
  34:	7823      	ldrb	r3, [r4, #0]
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:286

			

		}
		
		memset(RxBuffer2, NULL, sizeof(RxBuffer2));
  36:	f7ff fffe 	bl	0 <memset>
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:290
		//for(i =RxCounter2;i<200;i++)
		//RxBuffer2[i] = 0;
		
		RxCounter2 = 0;
  3a:	2300      	movs	r3, #0
  3c:	7023      	strb	r3, [r4, #0]
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:295
		
		
	}
	
    if(RxCounter2 == NbrOfDataToRead2)
  3e:	4a18      	ldr	r2, [pc, #96]	; (a0 <USART2_IRQHandler+0xa0>)
  40:	7823      	ldrb	r3, [r4, #0]
  42:	7812      	ldrb	r2, [r2, #0]
  44:	429a      	cmp	r2, r3
  46:	d105      	bne.n	54 <USART2_IRQHandler+0x54>
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:298
    {
      /* Disable the USARTy Receive interrupt */
      USART_ITConfig(EVAL_COM2, USART_IT_RXNE, DISABLE);
  48:	4812      	ldr	r0, [pc, #72]	; (94 <USART2_IRQHandler+0x94>)
  4a:	f240 5125 	movw	r1, #1317	; 0x525
  4e:	2200      	movs	r2, #0
  50:	f7ff fffe 	bl	0 <USART_ITConfig>
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:302
    }
  }
  
  if(USART_GetITStatus(EVAL_COM2, USART_IT_TXE) != RESET)
  54:	480f      	ldr	r0, [pc, #60]	; (94 <USART2_IRQHandler+0x94>)
  56:	f240 7127 	movw	r1, #1831	; 0x727
  5a:	f7ff fffe 	bl	0 <USART_GetITStatus>
  5e:	b1b8      	cbz	r0, 90 <USART2_IRQHandler+0x90>
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:305
  {   
    /* Write one byte to the transmit data register */
    USART_SendData(EVAL_COM2, TxBuffer2_[TxCounter2++]);
  60:	4c10      	ldr	r4, [pc, #64]	; (a4 <USART2_IRQHandler+0xa4>)
  62:	4a11      	ldr	r2, [pc, #68]	; (a8 <USART2_IRQHandler+0xa8>)
  64:	7823      	ldrb	r3, [r4, #0]
  66:	480b      	ldr	r0, [pc, #44]	; (94 <USART2_IRQHandler+0x94>)
  68:	5cd1      	ldrb	r1, [r2, r3]
  6a:	3301      	adds	r3, #1
  6c:	b2db      	uxtb	r3, r3
  6e:	7023      	strb	r3, [r4, #0]
  70:	f7ff fffe 	bl	0 <USART_SendData>
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:307

    if(TxCounter2 == NbrOfDataToTransfer2)
  74:	4a0d      	ldr	r2, [pc, #52]	; (ac <USART2_IRQHandler+0xac>)
  76:	7823      	ldrb	r3, [r4, #0]
  78:	7812      	ldrb	r2, [r2, #0]
  7a:	429a      	cmp	r2, r3
  7c:	d108      	bne.n	90 <USART2_IRQHandler+0x90>
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:311
    {
		TxCounter2 = 0;
      /* Disable the USARTy Transmit interrupt */
     USART_ITConfig(EVAL_COM2, USART_IT_TXE, DISABLE);
  7e:	4805      	ldr	r0, [pc, #20]	; (94 <USART2_IRQHandler+0x94>)
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:309
    /* Write one byte to the transmit data register */
    USART_SendData(EVAL_COM2, TxBuffer2_[TxCounter2++]);

    if(TxCounter2 == NbrOfDataToTransfer2)
    {
		TxCounter2 = 0;
  80:	2200      	movs	r2, #0
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:311
      /* Disable the USARTy Transmit interrupt */
     USART_ITConfig(EVAL_COM2, USART_IT_TXE, DISABLE);
  82:	f240 7127 	movw	r1, #1831	; 0x727
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:309
    /* Write one byte to the transmit data register */
    USART_SendData(EVAL_COM2, TxBuffer2_[TxCounter2++]);

    if(TxCounter2 == NbrOfDataToTransfer2)
    {
		TxCounter2 = 0;
  86:	7022      	strb	r2, [r4, #0]
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:314
      /* Disable the USARTy Transmit interrupt */
     USART_ITConfig(EVAL_COM2, USART_IT_TXE, DISABLE);
    }    
  }
}
  88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:311

    if(TxCounter2 == NbrOfDataToTransfer2)
    {
		TxCounter2 = 0;
      /* Disable the USARTy Transmit interrupt */
     USART_ITConfig(EVAL_COM2, USART_IT_TXE, DISABLE);
  8c:	f7ff bffe 	b.w	0 <USART_ITConfig>
  90:	bd10      	pop	{r4, pc}
  92:	bf00      	nop
  94:	40004400 	.word	0x40004400
	...

Disassembly of section .text.ETH_IRQHandler:

00000000 <ETH_IRQHandler>:
ETH_IRQHandler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:328
  * @brief  This function handles ETH interrupt request.
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
   0:	b510      	push	{r4, lr}
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:330
  /* Handles all the received frames */
  while(ETH_GetRxPktSize() != 0) 
   2:	e001      	b.n	8 <ETH_IRQHandler+0x8>
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:332
  {		
    LwIP_Pkt_Handle();
   4:	f7ff fffe 	bl	0 <LwIP_Pkt_Handle>
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:330
  * @retval None
  */
void ETH_IRQHandler(void)
{
  /* Handles all the received frames */
  while(ETH_GetRxPktSize() != 0) 
   8:	f7ff fffe 	bl	0 <ETH_GetRxPktSize>
   c:	2800      	cmp	r0, #0
   e:	d1f9      	bne.n	4 <ETH_IRQHandler+0x4>
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:336
  {		
    LwIP_Pkt_Handle();
  }

  /* Clear the Eth DMA Rx IT pending bits */
  ETH_DMAClearITPendingBit(ETH_DMA_IT_R);
  10:	3040      	adds	r0, #64	; 0x40
  12:	f7ff fffe 	bl	0 <ETH_DMAClearITPendingBit>
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:337
  ETH_DMAClearITPendingBit(ETH_DMA_IT_NIS);
  16:	f44f 3080 	mov.w	r0, #65536	; 0x10000
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:338
}
  1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:337
    LwIP_Pkt_Handle();
  }

  /* Clear the Eth DMA Rx IT pending bits */
  ETH_DMAClearITPendingBit(ETH_DMA_IT_R);
  ETH_DMAClearITPendingBit(ETH_DMA_IT_NIS);
  1e:	f7ff bffe 	b.w	0 <ETH_DMAClearITPendingBit>

Disassembly of section .text.EXTI15_10_IRQHandler:

00000000 <EXTI15_10_IRQHandler>:
EXTI15_10_IRQHandler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:347
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
   0:	b510      	push	{r4, lr}
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:348
if(EXTI_GetITStatus(EXTI_Line14) != RESET)
   2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   6:	f7ff fffe 	bl	0 <EXTI_GetITStatus>
   a:	b128      	cbz	r0, 18 <EXTI15_10_IRQHandler+0x18>
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:351
  {   

   EXTI_ClearITPendingBit(EXTI_Line14);
   c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:354
  }   
 
}
  10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:351
void EXTI15_10_IRQHandler(void)
{
if(EXTI_GetITStatus(EXTI_Line14) != RESET)
  {   

   EXTI_ClearITPendingBit(EXTI_Line14);
  14:	f7ff bffe 	b.w	0 <EXTI_ClearITPendingBit>
  18:	bd10      	pop	{r4, pc}
