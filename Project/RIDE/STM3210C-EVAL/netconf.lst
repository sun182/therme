
D:\sunny\stm32\therme\Project\RIDE\STM3210C-EVAL\netconf.o:     file format elf32-littlearm
D:\sunny\stm32\therme\Project\RIDE\STM3210C-EVAL\netconf.o


Disassembly of section .text.LwIP_Init:

00000000 <LwIP_Init>:
LwIP_Init():
D:\sunny\stm32\therme\Project\src/netconf.c:74
  * @brief  Initializes the lwIP stack
  * @param  None
  * @retval None
  */
void LwIP_Init(void)
{
   0:	b510      	push	{r4, lr}
D:\sunny\stm32\therme\Project\src/netconf.c:78
  struct ip_addr ipaddr;
  //struct ip_addr netmask;
  //struct ip_addr gw;
  uint8_t macaddress[6]={0,0,0,0,0,1};
   2:	2301      	movs	r3, #1
D:\sunny\stm32\therme\Project\src/netconf.c:74
  * @brief  Initializes the lwIP stack
  * @param  None
  * @retval None
  */
void LwIP_Init(void)
{
   4:	b086      	sub	sp, #24
D:\sunny\stm32\therme\Project\src/netconf.c:78
  struct ip_addr ipaddr;
  //struct ip_addr netmask;
  //struct ip_addr gw;
  uint8_t macaddress[6]={0,0,0,0,0,1};
   6:	2400      	movs	r4, #0
   8:	f88d 3015 	strb.w	r3, [sp, #21]
   c:	f88d 4010 	strb.w	r4, [sp, #16]
  10:	f88d 4011 	strb.w	r4, [sp, #17]
  14:	f88d 4012 	strb.w	r4, [sp, #18]
  18:	f88d 4013 	strb.w	r4, [sp, #19]
  1c:	f88d 4014 	strb.w	r4, [sp, #20]
D:\sunny\stm32\therme\Project\src/netconf.c:81

  /* Initializes the dynamic memory heap defined by MEM_SIZE.*/
  mem_init();
  20:	f7ff fffe 	bl	0 <mem_init>
D:\sunny\stm32\therme\Project\src/netconf.c:84

  /* Initializes the memory pools defined by MEMP_NUM_x.*/
  memp_init();
  24:	f7ff fffe 	bl	0 <memp_init>
D:\sunny\stm32\therme\Project\src/netconf.c:103
  //IP4_ADDR(&ipaddr, 200,200,2,95); // 10.1.1.8 //  200,200,2, 95 //
  //IP4_ADDR(&netmask, 255, 255, 255, 0);
  //IP4_ADDR(&gw, 10, 1, 1, 1); //10, 1,1, 1
#endif

  Set_MAC_Address(macaddress);
  28:	a804      	add	r0, sp, #16
  2a:	f7ff fffe 	bl	0 <Set_MAC_Address>
D:\sunny\stm32\therme\Project\src/netconf.c:117
  Give pointers to cleared ip_addr structures when using DHCP,
  or fill them with sane numbers otherwise. The state pointer may be NULL.

  The init function pointer must point to a initialization function for
  your ethernet netif interface. The following code illustrates it's use.*/
  netif_add(&netif, &ip_ipaddr, &ip_netmask, &ip_gw, NULL, &ethernetif_init, &ethernet_input);
  2e:	4b09      	ldr	r3, [pc, #36]	; (54 <LwIP_Init+0x54>)
  30:	4909      	ldr	r1, [pc, #36]	; (58 <LwIP_Init+0x58>)
  32:	9301      	str	r3, [sp, #4]
  34:	4b09      	ldr	r3, [pc, #36]	; (5c <LwIP_Init+0x5c>)
  36:	4a0a      	ldr	r2, [pc, #40]	; (60 <LwIP_Init+0x60>)
  38:	9302      	str	r3, [sp, #8]
  3a:	480a      	ldr	r0, [pc, #40]	; (64 <LwIP_Init+0x64>)
  3c:	4b0a      	ldr	r3, [pc, #40]	; (68 <LwIP_Init+0x68>)
  3e:	9400      	str	r4, [sp, #0]
  40:	f7ff fffe 	bl	0 <netif_add>
D:\sunny\stm32\therme\Project\src/netconf.c:120

  /*  Registers the default network interface.*/
  netif_set_default(&netif);
  44:	4807      	ldr	r0, [pc, #28]	; (20 <netif_set_default+0x20>)
  46:	f7ff fffe 	bl	0 <netif_set_default>
D:\sunny\stm32\therme\Project\src/netconf.c:132
  You can peek in the netif->dhcp struct for the actual DHCP status.*/
  dhcp_start(&netif);
#endif

  /*  When the netif is fully configured this function must be called.*/
  netif_set_up(&netif);
  4a:	4806      	ldr	r0, [pc, #24]	; (1c <netif_set_up+0x1c>)
  4c:	f7ff fffe 	bl	0 <netif_set_up>
D:\sunny\stm32\therme\Project\src/netconf.c:134

}
  50:	b006      	add	sp, #24
  52:	bd10      	pop	{r4, pc}
	...

Disassembly of section .text.LwIP_Pkt_Handle:

00000000 <LwIP_Pkt_Handle>:
LwIP_Pkt_Handle():
D:\sunny\stm32\therme\Project\src/netconf.c:144
  * @retval None
  */
void LwIP_Pkt_Handle(void)
{
  /* Read a received packet from the Ethernet buffers and send it to the lwIP for handling */
  ethernetif_input(&netif);
   0:	4801      	ldr	r0, [pc, #4]	; (8 <LwIP_Pkt_Handle+0x8>)
   2:	f7ff bffe 	b.w	0 <ethernetif_input>
   6:	bf00      	nop
   8:	00000000 	.word	0x00000000

Disassembly of section .text.LwIP_Periodic_Handle:

00000000 <LwIP_Periodic_Handle>:
LwIP_Periodic_Handle():
D:\sunny\stm32\therme\Project\src/netconf.c:153
  * @brief  LwIP periodic tasks
  * @param  localtime the current LocalTime value
  * @retval None
  */
void LwIP_Periodic_Handle(__IO uint32_t localtime)
{
   0:	b513      	push	{r0, r1, r4, lr}
D:\sunny\stm32\therme\Project\src/netconf.c:156

  /* TCP periodic process every 250 ms */
  if (localtime - TCPTimer >= TCP_TMR_INTERVAL)
   2:	4c0e      	ldr	r4, [pc, #56]	; (3c <LwIP_Periodic_Handle+0x3c>)
D:\sunny\stm32\therme\Project\src/netconf.c:153
  * @brief  LwIP periodic tasks
  * @param  localtime the current LocalTime value
  * @retval None
  */
void LwIP_Periodic_Handle(__IO uint32_t localtime)
{
   4:	9001      	str	r0, [sp, #4]
D:\sunny\stm32\therme\Project\src/netconf.c:156

  /* TCP periodic process every 250 ms */
  if (localtime - TCPTimer >= TCP_TMR_INTERVAL)
   6:	9a01      	ldr	r2, [sp, #4]
   8:	6823      	ldr	r3, [r4, #0]
   a:	1ad3      	subs	r3, r2, r3
   c:	2bf9      	cmp	r3, #249	; 0xf9
   e:	d903      	bls.n	18 <LwIP_Periodic_Handle+0x18>
D:\sunny\stm32\therme\Project\src/netconf.c:158
  {
    TCPTimer =  localtime;
  10:	9b01      	ldr	r3, [sp, #4]
  12:	6023      	str	r3, [r4, #0]
D:\sunny\stm32\therme\Project\src/netconf.c:159
    tcp_tmr();
  14:	f7ff fffe 	bl	0 <tcp_tmr>
D:\sunny\stm32\therme\Project\src/netconf.c:162
  }
  /* ARP periodic process every 5s */
  if (localtime - ARPTimer >= ARP_TMR_INTERVAL)
  18:	9a01      	ldr	r2, [sp, #4]
  1a:	6863      	ldr	r3, [r4, #4]
  1c:	1ad2      	subs	r2, r2, r3
  1e:	f241 3387 	movw	r3, #4999	; 0x1387
  22:	429a      	cmp	r2, r3
  24:	d907      	bls.n	36 <LwIP_Periodic_Handle+0x36>
D:\sunny\stm32\therme\Project\src/netconf.c:164
  {
    ARPTimer =  localtime;
  26:	9a01      	ldr	r2, [sp, #4]
  28:	4b04      	ldr	r3, [pc, #16]	; (3c <LwIP_Periodic_Handle+0x3c>)
  2a:	605a      	str	r2, [r3, #4]
D:\sunny\stm32\therme\Project\src/netconf.c:183
    DHCPcoarseTimer =  localtime;
    dhcp_coarse_tmr();
  }
#endif

}
  2c:	b002      	add	sp, #8
  2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
D:\sunny\stm32\therme\Project\src/netconf.c:165
  }
  /* ARP periodic process every 5s */
  if (localtime - ARPTimer >= ARP_TMR_INTERVAL)
  {
    ARPTimer =  localtime;
    etharp_tmr();
  32:	f7ff bffe 	b.w	0 <etharp_tmr>
D:\sunny\stm32\therme\Project\src/netconf.c:183
    DHCPcoarseTimer =  localtime;
    dhcp_coarse_tmr();
  }
#endif

}
  36:	b002      	add	sp, #8
  38:	bd10      	pop	{r4, pc}
  3a:	bf00      	nop
  3c:	00000000 	.word	0x00000000

Disassembly of section .text.Display_Periodic_Handle:

00000000 <Display_Periodic_Handle>:
Display_Periodic_Handle():
D:\sunny\stm32\therme\Project\src/netconf.c:191
  * @brief  LCD & LEDs periodic handling
  * @param  localtime: the current LocalTime value
  * @retval None
  */
void Display_Periodic_Handle(__IO uint32_t localtime)
{ 
   0:	b500      	push	{lr}
D:\sunny\stm32\therme\Project\src/netconf.c:193
  /* 250 ms */
  if (localtime - DisplayTimer >= LCD_TIMER_MSECS)
   2:	4a19      	ldr	r2, [pc, #100]	; (68 <Display_Periodic_Handle+0x68>)
D:\sunny\stm32\therme\Project\src/netconf.c:191
  * @brief  LCD & LEDs periodic handling
  * @param  localtime: the current LocalTime value
  * @retval None
  */
void Display_Periodic_Handle(__IO uint32_t localtime)
{ 
   4:	b08b      	sub	sp, #44	; 0x2c
   6:	9003      	str	r0, [sp, #12]
D:\sunny\stm32\therme\Project\src/netconf.c:193
  /* 250 ms */
  if (localtime - DisplayTimer >= LCD_TIMER_MSECS)
   8:	9903      	ldr	r1, [sp, #12]
   a:	6893      	ldr	r3, [r2, #8]
   c:	1acb      	subs	r3, r1, r3
   e:	2bf9      	cmp	r3, #249	; 0xf9
  10:	d927      	bls.n	62 <Display_Periodic_Handle+0x62>
D:\sunny\stm32\therme\Project\src/netconf.c:195
  {
    DisplayTimer = localtime;
  12:	9b03      	ldr	r3, [sp, #12]
D:\sunny\stm32\therme\Project\src/netconf.c:198

    /* We have got a new IP address so update the display */
    if (IPaddress != netif.ip_addr.addr)
  14:	68d1      	ldr	r1, [r2, #12]
D:\sunny\stm32\therme\Project\src/netconf.c:195
void Display_Periodic_Handle(__IO uint32_t localtime)
{ 
  /* 250 ms */
  if (localtime - DisplayTimer >= LCD_TIMER_MSECS)
  {
    DisplayTimer = localtime;
  16:	6093      	str	r3, [r2, #8]
D:\sunny\stm32\therme\Project\src/netconf.c:198

    /* We have got a new IP address so update the display */
    if (IPaddress != netif.ip_addr.addr)
  18:	4b14      	ldr	r3, [pc, #80]	; (6c <Display_Periodic_Handle+0x6c>)
  1a:	685b      	ldr	r3, [r3, #4]
  1c:	4299      	cmp	r1, r3
  1e:	d020      	beq.n	62 <Display_Periodic_Handle+0x62>
D:\sunny\stm32\therme\Project\src/netconf.c:204
    {
      __IO uint8_t iptab[4];
      uint8_t iptxt[20];

      /* Read the new IP address */
      IPaddress = netif.ip_addr.addr;
  20:	60d3      	str	r3, [r2, #12]
D:\sunny\stm32\therme\Project\src/netconf.c:206

      iptab[0] = (uint8_t)(IPaddress >> 24);
  22:	0e1a      	lsrs	r2, r3, #24
  24:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
D:\sunny\stm32\therme\Project\src/netconf.c:207
      iptab[1] = (uint8_t)(IPaddress >> 16);
  28:	0c1a      	lsrs	r2, r3, #16
  2a:	b2d2      	uxtb	r2, r2
  2c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
D:\sunny\stm32\therme\Project\src/netconf.c:208
      iptab[2] = (uint8_t)(IPaddress >> 8);
  30:	0a1a      	lsrs	r2, r3, #8
  32:	b2d2      	uxtb	r2, r2
D:\sunny\stm32\therme\Project\src/netconf.c:209
      iptab[3] = (uint8_t)(IPaddress);
  34:	b2db      	uxtb	r3, r3
D:\sunny\stm32\therme\Project\src/netconf.c:208
      /* Read the new IP address */
      IPaddress = netif.ip_addr.addr;

      iptab[0] = (uint8_t)(IPaddress >> 24);
      iptab[1] = (uint8_t)(IPaddress >> 16);
      iptab[2] = (uint8_t)(IPaddress >> 8);
  36:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
D:\sunny\stm32\therme\Project\src/netconf.c:209
      iptab[3] = (uint8_t)(IPaddress);
  3a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
D:\sunny\stm32\therme\Project\src/netconf.c:211

      sprintf((char*)iptxt, "   %d.%d.%d.%d    ", iptab[3], iptab[2], iptab[1], iptab[0]);
  3e:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
  42:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
  46:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
  4a:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
  4e:	9000      	str	r0, [sp, #0]
  50:	9101      	str	r1, [sp, #4]
  52:	a804      	add	r0, sp, #16
  54:	4906      	ldr	r1, [pc, #24]	; (70 <Display_Periodic_Handle+0x70>)
  56:	f7ff fffe 	bl	0 <sprintf>
D:\sunny\stm32\therme\Project\src/netconf.c:250
#endif
      {
        /* Display the IP address */
//		LCD_DisplayStringLine(Line8, "  Static IP address   ");
//        LCD_DisplayStringLine(Line9, iptxt);	    
		Delay(LCD_DELAY);
  5a:	f640 30b8 	movw	r0, #3000	; 0xbb8
  5e:	f7ff fffe 	bl	0 <Delay>
D:\sunny\stm32\therme\Project\src/netconf.c:280

      }
    }
#endif
  } 
}
  62:	b00b      	add	sp, #44	; 0x2c
  64:	bd00      	pop	{pc}
  66:	bf00      	nop
	...
