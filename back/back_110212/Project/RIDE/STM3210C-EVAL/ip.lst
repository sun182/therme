
D:\sunny\stm32\therme\Project\RIDE\STM3210C-EVAL\ip.o:     file format elf32-littlearm
D:\sunny\stm32\therme\Project\RIDE\STM3210C-EVAL\ip.o


Disassembly of section .text.ip_route:

00000000 <ip_route>:
ip_route():
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:129
ip_route(ip_addr_t *dest)
{
  struct netif *netif;

  /* iterate through netifs */
  for(netif = netif_list; netif != NULL; netif = netif->next) {
   0:	4b0e      	ldr	r3, [pc, #56]	; (3c <ip_route+0x3c>)
   2:	e00a      	b.n	1a <ip_route+0x1a>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:131
    /* network mask matches? */
    if (netif_is_up(netif)) {
   4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
   8:	f012 0f01 	tst.w	r2, #1
   c:	d005      	beq.n	1a <ip_route+0x1a>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:132
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
   e:	6802      	ldr	r2, [r0, #0]
  10:	6859      	ldr	r1, [r3, #4]
  12:	4051      	eors	r1, r2
  14:	689a      	ldr	r2, [r3, #8]
  16:	4211      	tst	r1, r2
  18:	d00d      	beq.n	36 <ip_route+0x36>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:129
ip_route(ip_addr_t *dest)
{
  struct netif *netif;

  /* iterate through netifs */
  for(netif = netif_list; netif != NULL; netif = netif->next) {
  1a:	681b      	ldr	r3, [r3, #0]
  1c:	2b00      	cmp	r3, #0
  1e:	d1f1      	bne.n	4 <ip_route+0x4>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:138
        /* return netif on which to forward IP packet */
        return netif;
      }
    }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
  20:	4b07      	ldr	r3, [pc, #28]	; (40 <ip_route+0x40>)
  22:	6818      	ldr	r0, [r3, #0]
  24:	b140      	cbz	r0, 38 <ip_route+0x38>
  26:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
  2a:	f003 0301 	and.w	r3, r3, #1
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:143
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    snmp_inc_ipoutnoroutes();
    return NULL;
  2e:	2b00      	cmp	r3, #0
  30:	bf08      	it	eq
  32:	2000      	moveq	r0, #0
  34:	4770      	bx	lr
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:132

  /* iterate through netifs */
  for(netif = netif_list; netif != NULL; netif = netif->next) {
    /* network mask matches? */
    if (netif_is_up(netif)) {
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
  36:	4618      	mov	r0, r3
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:147
    snmp_inc_ipoutnoroutes();
    return NULL;
  }
  /* no matching netif found, use default netif */
  return netif_default;
}
  38:	4770      	bx	lr
  3a:	bf00      	nop
	...

Disassembly of section .text.ip_input:

00000000 <ip_input>:
ip_input():
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:243
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
   0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:256

  IP_STATS_INC(ip.recv);
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
   4:	6844      	ldr	r4, [r0, #4]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:243
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
   6:	4605      	mov	r5, r0
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:257
  IP_STATS_INC(ip.recv);
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  if (IPH_V(iphdr) != 4) {
   8:	7823      	ldrb	r3, [r4, #0]
   a:	7860      	ldrb	r0, [r4, #1]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:243
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
   c:	460f      	mov	r7, r1
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:257
  IP_STATS_INC(ip.recv);
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  if (IPH_V(iphdr) != 4) {
   e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  12:	f7ff fffe 	bl	0 <lwip_ntohs>
  16:	0b00      	lsrs	r0, r0, #12
  18:	b280      	uxth	r0, r0
  1a:	2804      	cmp	r0, #4
  1c:	d161      	bne.n	e2 <ip_input+0xe2>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:268
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
  }

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  1e:	7823      	ldrb	r3, [r4, #0]
  20:	7860      	ldrb	r0, [r4, #1]
  22:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  26:	f7ff fffe 	bl	0 <lwip_ntohs>
  2a:	0a00      	lsrs	r0, r0, #8
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:272
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
  2c:	78a3      	ldrb	r3, [r4, #2]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:268
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
  }

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  2e:	f000 060f 	and.w	r6, r0, #15
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:272
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
  32:	78e0      	ldrb	r0, [r4, #3]
  34:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  38:	f7ff fffe 	bl	0 <lwip_ntohs>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:275

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
  3c:	896b      	ldrh	r3, [r5, #10]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:272
  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
  3e:	4601      	mov	r1, r0
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:275

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
  40:	ebb3 0f86 	cmp.w	r3, r6, lsl #2
  44:	d34d      	bcc.n	e2 <ip_input+0xe2>
  46:	892b      	ldrh	r3, [r5, #8]
  48:	4283      	cmp	r3, r0
  4a:	d34a      	bcc.n	e2 <ip_input+0xe2>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:311
  }
#endif

  /* Trim pbuf. This should have been done at the netif layer,
   * but we'll do it anyway just to be sure that its done. */
  pbuf_realloc(p, iphdr_len);
  4c:	4628      	mov	r0, r5
  4e:	f7ff fffe 	bl	0 <pbuf_realloc>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:314

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
  52:	7c61      	ldrb	r1, [r4, #17]
  54:	7c23      	ldrb	r3, [r4, #16]
  56:	4a4e      	ldr	r2, [pc, #312]	; (190 <ip_input+0x190>)
  58:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  5c:	7ca1      	ldrb	r1, [r4, #18]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:315
  ip_addr_copy(current_iphdr_src, iphdr->src);
  5e:	463e      	mov	r6, r7
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:314
  /* Trim pbuf. This should have been done at the netif layer,
   * but we'll do it anyway just to be sure that its done. */
  pbuf_realloc(p, iphdr_len);

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
  60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  64:	7ce1      	ldrb	r1, [r4, #19]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:331
#endif /* LWIP_IGMP */
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
  66:	f04f 0a01 	mov.w	sl, #1
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:314
  /* Trim pbuf. This should have been done at the netif layer,
   * but we'll do it anyway just to be sure that its done. */
  pbuf_realloc(p, iphdr_len);

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
  6a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  6e:	6013      	str	r3, [r2, #0]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:315
  ip_addr_copy(current_iphdr_src, iphdr->src);
  70:	7b60      	ldrb	r0, [r4, #13]
  72:	7b21      	ldrb	r1, [r4, #12]
  74:	4b47      	ldr	r3, [pc, #284]	; (194 <ip_input+0x194>)
  76:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  7a:	7ba0      	ldrb	r0, [r4, #14]
  7c:	4690      	mov	r8, r2
  7e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  82:	7be0      	ldrb	r0, [r4, #15]
  84:	4699      	mov	r9, r3
  86:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  8a:	6019      	str	r1, [r3, #0]
  8c:	e001      	b.n	92 <ip_input+0x92>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:372
        netif = netif->next;
      }
      if (netif == inp) {
        netif = netif->next;
      }
    } while(netif != NULL);
  8e:	f04f 0a00 	mov.w	sl, #0
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:341
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
  92:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
  96:	f013 0f01 	tst.w	r3, #1
  9a:	d009      	beq.n	b0 <ip_input+0xb0>
  9c:	6873      	ldr	r3, [r6, #4]
  9e:	b13b      	cbz	r3, b0 <ip_input+0xb0>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:343
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  a0:	f8d8 0000 	ldr.w	r0, [r8]
  a4:	4298      	cmp	r0, r3
  a6:	d00f      	beq.n	c8 <ip_input+0xc8>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:345
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
  a8:	4631      	mov	r1, r6
  aa:	f7ff fffe 	bl	0 <ip4_addr_isbroadcast>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:343
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  ae:	b958      	cbnz	r0, c8 <ip_input+0xc8>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:363
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
  b0:	f1ba 0f00 	cmp.w	sl, #0
  b4:	d002      	beq.n	bc <ip_input+0xbc>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:365
        first = 0;
        netif = netif_list;
  b6:	4b38      	ldr	r3, [pc, #224]	; (198 <ip_input+0x198>)
  b8:	681e      	ldr	r6, [r3, #0]
  ba:	e000      	b.n	be <ip_input+0xbe>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:367
      } else {
        netif = netif->next;
  bc:	6836      	ldr	r6, [r6, #0]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:369
      }
      if (netif == inp) {
  be:	42be      	cmp	r6, r7
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:370
        netif = netif->next;
  c0:	bf08      	it	eq
  c2:	6836      	ldreq	r6, [r6, #0]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:372
      }
    } while(netif != NULL);
  c4:	2e00      	cmp	r6, #0
  c6:	d1e2      	bne.n	8e <ip_input+0x8e>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:405
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
  c8:	f8d9 0000 	ldr.w	r0, [r9]
  cc:	4639      	mov	r1, r7
  ce:	f7ff fffe 	bl	0 <ip4_addr_isbroadcast>
  d2:	b930      	cbnz	r0, e2 <ip_input+0xe2>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:406
         (ip_addr_ismulticast(&current_iphdr_src))) {
  d4:	4b2f      	ldr	r3, [pc, #188]	; (194 <ip_input+0x194>)
  d6:	681b      	ldr	r3, [r3, #0]
  d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:405
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
  dc:	2be0      	cmp	r3, #224	; 0xe0
  de:	d000      	beq.n	e2 <ip_input+0xe2>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:419
      return ERR_OK;
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
  e0:	b91e      	cbnz	r6, ea <ip_input+0xea>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:433
#endif /* IP_FORWARD */
    {
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
    }
    pbuf_free(p);
  e2:	4628      	mov	r0, r5
  e4:	f7ff fffe 	bl	0 <pbuf_free>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:434
    return ERR_OK;
  e8:	e04e      	b.n	188 <ip_input+0x188>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:437
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
  ea:	79a3      	ldrb	r3, [r4, #6]
  ec:	79e2      	ldrb	r2, [r4, #7]
  ee:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  f2:	f64f 733f 	movw	r3, #65343	; 0xff3f
  f6:	ea02 0303 	and.w	r3, r2, r3
  fa:	b133      	cbz	r3, 10a <ip_input+0x10a>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:442
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",
      ntohs(IPH_ID(iphdr)), p->tot_len, ntohs(IPH_LEN(iphdr)), !!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8));
    /* reassemble the packet*/
    p = ip_reass(p);
  fc:	4628      	mov	r0, r5
  fe:	f7ff fffe 	bl	0 <ip_reass>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:444
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 102:	4605      	mov	r5, r0
 104:	2800      	cmp	r0, #0
 106:	d03f      	beq.n	188 <ip_input+0x188>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:447
      return ERR_OK;
    }
    iphdr = (struct ip_hdr *)p->payload;
 108:	6844      	ldr	r4, [r0, #4]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:483
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  current_netif = inp;
 10a:	f8df a094 	ldr.w	sl, [pc, #148]	; 1a0 <ip_input+0x1a0>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:484
  current_header = iphdr;
 10e:	4e23      	ldr	r6, [pc, #140]	; (19c <ip_input+0x19c>)
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:483
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  current_netif = inp;
 110:	f8ca 7000 	str.w	r7, [sl]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:484
  current_header = iphdr;
 114:	6034      	str	r4, [r6, #0]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:488

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
 116:	4628      	mov	r0, r5
 118:	4639      	mov	r1, r7
 11a:	f7ff fffe 	bl	0 <raw_input>
 11e:	2800      	cmp	r0, #0
 120:	d12a      	bne.n	178 <ip_input+0x178>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:492
#endif /* LWIP_RAW */
  {

    switch (IPH_PROTO(iphdr)) {
 122:	7a63      	ldrb	r3, [r4, #9]
 124:	2b06      	cmp	r3, #6
 126:	d009      	beq.n	13c <ip_input+0x13c>
 128:	2b11      	cmp	r3, #17
 12a:	d002      	beq.n	132 <ip_input+0x132>
 12c:	2b01      	cmp	r3, #1
 12e:	d10f      	bne.n	150 <ip_input+0x150>
 130:	e009      	b.n	146 <ip_input+0x146>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:499
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      snmp_inc_ipindelivers();
      udp_input(p, inp);
 132:	4628      	mov	r0, r5
 134:	4639      	mov	r1, r7
 136:	f7ff fffe 	bl	0 <udp_input>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:500
      break;
 13a:	e01d      	b.n	178 <ip_input+0x178>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:505
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      snmp_inc_ipindelivers();
      tcp_input(p, inp);
 13c:	4628      	mov	r0, r5
 13e:	4639      	mov	r1, r7
 140:	f7ff fffe 	bl	0 <tcp_input>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:506
      break;
 144:	e018      	b.n	178 <ip_input+0x178>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:511
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      snmp_inc_ipindelivers();
      icmp_input(p, inp);
 146:	4628      	mov	r0, r5
 148:	4639      	mov	r1, r7
 14a:	f7ff fffe 	bl	0 <icmp_input>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:512
      break;
 14e:	e013      	b.n	178 <ip_input+0x178>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:522
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
 150:	f8d8 0000 	ldr.w	r0, [r8]
 154:	4639      	mov	r1, r7
 156:	f7ff fffe 	bl	0 <ip4_addr_isbroadcast>
 15a:	b950      	cbnz	r0, 172 <ip_input+0x172>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:523
          !ip_addr_ismulticast(&current_iphdr_dest)) {
 15c:	4b0c      	ldr	r3, [pc, #48]	; (190 <ip_input+0x190>)
 15e:	681b      	ldr	r3, [r3, #0]
 160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:522
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
 164:	2be0      	cmp	r3, #224	; 0xe0
 166:	d004      	beq.n	172 <ip_input+0x172>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:524
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        p->payload = iphdr;
 168:	606c      	str	r4, [r5, #4]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:525
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 16a:	4628      	mov	r0, r5
 16c:	2102      	movs	r1, #2
 16e:	f7ff fffe 	bl	0 <icmp_dest_unreach>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:528
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 172:	4628      	mov	r0, r5
 174:	f7ff fffe 	bl	0 <pbuf_free>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:538
      IP_STATS_INC(ip.drop);
      snmp_inc_ipinunknownprotos();
    }
  }

  current_netif = NULL;
 178:	2300      	movs	r3, #0
 17a:	f8ca 3000 	str.w	r3, [sl]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:539
  current_header = NULL;
 17e:	6033      	str	r3, [r6, #0]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:540
  ip_addr_set_any(&current_iphdr_src);
 180:	f8c9 3000 	str.w	r3, [r9]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:541
  ip_addr_set_any(&current_iphdr_dest);
 184:	f8c8 3000 	str.w	r3, [r8]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:544

  return ERR_OK;
}
 188:	2000      	movs	r0, #0
 18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 18e:	bf00      	nop
	...

Disassembly of section .text.ip_output_if:

00000000 <ip_output_if>:
ip_output_if():
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:575
 */
err_t
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
   0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4:	b085      	sub	sp, #20
   6:	4604      	mov	r4, r0
   8:	460d      	mov	r5, r1
   a:	4699      	mov	r9, r3
   c:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
  10:	9e10      	ldr	r6, [sp, #64]	; 0x40
  12:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:604
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
  16:	4692      	mov	sl, r2
  18:	2a00      	cmp	r2, #0
  1a:	d05d      	beq.n	d8 <ip_output_if+0xd8>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:635
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
  1c:	2114      	movs	r1, #20
  1e:	f7ff fffe 	bl	0 <pbuf_header>
  22:	4603      	mov	r3, r0
  24:	2800      	cmp	r0, #0
  26:	d177      	bne.n	118 <ip_output_if+0x118>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:643
      IP_STATS_INC(ip.err);
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
  28:	f8d4 b004 	ldr.w	fp, [r4, #4]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:660
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHLTOS_SET(iphdr, 4, ip_hlen / 4, tos);
  2c:	f447 408a 	orr.w	r0, r7, #17664	; 0x4500
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:647

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
  30:	f88b 9008 	strb.w	r9, [fp, #8]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:648
    IPH_PROTO_SET(iphdr, proto);
  34:	f88b 8009 	strb.w	r8, [fp, #9]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:654
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
  38:	f89a 2000 	ldrb.w	r2, [sl]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:669
    IPH_LEN_SET(iphdr, htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, htons(ip_id));
  3c:	4f39      	ldr	r7, [pc, #228]	; (124 <ip_output_if+0x124>)
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:654
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
  3e:	f88b 2010 	strb.w	r2, [fp, #16]
  42:	f89a 2001 	ldrb.w	r2, [sl, #1]
  46:	f88b 2011 	strb.w	r2, [fp, #17]
  4a:	f89a 2002 	ldrb.w	r2, [sl, #2]
  4e:	f88b 2012 	strb.w	r2, [fp, #18]
  52:	f89a 2003 	ldrb.w	r2, [sl, #3]
  56:	f88b 2013 	strb.w	r2, [fp, #19]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:660
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHLTOS_SET(iphdr, 4, ip_hlen / 4, tos);
  5a:	9301      	str	r3, [sp, #4]
  5c:	f7ff fffe 	bl	0 <lwip_htons>
  60:	f88b 0000 	strb.w	r0, [fp]
  64:	0a00      	lsrs	r0, r0, #8
  66:	f88b 0001 	strb.w	r0, [fp, #1]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:664
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_v_hl_tos;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
  6a:	8920      	ldrh	r0, [r4, #8]
  6c:	f7ff fffe 	bl	0 <lwip_htons>
  70:	f88b 0002 	strb.w	r0, [fp, #2]
  74:	0a00      	lsrs	r0, r0, #8
  76:	f88b 0003 	strb.w	r0, [fp, #3]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:668
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
  7a:	9b01      	ldr	r3, [sp, #4]
  7c:	f88b 3006 	strb.w	r3, [fp, #6]
  80:	f88b 3007 	strb.w	r3, [fp, #7]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:669
    IPH_ID_SET(iphdr, htons(ip_id));
  84:	8838      	ldrh	r0, [r7, #0]
  86:	f7ff fffe 	bl	0 <lwip_htons>
  8a:	f88b 0004 	strb.w	r0, [fp, #4]
  8e:	0a00      	lsrs	r0, r0, #8
  90:	f88b 0005 	strb.w	r0, [fp, #5]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:673
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
  94:	883b      	ldrh	r3, [r7, #0]
  96:	3301      	adds	r3, #1
  98:	803b      	strh	r3, [r7, #0]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:675

    if (ip_addr_isany(src)) {
  9a:	b10d      	cbz	r5, a0 <ip_output_if+0xa0>
  9c:	682b      	ldr	r3, [r5, #0]
  9e:	b953      	cbnz	r3, b6 <ip_output_if+0xb6>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:676
      ip_addr_copy(iphdr->src, netif->ip_addr);
  a0:	7933      	ldrb	r3, [r6, #4]
  a2:	f88b 300c 	strb.w	r3, [fp, #12]
  a6:	7973      	ldrb	r3, [r6, #5]
  a8:	f88b 300d 	strb.w	r3, [fp, #13]
  ac:	79b3      	ldrb	r3, [r6, #6]
  ae:	f88b 300e 	strb.w	r3, [fp, #14]
  b2:	79f3      	ldrb	r3, [r6, #7]
  b4:	e008      	b.n	c8 <ip_output_if+0xc8>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:679
    } else {
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
  b6:	0a1a      	lsrs	r2, r3, #8
  b8:	f88b 200d 	strb.w	r2, [fp, #13]
  bc:	0c1a      	lsrs	r2, r3, #16
  be:	f88b 300c 	strb.w	r3, [fp, #12]
  c2:	f88b 200e 	strb.w	r2, [fp, #14]
  c6:	0e1b      	lsrs	r3, r3, #24
  c8:	f88b 300f 	strb.w	r3, [fp, #15]
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:690
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
    chk_sum = (chk_sum >> 16) + chk_sum;
    chk_sum = ~chk_sum;
    iphdr->_chksum = chk_sum; /* network order */
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
  cc:	2300      	movs	r3, #0
  ce:	f88b 300a 	strb.w	r3, [fp, #10]
  d2:	f88b 300b 	strb.w	r3, [fp, #11]
  d6:	e00e      	b.n	f6 <ip_output_if+0xf6>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:698
#endif
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
    ip_addr_copy(dest_addr, iphdr->dest);
  d8:	6843      	ldr	r3, [r0, #4]
  da:	f10d 0a10 	add.w	sl, sp, #16
  de:	7c59      	ldrb	r1, [r3, #17]
  e0:	7c1a      	ldrb	r2, [r3, #16]
  e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  e6:	7c99      	ldrb	r1, [r3, #18]
  e8:	7cdb      	ldrb	r3, [r3, #19]
  ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  ee:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
  f2:	f84a 3d04 	str.w	r3, [sl, #-4]!
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:721
  }
#endif /* LWIP_IGMP */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
  f6:	8c33      	ldrh	r3, [r6, #32]
  f8:	b143      	cbz	r3, 10c <ip_output_if+0x10c>
  fa:	8922      	ldrh	r2, [r4, #8]
  fc:	429a      	cmp	r2, r3
  fe:	d905      	bls.n	10c <ip_output_if+0x10c>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:722
    return ip_frag(p, netif, dest);
 100:	4620      	mov	r0, r4
 102:	4631      	mov	r1, r6
 104:	4652      	mov	r2, sl
 106:	f7ff fffe 	bl	0 <ip_frag>
 10a:	e006      	b.n	11a <ip_output_if+0x11a>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:727
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
 10c:	6973      	ldr	r3, [r6, #20]
 10e:	4630      	mov	r0, r6
 110:	4621      	mov	r1, r4
 112:	4652      	mov	r2, sl
 114:	4798      	blx	r3
 116:	e000      	b.n	11a <ip_output_if+0x11a>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:640
    if (pbuf_header(p, IP_HLEN)) {
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
 118:	20fe      	movs	r0, #254	; 0xfe
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:728
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
}
 11a:	b240      	sxtb	r0, r0
 11c:	b005      	add	sp, #20
 11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 122:	bf00      	nop
 124:	00000000 	.word	0x00000000

Disassembly of section .text.ip_output:

00000000 <ip_output>:
ip_output():
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:750
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
   0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4:	4604      	mov	r4, r0
   6:	b085      	sub	sp, #20
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:757

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(dest)) == NULL) {
   8:	4610      	mov	r0, r2
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:750
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
   a:	460f      	mov	r7, r1
   c:	4615      	mov	r5, r2
   e:	461e      	mov	r6, r3
  10:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
  14:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:757

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(dest)) == NULL) {
  18:	f7ff fffe 	bl	0 <ip_output>
  1c:	b158      	cbz	r0, 36 <ip_output+0x36>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:764
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    return ERR_RTE;
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
  1e:	9002      	str	r0, [sp, #8]
  20:	4639      	mov	r1, r7
  22:	4620      	mov	r0, r4
  24:	462a      	mov	r2, r5
  26:	4633      	mov	r3, r6
  28:	f8cd 9000 	str.w	r9, [sp]
  2c:	f8cd 8004 	str.w	r8, [sp, #4]
  30:	f7ff fffe 	bl	0 <ip_output>
  34:	e000      	b.n	38 <ip_output+0x38>
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:761

  if ((netif = ip_route(dest)) == NULL) {
    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    return ERR_RTE;
  36:	20fc      	movs	r0, #252	; 0xfc
D:\sunny\stm32\therme\Utilities\lwip-1.3.1\src\core\ipv4/ip.c:765
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
}
  38:	b240      	sxtb	r0, r0
  3a:	b005      	add	sp, #20
  3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
