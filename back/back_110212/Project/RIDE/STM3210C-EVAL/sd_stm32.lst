
D:\sunny\stm32\therme\Project\RIDE\STM3210C-EVAL\sd_stm32.o:     file format elf32-littlearm
D:\sunny\stm32\therme\Project\RIDE\STM3210C-EVAL\sd_stm32.o


Disassembly of section .text.if_readBuf:

00000000 <if_readBuf>:
if_readBuf():
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:111

/*****************************************************************************/

esint8 if_readBuf(hwInterface* file, euint32 address, euint8* buf)
{
  return(sd_readSector(file, address, buf, 512));
   0:	f44f 7300 	mov.w	r3, #512	; 0x200
   4:	f7ff bffe 	b.w	0 <sd_readSector>

Disassembly of section .text.if_writeBuf:

00000000 <if_writeBuf>:
if_writeBuf():
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:117
}
/*****************************************************************************/

esint8 if_writeBuf(hwInterface* file, euint32 address, euint8* buf)
{
  return(sd_writeSector(file, address, buf));
   0:	f7ff bffe 	b.w	0 <sd_writeSector>

Disassembly of section .text.if_setPos:

00000000 <if_setPos>:
if_setPos():
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:124
/*****************************************************************************/

esint8 if_setPos(hwInterface* file, euint32 address)
{
  return(0);
}
   0:	2000      	movs	r0, #0
   2:	4770      	bx	lr

Disassembly of section .text.if_spiInit:

00000000 <if_spiInit>:
if_spiInit():
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:144
  return(incoming);
}
/*****************************************************************************/

void if_spiInit(hwInterface *iface)
{
   0:	b510      	push	{r4, lr}
SPI_Config():
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:70
{
  GPIO_InitTypeDef  GPIO_InitStructure;
  SPI_InitTypeDef   SPI_InitStructure;

  /* MSD_SPI_PORT and MSD_CS_PORT Periph clock enable */
  RCC_APB2PeriphClockCmd(MSD_SPI_GPIO_PORT_CLOCK | 
   2:	2015      	movs	r0, #21
if_spiInit():
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:144
  return(incoming);
}
/*****************************************************************************/

void if_spiInit(hwInterface *iface)
{
   4:	b086      	sub	sp, #24
SPI_Config():
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:70
{
  GPIO_InitTypeDef  GPIO_InitStructure;
  SPI_InitTypeDef   SPI_InitStructure;

  /* MSD_SPI_PORT and MSD_CS_PORT Periph clock enable */
  RCC_APB2PeriphClockCmd(MSD_SPI_GPIO_PORT_CLOCK | 
   6:	2101      	movs	r1, #1
   8:	f7ff fffe 	bl	0 <RCC_APB2PeriphClockCmd>
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:75
                         MSD_CS_GPIO_PORT_CLOCK | \
                         RCC_APB2Periph_AFIO, ENABLE);

  /* MSD_SPI Periph clock enable */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
   c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  10:	2101      	movs	r1, #1
  12:	f7ff fffe 	bl	0 <RCC_APB2PeriphClockCmd>
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:78

  /* Configure MSD_SPI pins: SCK, MISO and MOSI */
  GPIO_InitStructure.GPIO_Pin = MSD_SPI_PIN_SCK  | 
  16:	23e0      	movs	r3, #224	; 0xe0
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:81
                                MSD_SPI_PIN_MISO | 
								MSD_SPI_PIN_MOSI;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  18:	2403      	movs	r4, #3
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:78

  /* MSD_SPI Periph clock enable */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);

  /* Configure MSD_SPI pins: SCK, MISO and MOSI */
  GPIO_InitStructure.GPIO_Pin = MSD_SPI_PIN_SCK  | 
  1a:	f8ad 3014 	strh.w	r3, [sp, #20]
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:83
                                MSD_SPI_PIN_MISO | 
								MSD_SPI_PIN_MOSI;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(MSD_SPI_PORT, &GPIO_InitStructure);
  1e:	4827      	ldr	r0, [pc, #156]	; (bc <if_spiInit+0xbc>)
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:82
  /* Configure MSD_SPI pins: SCK, MISO and MOSI */
  GPIO_InitStructure.GPIO_Pin = MSD_SPI_PIN_SCK  | 
                                MSD_SPI_PIN_MISO | 
								MSD_SPI_PIN_MOSI;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  20:	2318      	movs	r3, #24
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:83
  GPIO_Init(MSD_SPI_PORT, &GPIO_InitStructure);
  22:	a905      	add	r1, sp, #20
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:81

  /* Configure MSD_SPI pins: SCK, MISO and MOSI */
  GPIO_InitStructure.GPIO_Pin = MSD_SPI_PIN_SCK  | 
                                MSD_SPI_PIN_MISO | 
								MSD_SPI_PIN_MOSI;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  24:	f88d 4016 	strb.w	r4, [sp, #22]
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:82
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  28:	f88d 3017 	strb.w	r3, [sp, #23]
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:83
  GPIO_Init(MSD_SPI_PORT, &GPIO_InitStructure);
  2c:	f7ff fffe 	bl	0 <GPIO_Init>
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:86

  /* Configure CS pin */
  GPIO_InitStructure.GPIO_Pin = MSD_CS_PIN;
  30:	2320      	movs	r3, #32
  32:	f8ad 3014 	strh.w	r3, [sp, #20]
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:89
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(MSD_CS_PORT, &GPIO_InitStructure);
  36:	4822      	ldr	r0, [pc, #136]	; (c0 <if_spiInit+0xc0>)
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:88
  GPIO_Init(MSD_SPI_PORT, &GPIO_InitStructure);

  /* Configure CS pin */
  GPIO_InitStructure.GPIO_Pin = MSD_CS_PIN;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  38:	2310      	movs	r3, #16
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:89
  GPIO_Init(MSD_CS_PORT, &GPIO_InitStructure);
  3a:	a905      	add	r1, sp, #20
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:87
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(MSD_SPI_PORT, &GPIO_InitStructure);

  /* Configure CS pin */
  GPIO_InitStructure.GPIO_Pin = MSD_CS_PIN;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  3c:	f88d 4016 	strb.w	r4, [sp, #22]
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:88
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  40:	f88d 3017 	strb.w	r3, [sp, #23]
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:89
  GPIO_Init(MSD_CS_PORT, &GPIO_InitStructure);
  44:	f7ff fffe 	bl	0 <GPIO_Init>
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:92

  /* MSD_SPI Config */
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
  48:	2300      	movs	r3, #0
  4a:	f8ad 3000 	strh.w	r3, [sp]
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:93
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
  4e:	f44f 7382 	mov.w	r3, #260	; 0x104
  52:	f8ad 3002 	strh.w	r3, [sp, #2]
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:94
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
  56:	2300      	movs	r3, #0
  58:	f8ad 3004 	strh.w	r3, [sp, #4]
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:95
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
  5c:	f8ad 3006 	strh.w	r3, [sp, #6]
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:96
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
  60:	f8ad 3008 	strh.w	r3, [sp, #8]
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:97
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
  64:	f44f 7300 	mov.w	r3, #512	; 0x200
  68:	f8ad 300a 	strh.w	r3, [sp, #10]
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:98
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
  6c:	2300      	movs	r3, #0
  6e:	f8ad 300c 	strh.w	r3, [sp, #12]
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:99
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
  72:	f8ad 300e 	strh.w	r3, [sp, #14]
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:101
  SPI_InitStructure.SPI_CRCPolynomial = 7;
  SPI_Init(MSD_SPI, &SPI_InitStructure);
  76:	4813      	ldr	r0, [pc, #76]	; (c4 <if_spiInit+0xc4>)
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:100
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
  SPI_InitStructure.SPI_CRCPolynomial = 7;
  78:	2307      	movs	r3, #7
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:101
  SPI_Init(MSD_SPI, &SPI_InitStructure);
  7a:	4669      	mov	r1, sp
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:100
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
  SPI_InitStructure.SPI_CRCPolynomial = 7;
  7c:	f8ad 3010 	strh.w	r3, [sp, #16]
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:101
  SPI_Init(MSD_SPI, &SPI_InitStructure);
  80:	f7ff fffe 	bl	0 <SPI_Init>
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:104

  /* MSD_SPI enable */
  SPI_Cmd(MSD_SPI, ENABLE);
  84:	480f      	ldr	r0, [pc, #60]	; (c4 <if_spiInit+0xc4>)
  86:	2101      	movs	r1, #1
  88:	f7ff fffe 	bl	0 <SPI_Cmd>
if_spiInit():
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:149
{
  euint8 i;

  SPI_Config();

  MSD_CS_HIGH();
  8c:	480c      	ldr	r0, [pc, #48]	; (c0 <if_spiInit+0xc0>)
  8e:	2120      	movs	r1, #32
  90:	f7ff fffe 	bl	0 <GPIO_SetBits>
  94:	3412      	adds	r4, #18
my_if_spiSend():
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:135

static euint8 my_if_spiSend(hwInterface *iface, euint8 outgoing)
{
  euint8 incoming;

  SPI_I2S_SendData(MSD_SPI, outgoing);
  96:	480b      	ldr	r0, [pc, #44]	; (c4 <if_spiInit+0xc4>)
  98:	21ff      	movs	r1, #255	; 0xff
  9a:	f7ff fffe 	bl	0 <SPI_I2S_SendData>
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:136
  while (SPI_I2S_GetFlagStatus(MSD_SPI, SPI_I2S_FLAG_TXE) == RESET);
  9e:	4809      	ldr	r0, [pc, #36]	; (c4 <if_spiInit+0xc4>)
  a0:	2102      	movs	r1, #2
  a2:	f7ff fffe 	bl	0 <SPI_I2S_GetFlagStatus>
  a6:	2800      	cmp	r0, #0
  a8:	d0f9      	beq.n	9e <if_spiInit+0x9e>
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:137
  incoming = SPI_I2S_ReceiveData(MSD_SPI);
  aa:	3c01      	subs	r4, #1
  ac:	4805      	ldr	r0, [pc, #20]	; (c4 <if_spiInit+0xc4>)
  ae:	b2e4      	uxtb	r4, r4
  b0:	f7ff fffe 	bl	0 <SPI_I2S_ReceiveData>
if_spiInit():
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:152
  SPI_Config();

  MSD_CS_HIGH();

  /* Send 20 spi commands with card not selected */
  for (i = 0;i < 21;i++)
  b4:	2c00      	cmp	r4, #0
  b6:	d1ee      	bne.n	96 <if_spiInit+0x96>
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:154
    my_if_spiSend(iface, 0xff);
}
  b8:	b006      	add	sp, #24
  ba:	bd10      	pop	{r4, pc}
  bc:	40010800 	.word	0x40010800
  c0:	40011000 	.word	0x40011000
  c4:	40013000 	.word	0x40013000

Disassembly of section .text.if_spiSend:

00000000 <if_spiSend>:
if_spiSend():
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:158
/*****************************************************************************/

euint8 if_spiSend(hwInterface *iface, euint8 outgoing)
{
   0:	480cb510 	.word	0x480cb510
   4:	460c      	mov	r4, r1
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:161
  euint8 incoming;

  MSD_CS_LOW();
   6:	2120      	movs	r1, #32
   8:	f7ff fffe 	bl	0 <GPIO_ResetBits>
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:163

  SPI_I2S_SendData(MSD_SPI, outgoing);
   c:	480a      	ldr	r0, [pc, #40]	; (38 <if_spiSend+0x38>)
   e:	4621      	mov	r1, r4
  10:	f7ff fffe 	bl	0 <SPI_I2S_SendData>
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:165

  while (SPI_I2S_GetFlagStatus(MSD_SPI, SPI_I2S_FLAG_TXE) == RESET);
  14:	4808      	ldr	r0, [pc, #32]	; (38 <if_spiSend+0x38>)
  16:	2102      	movs	r1, #2
  18:	f7ff fffe 	bl	0 <SPI_I2S_GetFlagStatus>
  1c:	2800      	cmp	r0, #0
  1e:	d0f9      	beq.n	14 <if_spiSend+0x14>
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:167

  incoming = SPI_I2S_ReceiveData(MSD_SPI);
  20:	4805      	ldr	r0, [pc, #20]	; (38 <if_spiSend+0x38>)
  22:	f7ff fffe 	bl	0 <SPI_I2S_ReceiveData>
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:169

  MSD_CS_HIGH();
  26:	2120      	movs	r1, #32
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:167

  SPI_I2S_SendData(MSD_SPI, outgoing);

  while (SPI_I2S_GetFlagStatus(MSD_SPI, SPI_I2S_FLAG_TXE) == RESET);

  incoming = SPI_I2S_ReceiveData(MSD_SPI);
  28:	4604      	mov	r4, r0
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:169

  MSD_CS_HIGH();
  2a:	4802      	ldr	r0, [pc, #8]	; (34 <if_spiSend+0x34>)
  2c:	f7ff fffe 	bl	0 <GPIO_SetBits>
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:172

  return(incoming);
}
  30:	b2e0      	uxtb	r0, r4
  32:	bd10      	pop	{r4, pc}
  34:	40011000 	.word	0x40011000
  38:	40013000 	.word	0x40013000

Disassembly of section .text.if_initInterface:

00000000 <if_initInterface>:
if_initInterface():
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:176
/*****************************************************************************/

esint8 if_initInterface(hwInterface* file, eint8* opts)
{
   0:	b513      	push	{r0, r1, r4, lr}
   2:	4604      	mov	r4, r0
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:179
  euint32 sc;

  if_spiInit(file); /* init at low speed */
   4:	f7ff fffe 	bl	0 <if_initInterface>
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:181

  if (sd_Init(file) < 0)
   8:	4620      	mov	r0, r4
   a:	f7ff fffe 	bl	0 <sd_Init>
   e:	2800      	cmp	r0, #0
  10:	db12      	blt.n	38 <if_initInterface+0x38>
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:186
  {
    DBG((TXT("Card failed to init, breaking up...\n")));
    return(-1);
  }
  if (sd_State(file) < 0)
  12:	4620      	mov	r0, r4
  14:	f7ff fffe 	bl	0 <sd_State>
  18:	2800      	cmp	r0, #0
  1a:	db0f      	blt.n	3c <if_initInterface+0x3c>
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:192
  {
    DBG((TXT("Card didn't return the ready state, breaking up...\n")));
    return(-2);
  }

  sd_getDriveSize(file, &sc);
  1c:	4620      	mov	r0, r4
  1e:	a901      	add	r1, sp, #4
  20:	f7ff fffe 	bl	0 <sd_getDriveSize>
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:193
  file->sectorCount = sc / 512;
  24:	9801      	ldr	r0, [sp, #4]
  26:	0a43      	lsrs	r3, r0, #9
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:194
  if ( (sc % 512) != 0)
  28:	05c0      	lsls	r0, r0, #23
  2a:	0dc0      	lsrs	r0, r0, #23
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:193
    DBG((TXT("Card didn't return the ready state, breaking up...\n")));
    return(-2);
  }

  sd_getDriveSize(file, &sc);
  file->sectorCount = sc / 512;
  2c:	6023      	str	r3, [r4, #0]
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:194
  if ( (sc % 512) != 0)
  2e:	b130      	cbz	r0, 3e <if_initInterface+0x3e>
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:196
  {
    file->sectorCount--;
  30:	3b01      	subs	r3, #1
  32:	6023      	str	r3, [r4, #0]
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:202
  }

  DBG((TXT("Drive Size is %lu Bytes (%lu Sectors)\n"), sc, file->sectorCount));
  DBG((TXT("Init done...\n")));

  return(0);
  34:	2000      	movs	r0, #0
  36:	e002      	b.n	3e <if_initInterface+0x3e>
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:184
  if_spiInit(file); /* init at low speed */

  if (sd_Init(file) < 0)
  {
    DBG((TXT("Card failed to init, breaking up...\n")));
    return(-1);
  38:	20ff      	movs	r0, #255	; 0xff
  3a:	e000      	b.n	3e <if_initInterface+0x3e>
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:189
  }
  if (sd_State(file) < 0)
  {
    DBG((TXT("Card didn't return the ready state, breaking up...\n")));
    return(-2);
  3c:	20fe      	movs	r0, #254	; 0xfe
D:\sunny\stm32\therme\Utilities\efsl\source\interface/sd_stm32.c:203

  DBG((TXT("Drive Size is %lu Bytes (%lu Sectors)\n"), sc, file->sectorCount));
  DBG((TXT("Init done...\n")));

  return(0);
}
  3e:	b240      	sxtb	r0, r0
  40:	bd1c      	pop	{r2, r3, r4, pc}
