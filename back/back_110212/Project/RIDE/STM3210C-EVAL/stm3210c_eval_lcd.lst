
D:\sunny\stm32\therme\Project\RIDE\STM3210C-EVAL\stm3210c_eval_lcd.o:     file format elf32-littlearm
D:\sunny\stm32\therme\Project\RIDE\STM3210C-EVAL\stm3210c_eval_lcd.o


Disassembly of section .text.delay:

00000000 <delay>:
delay():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1243
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
   0:	b084      	sub	sp, #16
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1244
  __IO uint32_t index = 0; 
   2:	2300      	movs	r3, #0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1243
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
   4:	9001      	str	r0, [sp, #4]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1244
  __IO uint32_t index = 0; 
   6:	9303      	str	r3, [sp, #12]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1245
  for(index = (100000 * nCount); index != 0; index--)
   8:	9b01      	ldr	r3, [sp, #4]
   a:	4a05      	ldr	r2, [pc, #20]	; (20 <delay+0x20>)
   c:	4353      	muls	r3, r2
   e:	e001      	b.n	14 <delay+0x14>
  10:	9b03      	ldr	r3, [sp, #12]
  12:	3b01      	subs	r3, #1
  14:	9303      	str	r3, [sp, #12]
  16:	9b03      	ldr	r3, [sp, #12]
  18:	2b00      	cmp	r3, #0
  1a:	d1f9      	bne.n	10 <delay+0x10>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1248
  {
  }
}
  1c:	b004      	add	sp, #16
  1e:	4770      	bx	lr
  20:	000186a0 	.word	0x000186a0

Disassembly of section .text.LCD_SetTextColor:

00000000 <LCD_SetTextColor>:
LCD_SetTextColor():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:301
  * @brief  Sets the Text color.
  * @param  Color: specifies the Text color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetTextColor(__IO uint16_t Color)
{
   0:	f8adb082 	.word	0xf8adb082
   4:	0006      	movs	r6, r0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:302
  TextColor = Color;
   6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   a:	4b02      	ldr	r3, [pc, #8]	; (14 <LCD_SetTextColor+0x14>)
   c:	b292      	uxth	r2, r2
   e:	801a      	strh	r2, [r3, #0]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:303
}
  10:	b002      	add	sp, #8
  12:	4770      	bx	lr
  14:	00000000 	.word	0x00000000

Disassembly of section .text.LCD_SetBackColor:

00000000 <LCD_SetBackColor>:
LCD_SetBackColor():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:312
  * @brief  Sets the Background color.
  * @param  Color: specifies the Background color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetBackColor(__IO uint16_t Color)
{
   0:	b082      	sub	sp, #8
   2:	f8ad 0006 	strh.w	r0, [sp, #6]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:313
  BackColor = Color;
   6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   a:	4b02      	ldr	r3, [pc, #8]	; (14 <LCD_SetBackColor+0x14>)
   c:	b292      	uxth	r2, r2
   e:	801a      	strh	r2, [r3, #0]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:314
}
  10:	b002      	add	sp, #8
  12:	4770      	bx	lr
  14:	00000000 	.word	0x00000000

Disassembly of section .text.LCD_WriteRAM:

00000000 <LCD_WriteRAM>:
LCD_WriteRAM():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:864
  * @brief  Writes to the LCD RAM.
  * @param  RGB_Code: the pixel color in RGB mode (5-6-5).
  * @retval None
  */
void LCD_WriteRAM(uint16_t RGB_Code)
{
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:865
  SPI_I2S_SendData(LCD_SPI, RGB_Code >> 8);
   4:	0a21      	lsrs	r1, r4, #8
   6:	480a      	ldr	r0, [pc, #40]	; (30 <LCD_WriteRAM+0x30>)
   8:	f7ff fffe 	bl	0 <SPI_I2S_SendData>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:866
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET)
   c:	4808      	ldr	r0, [pc, #32]	; (30 <LCD_WriteRAM+0x30>)
   e:	2180      	movs	r1, #128	; 0x80
  10:	f7ff fffe 	bl	0 <SPI_I2S_GetFlagStatus>
  14:	2800      	cmp	r0, #0
  16:	d1f9      	bne.n	c <LCD_WriteRAM+0xc>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:869
  {
  }
  SPI_I2S_SendData(LCD_SPI, RGB_Code & 0xFF);
  18:	4805      	ldr	r0, [pc, #20]	; (30 <LCD_WriteRAM+0x30>)
  1a:	b2e1      	uxtb	r1, r4
  1c:	f7ff fffe 	bl	0 <SPI_I2S_SendData>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:870
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET)
  20:	4803      	ldr	r0, [pc, #12]	; (30 <LCD_WriteRAM+0x30>)
  22:	2180      	movs	r1, #128	; 0x80
  24:	f7ff fffe 	bl	0 <SPI_I2S_GetFlagStatus>
  28:	2800      	cmp	r0, #0
  2a:	d1f9      	bne.n	20 <LCD_WriteRAM+0x20>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:873
  {
  }
}
  2c:	bd10      	pop	{r4, pc}
  2e:	bf00      	nop
  30:	40003c00 	.word	0x40003c00

Disassembly of section .text.LCD_CtrlLinesConfig:

00000000 <LCD_CtrlLinesConfig>:
LCD_CtrlLinesConfig():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:929
  * @brief  Configures LCD control lines in Output Push-Pull mode.
  * @param  None
  * @retval None
  */
void LCD_CtrlLinesConfig(void)
{
   0:	b537      	push	{r0, r1, r2, r4, r5, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:933
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIO clock */
  RCC_APB2PeriphClockCmd(LCD_NCS_GPIO_CLK | LCD_BL_GPIO_CLK, ENABLE);
   2:	2030      	movs	r0, #48	; 0x30
   4:	2101      	movs	r1, #1
   6:	f7ff fffe 	bl	0 <RCC_APB2PeriphClockCmd>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:937

  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   a:	2503      	movs	r5, #3
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:936

  /* Enable GPIO clock */
  RCC_APB2PeriphClockCmd(LCD_NCS_GPIO_CLK | LCD_BL_GPIO_CLK, ENABLE);

  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
   c:	f44f 7380 	mov.w	r3, #256	; 0x100
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:938
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  10:	2410      	movs	r4, #16
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:939
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);  
  12:	a901      	add	r1, sp, #4
  14:	480a      	ldr	r0, [pc, #40]	; (40 <LCD_CtrlLinesConfig+0x40>)
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:936

  /* Enable GPIO clock */
  RCC_APB2PeriphClockCmd(LCD_NCS_GPIO_CLK | LCD_BL_GPIO_CLK, ENABLE);

  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
  16:	f8ad 3004 	strh.w	r3, [sp, #4]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:937
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  1a:	f88d 5006 	strb.w	r5, [sp, #6]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:938
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  1e:	f88d 4007 	strb.w	r4, [sp, #7]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:939
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);  
  22:	f7ff fffe 	bl	0 <GPIO_Init>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:942

  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_BL_PIN;
  26:	2380      	movs	r3, #128	; 0x80
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:945
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(LCD_BL_GPIO_PORT, &GPIO_InitStructure);  
  28:	4806      	ldr	r0, [pc, #24]	; (44 <LCD_CtrlLinesConfig+0x44>)
  2a:	a901      	add	r1, sp, #4
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:942
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);  

  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_BL_PIN;
  2c:	f8ad 3004 	strh.w	r3, [sp, #4]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:943
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  30:	f88d 5006 	strb.w	r5, [sp, #6]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:944
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  34:	f88d 4007 	strb.w	r4, [sp, #7]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:945
  GPIO_Init(LCD_BL_GPIO_PORT, &GPIO_InitStructure);  
  38:	f7ff fffe 	bl	0 <GPIO_Init>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:946
}
  3c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
  3e:	bf00      	nop
  40:	40011000 	.word	0x40011000
  44:	40011400 	.word	0x40011400

Disassembly of section .text.LCD_CtrlLinesWrite:

00000000 <LCD_CtrlLinesWrite>:
LCD_CtrlLinesWrite():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:962
  * @retval None
  */
void LCD_CtrlLinesWrite(GPIO_TypeDef* GPIOx, uint16_t CtrlPins, BitAction BitVal)
{
  /* Set or Reset the control line */
  GPIO_WriteBit(GPIOx, CtrlPins, BitVal);
   0:	f7ff bffe 	b.w	0 <GPIO_WriteBit>

Disassembly of section .text.LCD_nCS_StartByte:

00000000 <LCD_nCS_StartByte>:
LCD_nCS_StartByte():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:718
  * @brief  Reset LCD control line(/CS) and Send Start-Byte
  * @param  Start_Byte: the Start-Byte to be sent
  * @retval None
  */
void LCD_nCS_StartByte(uint8_t Start_Byte)
{
   0:	b510      	push	{r4, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:719
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_RESET);
   2:	f44f 7180 	mov.w	r1, #256	; 0x100
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:718
  * @brief  Reset LCD control line(/CS) and Send Start-Byte
  * @param  Start_Byte: the Start-Byte to be sent
  * @retval None
  */
void LCD_nCS_StartByte(uint8_t Start_Byte)
{
   6:	4604      	mov	r4, r0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:719
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_RESET);
   8:	2200      	movs	r2, #0
   a:	4807      	ldr	r0, [pc, #28]	; (28 <LCD_nCS_StartByte+0x28>)
   c:	f7ff fffe 	bl	0 <LCD_nCS_StartByte>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:720
  SPI_I2S_SendData(LCD_SPI, Start_Byte);
  10:	4806      	ldr	r0, [pc, #24]	; (2c <LCD_nCS_StartByte+0x2c>)
  12:	4621      	mov	r1, r4
  14:	f7ff fffe 	bl	0 <SPI_I2S_SendData>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:721
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET)
  18:	4804      	ldr	r0, [pc, #16]	; (2c <LCD_nCS_StartByte+0x2c>)
  1a:	2180      	movs	r1, #128	; 0x80
  1c:	f7ff fffe 	bl	0 <SPI_I2S_GetFlagStatus>
  20:	2800      	cmp	r0, #0
  22:	d1f9      	bne.n	18 <LCD_nCS_StartByte+0x18>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:724
  {
  }
}
  24:	bd10      	pop	{r4, pc}
  26:	bf00      	nop
  28:	40011000 	.word	0x40011000
  2c:	40003c00 	.word	0x40003c00

Disassembly of section .text.LCD_WriteRegIndex:

00000000 <LCD_WriteRegIndex>:
LCD_WriteRegIndex():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:732
  * @brief  Writes index to select the LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void LCD_WriteRegIndex(uint8_t LCD_Reg)
{
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:734
  /* Reset LCD control line(/CS) and Send Start-Byte */
  LCD_nCS_StartByte(START_BYTE | SET_INDEX);
   4:	2070      	movs	r0, #112	; 0x70
   6:	f7ff fffe 	bl	0 <LCD_WriteRegIndex>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:736
  /* Write 16-bit Reg Index (High Byte is 0) */
  SPI_I2S_SendData(LCD_SPI, 0x00);
   a:	480e      	ldr	r0, [pc, #56]	; (44 <LCD_WriteRegIndex+0x44>)
   c:	2100      	movs	r1, #0
   e:	f7ff fffe 	bl	0 <SPI_I2S_SendData>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:737
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET)
  12:	480c      	ldr	r0, [pc, #48]	; (44 <LCD_WriteRegIndex+0x44>)
  14:	2180      	movs	r1, #128	; 0x80
  16:	f7ff fffe 	bl	0 <SPI_I2S_GetFlagStatus>
  1a:	2800      	cmp	r0, #0
  1c:	d1f9      	bne.n	12 <LCD_WriteRegIndex+0x12>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:740
  {
  }
  SPI_I2S_SendData(LCD_SPI, LCD_Reg);
  1e:	4809      	ldr	r0, [pc, #36]	; (44 <LCD_WriteRegIndex+0x44>)
  20:	4621      	mov	r1, r4
  22:	f7ff fffe 	bl	0 <SPI_I2S_SendData>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:741
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET)
  26:	4807      	ldr	r0, [pc, #28]	; (44 <LCD_WriteRegIndex+0x44>)
  28:	2180      	movs	r1, #128	; 0x80
  2a:	f7ff fffe 	bl	0 <SPI_I2S_GetFlagStatus>
  2e:	2800      	cmp	r0, #0
  30:	d1f9      	bne.n	26 <LCD_WriteRegIndex+0x26>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:744
  {
  }
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
  32:	4805      	ldr	r0, [pc, #20]	; (48 <LCD_WriteRegIndex+0x48>)
  34:	f44f 7180 	mov.w	r1, #256	; 0x100
  38:	2201      	movs	r2, #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:745
}
  3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:744
  }
  SPI_I2S_SendData(LCD_SPI, LCD_Reg);
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET)
  {
  }
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
  3e:	f7ff bffe 	b.w	0 <LCD_WriteRegIndex>
  42:	bf00      	nop
  44:	40003c00 	.word	0x40003c00
  48:	40011000 	.word	0x40011000

Disassembly of section .text.LCD_WriteRAM_Prepare:

00000000 <LCD_WriteRAM_Prepare>:
LCD_WriteRAM_Prepare():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:814
  * @param  None
  * @retval None
  */
void LCD_WriteRAM_Prepare(void)
{
  LCD_WriteRegIndex(R34); /* Select GRAM Reg */
   0:	2022      	movs	r0, #34	; 0x22
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:813
  * @brief  Prepare to write to the LCD RAM.
  * @param  None
  * @retval None
  */
void LCD_WriteRAM_Prepare(void)
{
   2:	b510      	push	{r4, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:814
  LCD_WriteRegIndex(R34); /* Select GRAM Reg */
   4:	f7ff fffe 	bl	0 <LCD_WriteRAM_Prepare>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:816
  /* Reset LCD control line(/CS) and Send Start-Byte */
  LCD_nCS_StartByte(START_BYTE | LCD_WRITE_REG);
   8:	2072      	movs	r0, #114	; 0x72
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:817
}
   a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:816
  */
void LCD_WriteRAM_Prepare(void)
{
  LCD_WriteRegIndex(R34); /* Select GRAM Reg */
  /* Reset LCD control line(/CS) and Send Start-Byte */
  LCD_nCS_StartByte(START_BYTE | LCD_WRITE_REG);
   e:	f7ff bffe 	b.w	0 <LCD_WriteRAM_Prepare>

Disassembly of section .text.LCD_WriteReg:

00000000 <LCD_WriteReg>:
LCD_WriteReg():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:840
  * @param  LCD_Reg: address of the selected register.
  * @param  LCD_RegValue: value to write to the selected register.
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
   0:	b510      	push	{r4, lr}
   2:	460c      	mov	r4, r1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:842
  /* Write 16-bit Index (then Write Reg) */
  LCD_WriteRegIndex(LCD_Reg);
   4:	f7ff fffe 	bl	0 <LCD_WriteReg>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:845
  /* Write 16-bit Reg */
  /* Reset LCD control line(/CS) and Send Start-Byte */
  LCD_nCS_StartByte(START_BYTE | LCD_WRITE_REG);
   8:	2072      	movs	r0, #114	; 0x72
   a:	f7ff fffe 	bl	0 <LCD_WriteReg>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:846
  SPI_I2S_SendData(LCD_SPI, LCD_RegValue>>8);
   e:	480e      	ldr	r0, [pc, #56]	; (48 <LCD_WriteReg+0x48>)
  10:	0a21      	lsrs	r1, r4, #8
  12:	f7ff fffe 	bl	0 <SPI_I2S_SendData>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:847
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET)
  16:	480c      	ldr	r0, [pc, #48]	; (48 <LCD_WriteReg+0x48>)
  18:	2180      	movs	r1, #128	; 0x80
  1a:	f7ff fffe 	bl	0 <SPI_I2S_GetFlagStatus>
  1e:	2800      	cmp	r0, #0
  20:	d1f9      	bne.n	16 <LCD_WriteReg+0x16>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:850
  {
  }
  SPI_I2S_SendData(LCD_SPI, (LCD_RegValue & 0xFF));
  22:	4809      	ldr	r0, [pc, #36]	; (48 <LCD_WriteReg+0x48>)
  24:	b2e1      	uxtb	r1, r4
  26:	f7ff fffe 	bl	0 <SPI_I2S_SendData>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:851
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET)
  2a:	4807      	ldr	r0, [pc, #28]	; (48 <LCD_WriteReg+0x48>)
  2c:	2180      	movs	r1, #128	; 0x80
  2e:	f7ff fffe 	bl	0 <SPI_I2S_GetFlagStatus>
  32:	2800      	cmp	r0, #0
  34:	d1f9      	bne.n	2a <LCD_WriteReg+0x2a>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:854
  {
  }
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
  36:	4805      	ldr	r0, [pc, #20]	; (4c <LCD_WriteReg+0x4c>)
  38:	f44f 7180 	mov.w	r1, #256	; 0x100
  3c:	2201      	movs	r2, #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:855
}
  3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:854
  }
  SPI_I2S_SendData(LCD_SPI, (LCD_RegValue & 0xFF));
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET)
  {
  }
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
  42:	f7ff bffe 	b.w	0 <LCD_WriteReg>
  46:	bf00      	nop
  48:	40003c00 	.word	0x40003c00
  4c:	40011000 	.word	0x40011000

Disassembly of section .text.LCD_DisplayOff:

00000000 <LCD_DisplayOff>:
LCD_DisplayOff():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:920
  * @retval None
  */
void LCD_DisplayOff(void)
{
  /* Display Off */
  LCD_WriteReg(R7, 0x0);
   0:	2007      	movs	r0, #7
   2:	2100      	movs	r1, #0
   4:	f7ff bffe 	b.w	0 <LCD_DisplayOff>

Disassembly of section .text.LCD_DisplayOn:

00000000 <LCD_DisplayOn>:
LCD_DisplayOn():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:908
  * @retval None
  */
void LCD_DisplayOn(void)
{
  /* Display On */
  LCD_WriteReg(R7, 0x0173); /* 262K color and display ON */
   0:	2007      	movs	r0, #7
   2:	f240 1173 	movw	r1, #371	; 0x173
   6:	f7ff bffe 	b.w	0 <LCD_DisplayOn>

Disassembly of section .text.LCD_PowerOn:

00000000 <LCD_PowerOn>:
LCD_PowerOn():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:882
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void LCD_PowerOn(void)
{ 
   0:	b510      	push	{r4, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:884
  /* Power On sequence ---------------------------------------------------------*/
  LCD_WriteReg(R16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
   2:	2010      	movs	r0, #16
   4:	2100      	movs	r1, #0
   6:	f7ff fffe 	bl	0 <LCD_PowerOn>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:885
  LCD_WriteReg(R17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
   a:	2011      	movs	r0, #17
   c:	2100      	movs	r1, #0
   e:	f7ff fffe 	bl	0 <LCD_PowerOn>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:886
  LCD_WriteReg(R18, 0x0000); /* VREG1OUT voltage */
  12:	2012      	movs	r0, #18
  14:	2100      	movs	r1, #0
  16:	f7ff fffe 	bl	0 <LCD_PowerOn>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:887
  LCD_WriteReg(R19, 0x0000); /* VDV[4:0] for VCOM amplitude */
  1a:	2100      	movs	r1, #0
  1c:	2013      	movs	r0, #19
  1e:	f7ff fffe 	bl	0 <LCD_PowerOn>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:888
  _delay_(20);                 /* Dis-charge capacitor power voltage (200ms) */
  22:	2014      	movs	r0, #20
  24:	f7ff fffe 	bl	0 <LCD_PowerOn>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:889
  LCD_WriteReg(R16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
  28:	2010      	movs	r0, #16
  2a:	f241 71b0 	movw	r1, #6064	; 0x17b0
  2e:	f7ff fffe 	bl	0 <LCD_PowerOn>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:890
  LCD_WriteReg(R17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
  32:	2011      	movs	r0, #17
  34:	f240 1137 	movw	r1, #311	; 0x137
  38:	f7ff fffe 	bl	0 <LCD_PowerOn>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:891
  _delay_(5);                  /* Delay 50 ms */
  3c:	2005      	movs	r0, #5
  3e:	f7ff fffe 	bl	0 <LCD_PowerOn>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:892
  LCD_WriteReg(R18, 0x0139); /* VREG1OUT voltage */
  42:	2012      	movs	r0, #18
  44:	f240 1139 	movw	r1, #313	; 0x139
  48:	f7ff fffe 	bl	0 <LCD_PowerOn>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:893
  _delay_(5);                  /* delay 50 ms */
  4c:	2005      	movs	r0, #5
  4e:	f7ff fffe 	bl	0 <LCD_PowerOn>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:894
  LCD_WriteReg(R19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
  52:	2013      	movs	r0, #19
  54:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
  58:	f7ff fffe 	bl	0 <LCD_PowerOn>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:895
  LCD_WriteReg(R41, 0x0013); /* VCM[4:0] for VCOMH */
  5c:	2113      	movs	r1, #19
  5e:	2029      	movs	r0, #41	; 0x29
  60:	f7ff fffe 	bl	0 <LCD_PowerOn>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:896
  _delay_(5);                  /* delay 50 ms */
  64:	2005      	movs	r0, #5
  66:	f7ff fffe 	bl	0 <LCD_PowerOn>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:897
  LCD_WriteReg(R7, 0x0173);  /* 262K color and display ON */
  6a:	2007      	movs	r0, #7
  6c:	f240 1173 	movw	r1, #371	; 0x173
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:898
}
  70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:897
  LCD_WriteReg(R18, 0x0139); /* VREG1OUT voltage */
  _delay_(5);                  /* delay 50 ms */
  LCD_WriteReg(R19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
  LCD_WriteReg(R41, 0x0013); /* VCM[4:0] for VCOMH */
  _delay_(5);                  /* delay 50 ms */
  LCD_WriteReg(R7, 0x0173);  /* 262K color and display ON */
  74:	f7ff bffe 	b.w	0 <LCD_PowerOn>

Disassembly of section .text.LCD_SetCursor:

00000000 <LCD_SetCursor>:
LCD_SetCursor():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:357
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position. 
  * @retval None
  */
void LCD_SetCursor(uint8_t Xpos, uint16_t Ypos)
{
   0:	4603      	mov	r3, r0
   2:	b510      	push	{r4, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:358
 LCD_WriteReg(R32, Xpos);
   4:	2020      	movs	r0, #32
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:357
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position. 
  * @retval None
  */
void LCD_SetCursor(uint8_t Xpos, uint16_t Ypos)
{
   6:	460c      	mov	r4, r1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:358
 LCD_WriteReg(R32, Xpos);
   8:	4619      	mov	r1, r3
   a:	f7ff fffe 	bl	0 <LCD_SetCursor>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:359
 LCD_WriteReg(R33, Ypos);
   e:	2021      	movs	r0, #33	; 0x21
  10:	4621      	mov	r1, r4
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:360
}
  12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:359
  * @retval None
  */
void LCD_SetCursor(uint8_t Xpos, uint16_t Ypos)
{
 LCD_WriteReg(R32, Xpos);
 LCD_WriteReg(R33, Ypos);
  16:	f7ff bffe 	b.w	0 <LCD_SetCursor>

Disassembly of section .text.LCD_SetDisplayWindow:

00000000 <LCD_SetDisplayWindow>:
LCD_SetDisplayWindow():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:454
  * @retval None
  */
void LCD_SetDisplayWindow(uint8_t Xpos, uint16_t Ypos, uint8_t Height, uint16_t Width)
{ 
  /* Horizontal GRAM Start Address */
  if(Xpos >= Height)
   0:	4290      	cmp	r0, r2
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:452
  * @param  Height: display window height.
  * @param  Width: display window width.
  * @retval None
  */
void LCD_SetDisplayWindow(uint8_t Xpos, uint16_t Ypos, uint8_t Height, uint16_t Width)
{ 
   2:	b570      	push	{r4, r5, r6, lr}
   4:	4605      	mov	r5, r0
   6:	460c      	mov	r4, r1
   8:	461e      	mov	r6, r3
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:454
  /* Horizontal GRAM Start Address */
  if(Xpos >= Height)
   a:	d304      	bcc.n	16 <LCD_SetDisplayWindow+0x16>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:456
  {
    LCD_WriteReg(R80, (Xpos - Height + 1));
   c:	1c43      	adds	r3, r0, #1
   e:	1a9a      	subs	r2, r3, r2
  10:	2050      	movs	r0, #80	; 0x50
  12:	b291      	uxth	r1, r2
  14:	e001      	b.n	1a <LCD_SetDisplayWindow+0x1a>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:460
  }
  else
  {
    LCD_WriteReg(R80, 0);
  16:	2050      	movs	r0, #80	; 0x50
  18:	2100      	movs	r1, #0
  1a:	f7ff fffe 	bl	0 <LCD_SetDisplayWindow>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:463
  }
  /* Horizontal GRAM End Address */
  LCD_WriteReg(R81, Xpos);
  1e:	2051      	movs	r0, #81	; 0x51
  20:	4629      	mov	r1, r5
  22:	f7ff fffe 	bl	0 <LCD_SetDisplayWindow>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:465
  /* Vertical GRAM Start Address */
  if(Ypos >= Width)
  26:	42b4      	cmp	r4, r6
  28:	d304      	bcc.n	34 <LCD_SetDisplayWindow+0x34>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:467
  {
    LCD_WriteReg(R82, (Ypos - Width + 1));
  2a:	1c63      	adds	r3, r4, #1
  2c:	1b9e      	subs	r6, r3, r6
  2e:	2052      	movs	r0, #82	; 0x52
  30:	b2b1      	uxth	r1, r6
  32:	e001      	b.n	38 <LCD_SetDisplayWindow+0x38>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:471
  }  
  else
  {
    LCD_WriteReg(R82, 0);
  34:	2052      	movs	r0, #82	; 0x52
  36:	2100      	movs	r1, #0
  38:	f7ff fffe 	bl	0 <LCD_SetDisplayWindow>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:474
  }
  /* Vertical GRAM End Address */
  LCD_WriteReg(R83, Ypos);
  3c:	2053      	movs	r0, #83	; 0x53
  3e:	4621      	mov	r1, r4
  40:	f7ff fffe 	bl	0 <LCD_SetDisplayWindow>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:475
  LCD_SetCursor(Xpos, Ypos);
  44:	4628      	mov	r0, r5
  46:	4621      	mov	r1, r4
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:476
}
  48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:475
  {
    LCD_WriteReg(R82, 0);
  }
  /* Vertical GRAM End Address */
  LCD_WriteReg(R83, Ypos);
  LCD_SetCursor(Xpos, Ypos);
  4c:	f7ff bffe 	b.w	0 <LCD_SetDisplayWindow>

Disassembly of section .text.LCD_WindowModeDisable:

00000000 <LCD_WindowModeDisable>:
LCD_WindowModeDisable():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:486
  * @param  None
  * @retval None
  */
void LCD_WindowModeDisable(void)
{
  LCD_SetDisplayWindow(239, 0x13F, 240, 320);
   0:	20ef      	movs	r0, #239	; 0xef
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:485
  * @brief  Disables LCD Window mode.
  * @param  None
  * @retval None
  */
void LCD_WindowModeDisable(void)
{
   2:	b510      	push	{r4, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:486
  LCD_SetDisplayWindow(239, 0x13F, 240, 320);
   4:	f240 113f 	movw	r1, #319	; 0x13f
   8:	22f0      	movs	r2, #240	; 0xf0
   a:	f44f 73a0 	mov.w	r3, #320	; 0x140
   e:	f7ff fffe 	bl	0 <LCD_WindowModeDisable>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:487
  LCD_WriteReg(R3, 0x1018);    
  12:	2003      	movs	r0, #3
  14:	f241 0118 	movw	r1, #4120	; 0x1018
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:488
}
  18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:487
  * @retval None
  */
void LCD_WindowModeDisable(void)
{
  LCD_SetDisplayWindow(239, 0x13F, 240, 320);
  LCD_WriteReg(R3, 0x1018);    
  1c:	f7ff bffe 	b.w	0 <LCD_WindowModeDisable>

Disassembly of section .text.LCD_WriteRAMWord:

00000000 <LCD_WriteRAMWord>:
LCD_WriteRAMWord():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:826
  * @brief  Writes 1 word to the LCD RAM.
  * @param  RGB_Code: the pixel color in RGB mode (5-6-5).
  * @retval None
  */
void LCD_WriteRAMWord(uint16_t RGB_Code)
{
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:827
  LCD_WriteRAM_Prepare();
   4:	f7ff fffe 	bl	0 <LCD_WriteRAMWord>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:828
  LCD_WriteRAM(RGB_Code);
   8:	4620      	mov	r0, r4
   a:	f7ff fffe 	bl	0 <LCD_WriteRAMWord>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:829
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
   e:	4804      	ldr	r0, [pc, #16]	; (20 <LCD_WriteRAMWord+0x20>)
  10:	f44f 7180 	mov.w	r1, #256	; 0x100
  14:	2201      	movs	r2, #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:830
}
  16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:829
  */
void LCD_WriteRAMWord(uint16_t RGB_Code)
{
  LCD_WriteRAM_Prepare();
  LCD_WriteRAM(RGB_Code);
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
  1a:	f7ff bffe 	b.w	0 <LCD_WriteRAMWord>
  1e:	bf00      	nop
  20:	40011000 	.word	0x40011000

Disassembly of section .text.LCD_DrawCircle:

00000000 <LCD_DrawCircle>:
LCD_DrawCircle():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:552
  * @param  Ypos: specifies the Y position.
  * @param  Radius
  * @retval None
  */
void LCD_DrawCircle(uint8_t Xpos, uint16_t Ypos, uint16_t Radius)
{
   0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:557
  int32_t  D;/* Decision Variable */ 
  uint32_t  CurX;/* Current X Value */
  uint32_t  CurY;/* Current Y Value */ 
  
  D = 3 - (Radius << 1);
   4:	ea4f 0942 	mov.w	r9, r2, lsl #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:552
  * @param  Ypos: specifies the Y position.
  * @param  Radius
  * @retval None
  */
void LCD_DrawCircle(uint8_t Xpos, uint16_t Ypos, uint16_t Radius)
{
   8:	b085      	sub	sp, #20
   a:	4604      	mov	r4, r0
   c:	460d      	mov	r5, r1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:557
  int32_t  D;/* Decision Variable */ 
  uint32_t  CurX;/* Current X Value */
  uint32_t  CurY;/* Current Y Value */ 
  
  D = 3 - (Radius << 1);
   e:	f1c9 0903 	rsb	r9, r9, #3
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:559
  CurX = 0;
  CurY = Radius;
  12:	4690      	mov	r8, r2
  14:	4682      	mov	sl, r0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:558
  int32_t  D;/* Decision Variable */ 
  uint32_t  CurX;/* Current X Value */
  uint32_t  CurY;/* Current Y Value */ 
  
  D = 3 - (Radius << 1);
  CurX = 0;
  16:	2700      	movs	r7, #0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:563
  CurY = Radius;
  
  while (CurX <= CurY)
  {
    LCD_SetCursor(Xpos + CurX, Ypos + CurY);
  18:	fa1f fb88 	uxth.w	fp, r8
  1c:	eb0b 0205 	add.w	r2, fp, r5
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:564
    LCD_WriteRAMWord(TextColor);
  20:	4e3f      	ldr	r6, [pc, #252]	; (120 <LCD_DrawCircle+0x120>)
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:563
  CurX = 0;
  CurY = Radius;
  
  while (CurX <= CurY)
  {
    LCD_SetCursor(Xpos + CurX, Ypos + CurY);
  22:	b292      	uxth	r2, r2
  24:	4611      	mov	r1, r2
  26:	4650      	mov	r0, sl
  28:	9201      	str	r2, [sp, #4]
  2a:	f7ff fffe 	bl	0 <LCD_DrawCircle>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:564
    LCD_WriteRAMWord(TextColor);
  2e:	8830      	ldrh	r0, [r6, #0]
  30:	b280      	uxth	r0, r0
  32:	f7ff fffe 	bl	0 <LCD_DrawCircle>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:565
    LCD_SetCursor(Xpos + CurX, Ypos - CurY);
  36:	ebcb 0305 	rsb	r3, fp, r5
  3a:	b29b      	uxth	r3, r3
  3c:	4619      	mov	r1, r3
  3e:	4650      	mov	r0, sl
  40:	9302      	str	r3, [sp, #8]
  42:	f7ff fffe 	bl	0 <LCD_DrawCircle>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:566
    LCD_WriteRAMWord(TextColor);
  46:	8830      	ldrh	r0, [r6, #0]
  48:	ebc7 0b04 	rsb	fp, r7, r4
  4c:	b280      	uxth	r0, r0
  4e:	f7ff fffe 	bl	0 <LCD_DrawCircle>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:567
    LCD_SetCursor(Xpos - CurX, Ypos + CurY);
  52:	9a01      	ldr	r2, [sp, #4]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:566
  while (CurX <= CurY)
  {
    LCD_SetCursor(Xpos + CurX, Ypos + CurY);
    LCD_WriteRAMWord(TextColor);
    LCD_SetCursor(Xpos + CurX, Ypos - CurY);
    LCD_WriteRAMWord(TextColor);
  54:	fa5f fb8b 	uxtb.w	fp, fp
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:567
    LCD_SetCursor(Xpos - CurX, Ypos + CurY);
  58:	4611      	mov	r1, r2
  5a:	4658      	mov	r0, fp
  5c:	f7ff fffe 	bl	0 <LCD_DrawCircle>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:568
    LCD_WriteRAMWord(TextColor);
  60:	8830      	ldrh	r0, [r6, #0]
  62:	b280      	uxth	r0, r0
  64:	f7ff fffe 	bl	0 <LCD_DrawCircle>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:569
    LCD_SetCursor(Xpos - CurX, Ypos - CurY);
  68:	9b02      	ldr	r3, [sp, #8]
  6a:	4658      	mov	r0, fp
  6c:	4619      	mov	r1, r3
  6e:	f7ff fffe 	bl	0 <LCD_DrawCircle>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:570
    LCD_WriteRAMWord(TextColor);
  72:	8830      	ldrh	r0, [r6, #0]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:551
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @param  Radius
  * @retval None
  */
void LCD_DrawCircle(uint8_t Xpos, uint16_t Ypos, uint16_t Radius)
  74:	fa1f fb87 	uxth.w	fp, r7
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:570
    LCD_SetCursor(Xpos + CurX, Ypos - CurY);
    LCD_WriteRAMWord(TextColor);
    LCD_SetCursor(Xpos - CurX, Ypos + CurY);
    LCD_WriteRAMWord(TextColor);
    LCD_SetCursor(Xpos - CurX, Ypos - CurY);
    LCD_WriteRAMWord(TextColor);
  78:	b280      	uxth	r0, r0
  7a:	f7ff fffe 	bl	0 <LCD_DrawCircle>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:571
    LCD_SetCursor(Xpos + CurY, Ypos + CurX);
  7e:	fa5f f288 	uxtb.w	r2, r8
  82:	1913      	adds	r3, r2, r4
  84:	b2db      	uxtb	r3, r3
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:551
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @param  Radius
  * @retval None
  */
void LCD_DrawCircle(uint8_t Xpos, uint16_t Ypos, uint16_t Radius)
  86:	eb0b 0105 	add.w	r1, fp, r5
  8a:	b289      	uxth	r1, r1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:571
    LCD_WriteRAMWord(TextColor);
    LCD_SetCursor(Xpos - CurX, Ypos + CurY);
    LCD_WriteRAMWord(TextColor);
    LCD_SetCursor(Xpos - CurX, Ypos - CurY);
    LCD_WriteRAMWord(TextColor);
    LCD_SetCursor(Xpos + CurY, Ypos + CurX);
  8c:	4618      	mov	r0, r3
  8e:	9201      	str	r2, [sp, #4]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:551
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @param  Radius
  * @retval None
  */
void LCD_DrawCircle(uint8_t Xpos, uint16_t Ypos, uint16_t Radius)
  90:	9103      	str	r1, [sp, #12]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:571
    LCD_WriteRAMWord(TextColor);
    LCD_SetCursor(Xpos - CurX, Ypos + CurY);
    LCD_WriteRAMWord(TextColor);
    LCD_SetCursor(Xpos - CurX, Ypos - CurY);
    LCD_WriteRAMWord(TextColor);
    LCD_SetCursor(Xpos + CurY, Ypos + CurX);
  92:	9302      	str	r3, [sp, #8]
  94:	f7ff fffe 	bl	0 <LCD_DrawCircle>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:572
    LCD_WriteRAMWord(TextColor);
  98:	8830      	ldrh	r0, [r6, #0]
  9a:	ebcb 0b05 	rsb	fp, fp, r5
  9e:	b280      	uxth	r0, r0
  a0:	f7ff fffe 	bl	0 <LCD_DrawCircle>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:573
    LCD_SetCursor(Xpos + CurY, Ypos - CurX);
  a4:	9b02      	ldr	r3, [sp, #8]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:572
    LCD_SetCursor(Xpos - CurX, Ypos + CurY);
    LCD_WriteRAMWord(TextColor);
    LCD_SetCursor(Xpos - CurX, Ypos - CurY);
    LCD_WriteRAMWord(TextColor);
    LCD_SetCursor(Xpos + CurY, Ypos + CurX);
    LCD_WriteRAMWord(TextColor);
  a6:	fa1f fc8b 	uxth.w	ip, fp
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:573
    LCD_SetCursor(Xpos + CurY, Ypos - CurX);
  aa:	4618      	mov	r0, r3
  ac:	4661      	mov	r1, ip
  ae:	f8cd c008 	str.w	ip, [sp, #8]
  b2:	f7ff fffe 	bl	0 <LCD_DrawCircle>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:574
    LCD_WriteRAMWord(TextColor);
  b6:	8830      	ldrh	r0, [r6, #0]
  b8:	b280      	uxth	r0, r0
  ba:	f7ff fffe 	bl	0 <LCD_DrawCircle>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:575
    LCD_SetCursor(Xpos - CurY, Ypos + CurX);
  be:	9a01      	ldr	r2, [sp, #4]
  c0:	9903      	ldr	r1, [sp, #12]
  c2:	1aa2      	subs	r2, r4, r2
  c4:	fa5f fb82 	uxtb.w	fp, r2
  c8:	4658      	mov	r0, fp
  ca:	f7ff fffe 	bl	0 <LCD_DrawCircle>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:576
    LCD_WriteRAMWord(TextColor);
  ce:	8830      	ldrh	r0, [r6, #0]
  d0:	b280      	uxth	r0, r0
  d2:	f7ff fffe 	bl	0 <LCD_DrawCircle>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:577
    LCD_SetCursor(Xpos - CurY, Ypos - CurX);
  d6:	f8dd c008 	ldr.w	ip, [sp, #8]
  da:	4658      	mov	r0, fp
  dc:	4661      	mov	r1, ip
  de:	f7ff fffe 	bl	0 <LCD_DrawCircle>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:578
    LCD_WriteRAMWord(TextColor);
  e2:	8830      	ldrh	r0, [r6, #0]
  e4:	b280      	uxth	r0, r0
  e6:	f7ff fffe 	bl	0 <LCD_DrawCircle>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:579
    if (D < 0)
  ea:	f1b9 0f00 	cmp.w	r9, #0
  ee:	da04      	bge.n	fa <LCD_DrawCircle+0xfa>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:581
    { 
      D += (CurX << 2) + 6;
  f0:	eb09 0987 	add.w	r9, r9, r7, lsl #2
  f4:	f109 0906 	add.w	r9, r9, #6
  f8:	e007      	b.n	10a <LCD_DrawCircle+0x10a>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:585
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
  fa:	ebc8 0307 	rsb	r3, r8, r7
  fe:	f109 090a 	add.w	r9, r9, #10
 102:	eb09 0983 	add.w	r9, r9, r3, lsl #2
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:586
      CurY--;
 106:	f108 38ff 	add.w	r8, r8, #4294967295
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:588
    }
    CurX++;
 10a:	3701      	adds	r7, #1
 10c:	f10a 0a01 	add.w	sl, sl, #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:561
  
  D = 3 - (Radius << 1);
  CurX = 0;
  CurY = Radius;
  
  while (CurX <= CurY)
 110:	4547      	cmp	r7, r8
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:588
    else
    {
      D += ((CurX - CurY) << 2) + 10;
      CurY--;
    }
    CurX++;
 112:	fa5f fa8a 	uxtb.w	sl, sl
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:561
  
  D = 3 - (Radius << 1);
  CurX = 0;
  CurY = Radius;
  
  while (CurX <= CurY)
 116:	f67f af7f 	bls.w	18 <LCD_DrawCircle+0x18>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:590
      D += ((CurX - CurY) << 2) + 10;
      CurY--;
    }
    CurX++;
  }
}
 11a:	b005      	add	sp, #20
 11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 120:	00000000 	.word	0x00000000

Disassembly of section .text.LCD_ReadReg:

00000000 <LCD_ReadReg>:
LCD_ReadReg():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:754
  * @brief  Reads the selected LCD Register.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t LCD_ReadReg(uint8_t LCD_Reg)
{
   0:	4a31b510 	.word	0x4a31b510
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:765
  LCD_SPI->CR1 |= 0x0008;
  /* Write 16-bit Index (then Read Reg) */
  LCD_WriteRegIndex(LCD_Reg);
  /* Read 16-bit Reg */
  /* Reset LCD control line(/CS) and Send Start-Byte */
  LCD_nCS_StartByte(START_BYTE | LCD_READ_REG);
   4:	2405      	movs	r4, #5
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:759
{
  uint16_t tmp = 0;
  uint8_t i = 0;
  
  /* LCD_SPI prescaler: 4 */
  LCD_SPI->CR1 &= 0xFFC7;
   6:	8813      	ldrh	r3, [r2, #0]
   8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
   c:	041b      	lsls	r3, r3, #16
   e:	0c1b      	lsrs	r3, r3, #16
  10:	8013      	strh	r3, [r2, #0]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:760
  LCD_SPI->CR1 |= 0x0008;
  12:	8813      	ldrh	r3, [r2, #0]
  14:	b29b      	uxth	r3, r3
  16:	f043 0308 	orr.w	r3, r3, #8
  1a:	8013      	strh	r3, [r2, #0]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:762
  /* Write 16-bit Index (then Read Reg) */
  LCD_WriteRegIndex(LCD_Reg);
  1c:	f7ff fffe 	bl	0 <LCD_ReadReg>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:765
  /* Read 16-bit Reg */
  /* Reset LCD control line(/CS) and Send Start-Byte */
  LCD_nCS_StartByte(START_BYTE | LCD_READ_REG);
  20:	2073      	movs	r0, #115	; 0x73
  22:	f7ff fffe 	bl	0 <LCD_ReadReg>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:769
  
  for(i = 0; i < 5; i++)
  {
    SPI_I2S_SendData(LCD_SPI, 0xFF);
  26:	4828      	ldr	r0, [pc, #160]	; (c8 <LCD_ReadReg+0xc8>)
  28:	21ff      	movs	r1, #255	; 0xff
  2a:	f7ff fffe 	bl	0 <SPI_I2S_SendData>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:770
    while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET)
  2e:	4826      	ldr	r0, [pc, #152]	; (c8 <LCD_ReadReg+0xc8>)
  30:	2180      	movs	r1, #128	; 0x80
  32:	f7ff fffe 	bl	0 <SPI_I2S_GetFlagStatus>
  36:	2800      	cmp	r0, #0
  38:	d1f9      	bne.n	2e <LCD_ReadReg+0x2e>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:774
    {
    }
    /* One byte of invalid dummy data read after the start byte */
    while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_RXNE) == RESET)
  3a:	4823      	ldr	r0, [pc, #140]	; (c8 <LCD_ReadReg+0xc8>)
  3c:	2101      	movs	r1, #1
  3e:	f7ff fffe 	bl	0 <SPI_I2S_GetFlagStatus>
  42:	2800      	cmp	r0, #0
  44:	d0f9      	beq.n	3a <LCD_ReadReg+0x3a>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:777
    {    
    }
    SPI_I2S_ReceiveData(LCD_SPI); 
  46:	3c01      	subs	r4, #1
  48:	481f      	ldr	r0, [pc, #124]	; (c8 <LCD_ReadReg+0xc8>)
  4a:	b2e4      	uxtb	r4, r4
  4c:	f7ff fffe 	bl	0 <SPI_I2S_ReceiveData>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:767
  LCD_WriteRegIndex(LCD_Reg);
  /* Read 16-bit Reg */
  /* Reset LCD control line(/CS) and Send Start-Byte */
  LCD_nCS_StartByte(START_BYTE | LCD_READ_REG);
  
  for(i = 0; i < 5; i++)
  50:	2c00      	cmp	r4, #0
  52:	d1e8      	bne.n	26 <LCD_ReadReg+0x26>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:779
    while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_RXNE) == RESET)
    {    
    }
    SPI_I2S_ReceiveData(LCD_SPI); 
  }
  SPI_I2S_SendData(LCD_SPI, 0xFF);
  54:	481c      	ldr	r0, [pc, #112]	; (c8 <LCD_ReadReg+0xc8>)
  56:	21ff      	movs	r1, #255	; 0xff
  58:	f7ff fffe 	bl	0 <SPI_I2S_SendData>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:781
  /* Read upper byte */
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET)
  5c:	481a      	ldr	r0, [pc, #104]	; (c8 <LCD_ReadReg+0xc8>)
  5e:	2180      	movs	r1, #128	; 0x80
  60:	f7ff fffe 	bl	0 <SPI_I2S_GetFlagStatus>
  64:	2800      	cmp	r0, #0
  66:	d1f9      	bne.n	5c <LCD_ReadReg+0x5c>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:785
  {
  }
  /* Read lower byte */
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_RXNE) == RESET)
  68:	4817      	ldr	r0, [pc, #92]	; (c8 <LCD_ReadReg+0xc8>)
  6a:	2101      	movs	r1, #1
  6c:	f7ff fffe 	bl	0 <SPI_I2S_GetFlagStatus>
  70:	2800      	cmp	r0, #0
  72:	d0f9      	beq.n	68 <LCD_ReadReg+0x68>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:788
  {
  }
  tmp = SPI_I2S_ReceiveData(LCD_SPI);
  74:	4814      	ldr	r0, [pc, #80]	; (c8 <LCD_ReadReg+0xc8>)
  76:	f7ff fffe 	bl	0 <SPI_I2S_ReceiveData>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:791
  
  
  SPI_I2S_SendData(LCD_SPI, 0xFF);
  7a:	21ff      	movs	r1, #255	; 0xff
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:788
  }
  /* Read lower byte */
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_RXNE) == RESET)
  {
  }
  tmp = SPI_I2S_ReceiveData(LCD_SPI);
  7c:	4604      	mov	r4, r0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:791
  
  
  SPI_I2S_SendData(LCD_SPI, 0xFF);
  7e:	4812      	ldr	r0, [pc, #72]	; (c8 <LCD_ReadReg+0xc8>)
  80:	f7ff fffe 	bl	0 <SPI_I2S_SendData>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:792
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET)
  84:	4810      	ldr	r0, [pc, #64]	; (c8 <LCD_ReadReg+0xc8>)
  86:	2180      	movs	r1, #128	; 0x80
  88:	f7ff fffe 	bl	0 <SPI_I2S_GetFlagStatus>
  8c:	2800      	cmp	r0, #0
  8e:	d1f9      	bne.n	84 <LCD_ReadReg+0x84>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:796
  {
  }
  /* Read lower byte */
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_RXNE) == RESET)
  90:	480d      	ldr	r0, [pc, #52]	; (c8 <LCD_ReadReg+0xc8>)
  92:	2101      	movs	r1, #1
  94:	f7ff fffe 	bl	0 <SPI_I2S_GetFlagStatus>
  98:	2800      	cmp	r0, #0
  9a:	d0f9      	beq.n	90 <LCD_ReadReg+0x90>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:799
  {
  }
  tmp = ((tmp & 0xFF) << 8) | SPI_I2S_ReceiveData(LCD_SPI);
  9c:	480a      	ldr	r0, [pc, #40]	; (c8 <LCD_ReadReg+0xc8>)
  9e:	f7ff fffe 	bl	0 <SPI_I2S_ReceiveData>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:800
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
  a2:	2201      	movs	r2, #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:799
  }
  /* Read lower byte */
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_RXNE) == RESET)
  {
  }
  tmp = ((tmp & 0xFF) << 8) | SPI_I2S_ReceiveData(LCD_SPI);
  a4:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:800
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
  a8:	f44f 7180 	mov.w	r1, #256	; 0x100
  ac:	4807      	ldr	r0, [pc, #28]	; (20 <LCD_ReadReg+0x20>)
  ae:	f7ff fffe 	bl	0 <LCD_ReadReg>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:802
  /* LCD_SPI prescaler: 2 */
  LCD_SPI->CR1 &= 0xFFC7;
  b2:	4a05      	ldr	r2, [pc, #20]	; (c8 <LCD_ReadReg+0xc8>)
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:799
  }
  /* Read lower byte */
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_RXNE) == RESET)
  {
  }
  tmp = ((tmp & 0xFF) << 8) | SPI_I2S_ReceiveData(LCD_SPI);
  b4:	b2a4      	uxth	r4, r4
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:802
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
  /* LCD_SPI prescaler: 2 */
  LCD_SPI->CR1 &= 0xFFC7;
  b6:	8813      	ldrh	r3, [r2, #0]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:804
  return tmp;
}
  b8:	4620      	mov	r0, r4
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:802
  {
  }
  tmp = ((tmp & 0xFF) << 8) | SPI_I2S_ReceiveData(LCD_SPI);
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
  /* LCD_SPI prescaler: 2 */
  LCD_SPI->CR1 &= 0xFFC7;
  ba:	f023 0338 	bic.w	r3, r3, #56	; 0x38
  be:	041b      	lsls	r3, r3, #16
  c0:	0c1b      	lsrs	r3, r3, #16
  c2:	8013      	strh	r3, [r2, #0]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:804
  return tmp;
}
  c4:	bd10      	pop	{r4, pc}
  c6:	bf00      	nop
  c8:	40003c00 	.word	0x40003c00
  cc:	40011000 	.word	0x40011000

Disassembly of section .text.LCD_DrawMonoPict:

00000000 <LCD_DrawMonoPict>:
LCD_DrawMonoPict():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:598
  * @brief  Displays a monocolor picture.
  * @param  Pict: pointer to the picture array.
  * @retval None
  */
void LCD_DrawMonoPict(const uint32_t *Pict)
{
   0:	f240b570 	.word	0xf240b570
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:600
  uint32_t index = 0, i = 0;
  LCD_SetCursor(0, 319); 
   4:	113f      	asrs	r7, r7, #4
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:598
  * @brief  Displays a monocolor picture.
  * @param  Pict: pointer to the picture array.
  * @retval None
  */
void LCD_DrawMonoPict(const uint32_t *Pict)
{
   6:	4604      	mov	r4, r0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:600
  uint32_t index = 0, i = 0;
  LCD_SetCursor(0, 319); 
   8:	2000      	movs	r0, #0
   a:	f7ff fffe 	bl	0 <LCD_DrawMonoPict>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:601
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
   e:	2500      	movs	r5, #0
  10:	f7ff fffe 	bl	0 <LCD_DrawMonoPict>
  14:	e011      	b.n	3a <LCD_DrawMonoPict+0x3a>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:606
  for(index = 0; index < 2400; index++)
  {
    for(i = 0; i < 32; i++)
    {
      if((Pict[index] & (1 << i)) == 0x00)
  16:	2201      	movs	r2, #1
  18:	40b2      	lsls	r2, r6
  1a:	5963      	ldr	r3, [r4, r5]
  1c:	421a      	tst	r2, r3
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:608
      {
        LCD_WriteRAM(BackColor);
  1e:	bf0c      	ite	eq
  20:	4b0b      	ldreq	r3, [pc, #44]	; (50 <LCD_DrawMonoPict+0x50>)
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:612
      }
      else
      {
        LCD_WriteRAM(TextColor);
  22:	4b0c      	ldrne	r3, [pc, #48]	; (54 <LCD_DrawMonoPict+0x54>)
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:604
  uint32_t index = 0, i = 0;
  LCD_SetCursor(0, 319); 
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
  for(index = 0; index < 2400; index++)
  {
    for(i = 0; i < 32; i++)
  24:	3601      	adds	r6, #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:612
      {
        LCD_WriteRAM(BackColor);
      }
      else
      {
        LCD_WriteRAM(TextColor);
  26:	8818      	ldrh	r0, [r3, #0]
  28:	b280      	uxth	r0, r0
  2a:	f7ff fffe 	bl	0 <LCD_DrawMonoPict>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:604
  uint32_t index = 0, i = 0;
  LCD_SetCursor(0, 319); 
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
  for(index = 0; index < 2400; index++)
  {
    for(i = 0; i < 32; i++)
  2e:	2e20      	cmp	r6, #32
  30:	d1f1      	bne.n	16 <LCD_DrawMonoPict+0x16>
  32:	3504      	adds	r5, #4
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:602
void LCD_DrawMonoPict(const uint32_t *Pict)
{
  uint32_t index = 0, i = 0;
  LCD_SetCursor(0, 319); 
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
  for(index = 0; index < 2400; index++)
  34:	f5b5 5f16 	cmp.w	r5, #9600	; 0x2580
  38:	d001      	beq.n	3e <LCD_DrawMonoPict+0x3e>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:598
  * @brief  Displays a monocolor picture.
  * @param  Pict: pointer to the picture array.
  * @retval None
  */
void LCD_DrawMonoPict(const uint32_t *Pict)
{
  3a:	2600      	movs	r6, #0
  3c:	e7eb      	b.n	16 <LCD_DrawMonoPict+0x16>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:616
      {
        LCD_WriteRAM(TextColor);
      }
    }
  }
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
  3e:	4806      	ldr	r0, [pc, #24]	; (58 <LCD_DrawMonoPict+0x58>)
  40:	f44f 7180 	mov.w	r1, #256	; 0x100
  44:	2201      	movs	r2, #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:617
}
  46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:616
      {
        LCD_WriteRAM(TextColor);
      }
    }
  }
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
  4a:	f7ff bffe 	b.w	0 <LCD_DrawMonoPict>
  4e:	bf00      	nop
	...
  58:	40011000 	.word	0x40011000

Disassembly of section .text.LCD_DrawLine:

00000000 <LCD_DrawLine>:
LCD_DrawLine():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:501
  * @param  Direction: line direction.
  *   This parameter can be one of the following values: Vertical or Horizontal.
  * @retval None
  */
void LCD_DrawLine(uint8_t Xpos, uint16_t Ypos, uint16_t Length, uint8_t Direction)
{
   0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4:	461f      	mov	r7, r3
   6:	4604      	mov	r4, r0
   8:	460d      	mov	r5, r1
   a:	4616      	mov	r6, r2
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:504
  uint32_t i = 0;
  
  LCD_SetCursor(Xpos, Ypos);
   c:	f7ff fffe 	bl	0 <LCD_DrawLine>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:505
  if(Direction == Horizontal)
  10:	b10f      	cbz	r7, 16 <LCD_DrawLine+0x16>
  12:	2700      	movs	r7, #0
  14:	e01e      	b.n	54 <LCD_DrawLine+0x54>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:507
  { 
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
  16:	f7ff fffe 	bl	0 <LCD_DrawLine>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:508
    for(i = 0; i < Length; i++)
  1a:	e005      	b.n	28 <LCD_DrawLine+0x28>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:510
    {
      LCD_WriteRAM(TextColor);
  1c:	4b0f      	ldr	r3, [pc, #60]	; (5c <LCD_DrawLine+0x5c>)
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:508
  
  LCD_SetCursor(Xpos, Ypos);
  if(Direction == Horizontal)
  { 
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    for(i = 0; i < Length; i++)
  1e:	3701      	adds	r7, #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:510
    {
      LCD_WriteRAM(TextColor);
  20:	8818      	ldrh	r0, [r3, #0]
  22:	b280      	uxth	r0, r0
  24:	f7ff fffe 	bl	0 <LCD_DrawLine>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:508
  
  LCD_SetCursor(Xpos, Ypos);
  if(Direction == Horizontal)
  { 
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    for(i = 0; i < Length; i++)
  28:	42b7      	cmp	r7, r6
  2a:	d3f7      	bcc.n	1c <LCD_DrawLine+0x1c>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:512
    {
      LCD_WriteRAM(TextColor);
    }
    LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
  2c:	480c      	ldr	r0, [pc, #48]	; (60 <LCD_DrawLine+0x60>)
  2e:	f44f 7180 	mov.w	r1, #256	; 0x100
  32:	2201      	movs	r2, #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:523
      LCD_WriteRAMWord(TextColor);
      Xpos++;
      LCD_SetCursor(Xpos, Ypos);
    }
  }
}
  34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:512
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    for(i = 0; i < Length; i++)
    {
      LCD_WriteRAM(TextColor);
    }
    LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
  38:	f7ff bffe 	b.w	0 <LCD_DrawLine>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:518
  }
  else
  {
    for(i = 0; i < Length; i++)
    {
      LCD_WriteRAMWord(TextColor);
  3c:	4b07      	ldr	r3, [pc, #28]	; (5c <LCD_DrawLine+0x5c>)
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:519
      Xpos++;
  3e:	3401      	adds	r4, #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:518
  }
  else
  {
    for(i = 0; i < Length; i++)
    {
      LCD_WriteRAMWord(TextColor);
  40:	8818      	ldrh	r0, [r3, #0]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:519
      Xpos++;
  42:	b2e4      	uxtb	r4, r4
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:518
  }
  else
  {
    for(i = 0; i < Length; i++)
    {
      LCD_WriteRAMWord(TextColor);
  44:	b280      	uxth	r0, r0
  46:	f7ff fffe 	bl	0 <LCD_DrawLine>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:520
      Xpos++;
      LCD_SetCursor(Xpos, Ypos);
  4a:	4620      	mov	r0, r4
  4c:	4629      	mov	r1, r5
  4e:	f7ff fffe 	bl	0 <LCD_DrawLine>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:516
    }
    LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
  }
  else
  {
    for(i = 0; i < Length; i++)
  52:	3701      	adds	r7, #1
  54:	42b7      	cmp	r7, r6
  56:	d3f1      	bcc.n	3c <LCD_DrawLine+0x3c>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:523
      LCD_WriteRAMWord(TextColor);
      Xpos++;
      LCD_SetCursor(Xpos, Ypos);
    }
  }
}
  58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  5c:	00000000 	.word	0x00000000
  60:	40011000 	.word	0x40011000

Disassembly of section .text.LCD_DrawRect:

00000000 <LCD_DrawRect>:
LCD_DrawRect():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:535
  * @param  Height: display rectangle height.
  * @param  Width: display rectangle width.
  * @retval None
  */
void LCD_DrawRect(uint8_t Xpos, uint16_t Ypos, uint8_t Height, uint16_t Width)
{
   0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4:	4605      	mov	r5, r0
   6:	4614      	mov	r4, r2
   8:	461e      	mov	r6, r3
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:536
  LCD_DrawLine(Xpos, Ypos, Width, Horizontal);
   a:	461a      	mov	r2, r3
   c:	2300      	movs	r3, #0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:535
  * @param  Height: display rectangle height.
  * @param  Width: display rectangle width.
  * @retval None
  */
void LCD_DrawRect(uint8_t Xpos, uint16_t Ypos, uint8_t Height, uint16_t Width)
{
   e:	460f      	mov	r7, r1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:536
  LCD_DrawLine(Xpos, Ypos, Width, Horizontal);
  10:	f7ff fffe 	bl	0 <LCD_DrawRect>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:537
  LCD_DrawLine((Xpos + Height), Ypos, Width, Horizontal);
  14:	1960      	adds	r0, r4, r5
  16:	4639      	mov	r1, r7
  18:	4632      	mov	r2, r6
  1a:	2300      	movs	r3, #0
  1c:	b2c0      	uxtb	r0, r0
  1e:	f7ff fffe 	bl	0 <LCD_DrawRect>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:539
  
  LCD_DrawLine(Xpos, Ypos, Height, Vertical);
  22:	4628      	mov	r0, r5
  24:	4639      	mov	r1, r7
  26:	4622      	mov	r2, r4
  28:	2301      	movs	r3, #1
  2a:	f7ff fffe 	bl	0 <LCD_DrawRect>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:540
  LCD_DrawLine(Xpos, (Ypos - Width + 1), Height, Vertical);
  2e:	3701      	adds	r7, #1
  30:	1bbe      	subs	r6, r7, r6
  32:	4628      	mov	r0, r5
  34:	b2b1      	uxth	r1, r6
  36:	4622      	mov	r2, r4
  38:	2301      	movs	r3, #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:541
}
  3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:540
{
  LCD_DrawLine(Xpos, Ypos, Width, Horizontal);
  LCD_DrawLine((Xpos + Height), Ypos, Width, Horizontal);
  
  LCD_DrawLine(Xpos, Ypos, Height, Vertical);
  LCD_DrawLine(Xpos, (Ypos - Width + 1), Height, Vertical);
  3e:	f7ff bffe 	b.w	0 <LCD_DrawRect>

Disassembly of section .text.LCD_DrawChar:

00000000 <LCD_DrawChar>:
LCD_DrawChar():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:371
  * @param  Ypos: start column address.
  * @param  c: pointer to the character data.
  * @retval None
  */
void LCD_DrawChar(uint8_t Xpos, uint16_t Ypos, const uint16_t *c)
{
   0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4:	4605      	mov	r5, r0
   6:	460f      	mov	r7, r1
   8:	4616      	mov	r6, r2
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:377
  uint32_t index = 0, i = 0;
  uint8_t Xaddress = 0;
   
  Xaddress = Xpos;
  
  LCD_SetCursor(Xaddress, Ypos);
   a:	f7ff fffe 	bl	0 <LCD_DrawChar>
   e:	2400      	movs	r4, #0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:381
  
  for(index = 0; index < 24; index++)
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
  10:	f7ff fffe 	bl	0 <LCD_DrawChar>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:382
    for(i = 0; i < 16; i++)
  14:	f04f 0800 	mov.w	r8, #0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:384
    {
      if((c[index] & (1 << i)) == 0x00)
  18:	5b33      	ldrh	r3, [r6, r4]
  1a:	fa43 f308 	asr.w	r3, r3, r8
  1e:	f013 0f01 	tst.w	r3, #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:386
      {
        LCD_WriteRAM(BackColor);
  22:	bf0c      	ite	eq
  24:	4b0d      	ldreq	r3, [pc, #52]	; (5c <LCD_DrawChar+0x5c>)
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:390
      }
      else
      {
        LCD_WriteRAM(TextColor);
  26:	4b0e      	ldrne	r3, [pc, #56]	; (60 <LCD_DrawChar+0x60>)
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:382
  LCD_SetCursor(Xaddress, Ypos);
  
  for(index = 0; index < 24; index++)
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    for(i = 0; i < 16; i++)
  28:	f108 0801 	add.w	r8, r8, #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:390
      {
        LCD_WriteRAM(BackColor);
      }
      else
      {
        LCD_WriteRAM(TextColor);
  2c:	8818      	ldrh	r0, [r3, #0]
  2e:	b280      	uxth	r0, r0
  30:	f7ff fffe 	bl	0 <LCD_DrawChar>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:382
  LCD_SetCursor(Xaddress, Ypos);
  
  for(index = 0; index < 24; index++)
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    for(i = 0; i < 16; i++)
  34:	f1b8 0f10 	cmp.w	r8, #16
  38:	d1ee      	bne.n	18 <LCD_DrawChar+0x18>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:394
      {
        LCD_WriteRAM(TextColor);
      }
    }   
    LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET); 
    Xaddress++;
  3a:	3501      	adds	r5, #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:393
      else
      {
        LCD_WriteRAM(TextColor);
      }
    }   
    LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET); 
  3c:	2201      	movs	r2, #1
  3e:	4809      	ldr	r0, [pc, #36]	; (64 <LCD_DrawChar+0x64>)
  40:	f44f 7180 	mov.w	r1, #256	; 0x100
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:394
    Xaddress++;
  44:	b2ed      	uxtb	r5, r5
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:393
      else
      {
        LCD_WriteRAM(TextColor);
      }
    }   
    LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET); 
  46:	f7ff fffe 	bl	0 <LCD_DrawChar>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:395
    Xaddress++;
    LCD_SetCursor(Xaddress, Ypos);
  4a:	3402      	adds	r4, #2
  4c:	4628      	mov	r0, r5
  4e:	4639      	mov	r1, r7
  50:	f7ff fffe 	bl	0 <LCD_DrawChar>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:379
   
  Xaddress = Xpos;
  
  LCD_SetCursor(Xaddress, Ypos);
  
  for(index = 0; index < 24; index++)
  54:	2c30      	cmp	r4, #48	; 0x30
  56:	d1db      	bne.n	10 <LCD_DrawChar+0x10>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:397
    }   
    LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET); 
    Xaddress++;
    LCD_SetCursor(Xaddress, Ypos);
  }
}
  58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...
  64:	40011000 	.word	0x40011000

Disassembly of section .text.LCD_DisplayChar:

00000000 <LCD_DisplayChar>:
LCD_DisplayChar():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:411
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void LCD_DisplayChar(uint8_t Line, uint16_t Column, uint8_t Ascii)
{
  Ascii -= 32;
   0:	4b053a20 	.word	0x4b053a20
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:410
  * @param  Column: start column address.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void LCD_DisplayChar(uint8_t Line, uint16_t Column, uint8_t Ascii)
{
   4:	b510      	push	{r4, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:412
  Ascii -= 32;
  LCD_DrawChar(Line, Column, &ASCII_Table[Ascii * 24]);
   6:	b2d2      	uxtb	r2, r2
   8:	2430      	movs	r4, #48	; 0x30
   a:	fb04 3202 	mla	r2, r4, r2, r3
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:413
}
   e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:412
  * @retval None
  */
void LCD_DisplayChar(uint8_t Line, uint16_t Column, uint8_t Ascii)
{
  Ascii -= 32;
  LCD_DrawChar(Line, Column, &ASCII_Table[Ascii * 24]);
  12:	f7ff bffe 	b.w	0 <LCD_DisplayChar>
  16:	bf00      	nop
  18:	00000000 	.word	0x00000000

Disassembly of section .text.LCD_DisplayStringLine:

00000000 <LCD_DisplayStringLine>:
LCD_DisplayStringLine():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:425
  *     @arg Linex: where x can be 0..9
  * @param  *ptr: pointer to string to display on LCD.
  * @retval None
  */
void LCD_DisplayStringLine(uint8_t Line, uint8_t *ptr)
{
   0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2:	4607      	mov	r7, r0
   4:	460e      	mov	r6, r1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:427
  uint32_t i = 0;
  uint16_t refcolumn = 319;
   6:	f240 153f 	movw	r5, #319	; 0x13f
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:426
  * @param  *ptr: pointer to string to display on LCD.
  * @retval None
  */
void LCD_DisplayStringLine(uint8_t Line, uint8_t *ptr)
{
  uint32_t i = 0;
   a:	2400      	movs	r4, #0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:429
  uint16_t refcolumn = 319;
  /* Send the string character by character on lCD */
  while ((*ptr != 0) & (i < 20))
   c:	e006      	b.n	1c <LCD_DisplayStringLine+0x1c>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:432
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, *ptr);
   e:	4629      	mov	r1, r5
  10:	4638      	mov	r0, r7
  12:	f7ff fffe 	bl	0 <LCD_DisplayStringLine>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:434
    /* Decrement the column position by 16 */
    refcolumn -= 16;
  16:	3d10      	subs	r5, #16
  18:	b2ad      	uxth	r5, r5
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:438
    /* Point on the next character */
    ptr++;
    /* Increment the character counter */
    i++;
  1a:	3401      	adds	r4, #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:429
void LCD_DisplayStringLine(uint8_t Line, uint8_t *ptr)
{
  uint32_t i = 0;
  uint16_t refcolumn = 319;
  /* Send the string character by character on lCD */
  while ((*ptr != 0) & (i < 20))
  1c:	2c13      	cmp	r4, #19
  1e:	5d32      	ldrb	r2, [r6, r4]
  20:	d801      	bhi.n	26 <LCD_DisplayStringLine+0x26>
  22:	2a00      	cmp	r2, #0
  24:	d1f3      	bne.n	e <LCD_DisplayStringLine+0xe>
  26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section .text.LCD_ClearLine:

00000000 <LCD_ClearLine>:
LCD_ClearLine():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:326
  *     @arg Linex: where x can be 0..9
  * @retval None
  */
void LCD_ClearLine(uint8_t Line)
{
  LCD_DisplayStringLine(Line, "                    ");
   0:	4901      	ldr	r1, [pc, #4]	; (8 <LCD_ClearLine+0x8>)
   2:	f7ff bffe 	b.w	0 <LCD_ClearLine>
   6:	bf00      	nop
   8:	00000000 	.word	0x00000000

Disassembly of section .text.LCD_Clear:

00000000 <LCD_Clear>:
LCD_Clear():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:336
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background.
  * @retval None
  */
void LCD_Clear(uint16_t Color)
{
   0:	b570      	push	{r4, r5, r6, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:339
  uint32_t index = 0;
  
  LCD_SetCursor(0x00, 0x013F); 
   2:	f240 113f 	movw	r1, #319	; 0x13f
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:336
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background.
  * @retval None
  */
void LCD_Clear(uint16_t Color)
{
   6:	4604      	mov	r4, r0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:339
  uint32_t index = 0;
  
  LCD_SetCursor(0x00, 0x013F); 
   8:	2000      	movs	r0, #0
   a:	f7ff fffe 	bl	0 <LCD_Clear>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:340
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
   e:	f7ff fffe 	bl	0 <LCD_Clear>
  12:	f44f 3596 	mov.w	r5, #76800	; 0x12c00
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:343
  for(index = 0; index < 76800; index++)
  {
    LCD_WriteRAM(Color);
  16:	4620      	mov	r0, r4
  18:	f7ff fffe 	bl	0 <LCD_Clear>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:341
{
  uint32_t index = 0;
  
  LCD_SetCursor(0x00, 0x013F); 
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
  for(index = 0; index < 76800; index++)
  1c:	3d01      	subs	r5, #1
  1e:	d1fa      	bne.n	16 <LCD_Clear+0x16>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:345
  {
    LCD_WriteRAM(Color);
  }
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET); 
  20:	4803      	ldr	r0, [pc, #12]	; (30 <LCD_Clear+0x30>)
  22:	f44f 7180 	mov.w	r1, #256	; 0x100
  26:	2201      	movs	r2, #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:347
  
}
  28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:345
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
  for(index = 0; index < 76800; index++)
  {
    LCD_WriteRAM(Color);
  }
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET); 
  2c:	f7ff bffe 	b.w	0 <LCD_Clear>
  30:	40011000 	.word	0x40011000

Disassembly of section .text.LCD_SPIConfig:

00000000 <LCD_SPIConfig>:
LCD_SPIConfig():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:972
  * @brief  Configures the LCD_SPI interface.
  * @param  None
  * @retval None
  */
void LCD_SPIConfig(void)
{
   0:	b510      	push	{r4, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:977
  SPI_InitTypeDef    SPI_InitStructure;
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable GPIO clock */
  RCC_APB2PeriphClockCmd(LCD_SPI_GPIO_CLK | RCC_APB2Periph_AFIO, ENABLE);
   2:	2011      	movs	r0, #17
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:972
  * @brief  Configures the LCD_SPI interface.
  * @param  None
  * @retval None
  */
void LCD_SPIConfig(void)
{
   4:	b086      	sub	sp, #24
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:977
  SPI_InitTypeDef    SPI_InitStructure;
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable GPIO clock */
  RCC_APB2PeriphClockCmd(LCD_SPI_GPIO_CLK | RCC_APB2Periph_AFIO, ENABLE);
   6:	2101      	movs	r1, #1
   8:	f7ff fffe 	bl	0 <RCC_APB2PeriphClockCmd>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:978
  GPIO_PinRemapConfig(GPIO_Remap_SPI3, ENABLE);
   c:	2101      	movs	r1, #1
   e:	481d      	ldr	r0, [pc, #116]	; (84 <LCD_SPIConfig+0x84>)
  10:	f7ff fffe 	bl	0 <GPIO_PinRemapConfig>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:981

  /* Enable SPI clock  */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);
  14:	2101      	movs	r1, #1
  16:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  1a:	f7ff fffe 	bl	0 <RCC_APB1PeriphClockCmd>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:985
  
  /* Configure SPI pins: SCK, MISO and MOSI */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN | LCD_SPI_MISO_PIN | LCD_SPI_MOSI_PIN;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  1e:	2303      	movs	r3, #3
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:984

  /* Enable SPI clock  */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);
  
  /* Configure SPI pins: SCK, MISO and MOSI */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN | LCD_SPI_MISO_PIN | LCD_SPI_MOSI_PIN;
  20:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:987
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(LCD_SPI_GPIO_PORT, &GPIO_InitStructure);
  24:	a905      	add	r1, sp, #20
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:985
  /* Enable SPI clock  */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);
  
  /* Configure SPI pins: SCK, MISO and MOSI */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN | LCD_SPI_MISO_PIN | LCD_SPI_MOSI_PIN;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  26:	f88d 3016 	strb.w	r3, [sp, #22]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:987
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(LCD_SPI_GPIO_PORT, &GPIO_InitStructure);
  2a:	4817      	ldr	r0, [pc, #92]	; (88 <LCD_SPIConfig+0x88>)
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:986
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);
  
  /* Configure SPI pins: SCK, MISO and MOSI */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN | LCD_SPI_MISO_PIN | LCD_SPI_MOSI_PIN;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  2c:	3315      	adds	r3, #21
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:984

  /* Enable SPI clock  */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);
  
  /* Configure SPI pins: SCK, MISO and MOSI */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN | LCD_SPI_MISO_PIN | LCD_SPI_MOSI_PIN;
  2e:	f8ad 2014 	strh.w	r2, [sp, #20]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:986
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  32:	f88d 3017 	strb.w	r3, [sp, #23]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:987
  GPIO_Init(LCD_SPI_GPIO_PORT, &GPIO_InitStructure);
  36:	f7ff fffe 	bl	0 <GPIO_Init>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:989
  
  SPI_I2S_DeInit(LCD_SPI);
  3a:	4814      	ldr	r0, [pc, #80]	; (54 <SPI_I2S_DeInit+0x54>)
  3c:	f7ff fffe 	bl	0 <SPI_I2S_DeInit>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:993
  
  /* SPI Config */
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
  40:	f44f 7282 	mov.w	r2, #260	; 0x104
  44:	f8ad 2002 	strh.w	r2, [sp, #2]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:995
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
  48:	2202      	movs	r2, #2
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:992
  GPIO_Init(LCD_SPI_GPIO_PORT, &GPIO_InitStructure);
  
  SPI_I2S_DeInit(LCD_SPI);
  
  /* SPI Config */
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
  4a:	2300      	movs	r3, #0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:995
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
  4c:	f8ad 2006 	strh.w	r2, [sp, #6]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:996
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
  50:	2401      	movs	r4, #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:997
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
  52:	f44f 7200 	mov.w	r2, #512	; 0x200
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1000
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
  SPI_Init(LCD_SPI, &SPI_InitStructure);
  56:	4669      	mov	r1, sp
  58:	480c      	ldr	r0, [pc, #48]	; (8c <LCD_SPIConfig+0x8c>)
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:992
  GPIO_Init(LCD_SPI_GPIO_PORT, &GPIO_InitStructure);
  
  SPI_I2S_DeInit(LCD_SPI);
  
  /* SPI Config */
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
  5a:	f8ad 3000 	strh.w	r3, [sp]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:994
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
  5e:	f8ad 3004 	strh.w	r3, [sp, #4]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:996
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
  62:	f8ad 4008 	strh.w	r4, [sp, #8]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:997
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
  66:	f8ad 200a 	strh.w	r2, [sp, #10]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:998
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
  6a:	f8ad 300c 	strh.w	r3, [sp, #12]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:999
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
  6e:	f8ad 300e 	strh.w	r3, [sp, #14]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1000
  SPI_Init(LCD_SPI, &SPI_InitStructure);
  72:	f7ff fffe 	bl	0 <SPI_Init>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1003

  /* SPI enable */
  SPI_Cmd(LCD_SPI, ENABLE);
  76:	4805      	ldr	r0, [pc, #20]	; (8c <LCD_SPIConfig+0x8c>)
  78:	4621      	mov	r1, r4
  7a:	f7ff fffe 	bl	0 <SPI_Cmd>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1004
}
  7e:	b006      	add	sp, #24
  80:	bd10      	pop	{r4, pc}
  82:	bf00      	nop
  84:	00201000 	.word	0x00201000
  88:	40011000 	.word	0x40011000
  8c:	40003c00 	.word	0x40003c00

Disassembly of section .text.LCD_Setup:

00000000 <LCD_Setup>:
LCD_Setup():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:197
  //LCD_WriteReg(R7, 0x0173); /* 262K color and display ON */
// }


void LCD_Setup(void)
{ 
   0:	b510      	push	{r4, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:199
/* Configure the LCD Control pins --------------------------------------------*/
  LCD_CtrlLinesConfig();
   2:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:202
  
/* Configure the LCD_SPI interface ----------------------------------------------*/
  LCD_SPIConfig();
   6:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:203
  _delay_(5); /* Delay 50 ms */
   a:	2005      	movs	r0, #5
   c:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:205
  /* Start Initial Sequence ------------------------------------------------*/
  LCD_WriteReg(R229, 0x8000); /* Set the internal vcore voltage */
  10:	20e5      	movs	r0, #229	; 0xe5
  12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  16:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:206
  LCD_WriteReg(R0,  0x0001); /* Start internal OSC. */
  1a:	2000      	movs	r0, #0
  1c:	2101      	movs	r1, #1
  1e:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:207
  LCD_WriteReg(R1,  0x0100); /* set SS and SM bit */
  22:	2001      	movs	r0, #1
  24:	f44f 7180 	mov.w	r1, #256	; 0x100
  28:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:208
  LCD_WriteReg(R2,  0x0700); /* set 1 line inversion */
  2c:	2002      	movs	r0, #2
  2e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  32:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:209
  LCD_WriteReg(R3,  0x1030); /* set GRAM write direction and BGR=1. */
  36:	2003      	movs	r0, #3
  38:	f241 0130 	movw	r1, #4144	; 0x1030
  3c:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:210
  LCD_WriteReg(R4,  0x0000); /* Resize register */
  40:	2004      	movs	r0, #4
  42:	2100      	movs	r1, #0
  44:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:211
  LCD_WriteReg(R8,  0x0202); /* set the back porch and front porch */
  48:	2008      	movs	r0, #8
  4a:	f240 2102 	movw	r1, #514	; 0x202
  4e:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:212
  LCD_WriteReg(R9,  0x0000); /* set non-display area refresh cycle ISC[3:0] */
  52:	2009      	movs	r0, #9
  54:	2100      	movs	r1, #0
  56:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:213
  LCD_WriteReg(R10, 0x0000); /* FMARK function */
  5a:	200a      	movs	r0, #10
  5c:	2100      	movs	r1, #0
  5e:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:214
  LCD_WriteReg(R12, 0x0000); /* RGB interface setting */
  62:	200c      	movs	r0, #12
  64:	2100      	movs	r1, #0
  66:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:215
  LCD_WriteReg(R13, 0x0000); /* Frame marker Position */
  6a:	200d      	movs	r0, #13
  6c:	2100      	movs	r1, #0
  6e:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:216
  LCD_WriteReg(R15, 0x0000); /* RGB interface polarity */
  72:	200f      	movs	r0, #15
  74:	2100      	movs	r1, #0
  76:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:218
  /* Power On sequence -----------------------------------------------------*/
  LCD_WriteReg(R16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
  7a:	2010      	movs	r0, #16
  7c:	2100      	movs	r1, #0
  7e:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:219
  LCD_WriteReg(R17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
  82:	2011      	movs	r0, #17
  84:	2100      	movs	r1, #0
  86:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:220
  LCD_WriteReg(R18, 0x0000); /* VREG1OUT voltage */
  8a:	2012      	movs	r0, #18
  8c:	2100      	movs	r1, #0
  8e:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:221
  LCD_WriteReg(R19, 0x0000); /* VDV[4:0] for VCOM amplitude */
  92:	2100      	movs	r1, #0
  94:	2013      	movs	r0, #19
  96:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:222
  _delay_(20);                 /* Dis-charge capacitor power voltage (200ms) */
  9a:	2014      	movs	r0, #20
  9c:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:223
  LCD_WriteReg(R16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
  a0:	2010      	movs	r0, #16
  a2:	f241 71b0 	movw	r1, #6064	; 0x17b0
  a6:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:224
  LCD_WriteReg(R17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
  aa:	2011      	movs	r0, #17
  ac:	f240 1137 	movw	r1, #311	; 0x137
  b0:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:225
  _delay_(5);                  /* Delay 50 ms */
  b4:	2005      	movs	r0, #5
  b6:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:226
  LCD_WriteReg(R18, 0x0139); /* VREG1OUT voltage */
  ba:	2012      	movs	r0, #18
  bc:	f240 1139 	movw	r1, #313	; 0x139
  c0:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:227
  _delay_(5);                  /* Delay 50 ms */
  c4:	2005      	movs	r0, #5
  c6:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:228
  LCD_WriteReg(R19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
  ca:	2013      	movs	r0, #19
  cc:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
  d0:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:229
  LCD_WriteReg(R41, 0x0013); /* VCM[4:0] for VCOMH */
  d4:	2113      	movs	r1, #19
  d6:	2029      	movs	r0, #41	; 0x29
  d8:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:230
  _delay_(5);                  /* Delay 50 ms */
  dc:	2005      	movs	r0, #5
  de:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:231
  LCD_WriteReg(R32, 0x0000); /* GRAM horizontal Address */
  e2:	2020      	movs	r0, #32
  e4:	2100      	movs	r1, #0
  e6:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:232
  LCD_WriteReg(R33, 0x0000); /* GRAM Vertical Address */
  ea:	2021      	movs	r0, #33	; 0x21
  ec:	2100      	movs	r1, #0
  ee:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:234
  /* Adjust the Gamma Curve ------------------------------------------------*/
  LCD_WriteReg(R48, 0x0006);
  f2:	2030      	movs	r0, #48	; 0x30
  f4:	2106      	movs	r1, #6
  f6:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:235
  LCD_WriteReg(R49, 0x0101);
  fa:	2031      	movs	r0, #49	; 0x31
  fc:	f240 1101 	movw	r1, #257	; 0x101
 100:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:236
  LCD_WriteReg(R50, 0x0003);
 104:	2032      	movs	r0, #50	; 0x32
 106:	2103      	movs	r1, #3
 108:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:237
  LCD_WriteReg(R53, 0x0106);
 10c:	2035      	movs	r0, #53	; 0x35
 10e:	f44f 7183 	mov.w	r1, #262	; 0x106
 112:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:238
  LCD_WriteReg(R54, 0x0b02);
 116:	2036      	movs	r0, #54	; 0x36
 118:	f640 3102 	movw	r1, #2818	; 0xb02
 11c:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:239
  LCD_WriteReg(R55, 0x0302);
 120:	2037      	movs	r0, #55	; 0x37
 122:	f240 3102 	movw	r1, #770	; 0x302
 126:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:240
  LCD_WriteReg(R56, 0x0707);
 12a:	2038      	movs	r0, #56	; 0x38
 12c:	f240 7107 	movw	r1, #1799	; 0x707
 130:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:241
  LCD_WriteReg(R57, 0x0007);
 134:	2039      	movs	r0, #57	; 0x39
 136:	2107      	movs	r1, #7
 138:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:242
  LCD_WriteReg(R60, 0x0600);
 13c:	203c      	movs	r0, #60	; 0x3c
 13e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 142:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:243
  LCD_WriteReg(R61, 0x020b);
 146:	203d      	movs	r0, #61	; 0x3d
 148:	f240 210b 	movw	r1, #523	; 0x20b
 14c:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:252
  // LCD_WriteReg(R81, 0x00EF); /* (240-1) Horizontal GRAM End Address */
  // LCD_WriteReg(R82, 0x0000); /* Vertical GRAM Start Address */
  // LCD_WriteReg(R83, 0x013F); /* (320-1) Vertical GRAM End Address */
  
  /* Set GRAM area ---------------------------------------------------------*/
  LCD_WriteReg(R80, 0x0000); /* Horizontal GRAM Start Address */
 150:	2050      	movs	r0, #80	; 0x50
 152:	2100      	movs	r1, #0
 154:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:253
  LCD_WriteReg(R81, 0x00EF); /* Horizontal GRAM End Address */
 158:	2051      	movs	r0, #81	; 0x51
 15a:	21ef      	movs	r1, #239	; 0xef
 15c:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:254
  LCD_WriteReg(R82, 0x0000); /* Vertical GRAM Start Address */
 160:	2052      	movs	r0, #82	; 0x52
 162:	2100      	movs	r1, #0
 164:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:255
  LCD_WriteReg(R83, 0x013F); /* Vertical GRAM End Address */
 168:	2053      	movs	r0, #83	; 0x53
 16a:	f240 113f 	movw	r1, #319	; 0x13f
 16e:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:256
  LCD_WriteReg(R96,  0xA700); /* Gate Scan Line */
 172:	2060      	movs	r0, #96	; 0x60
 174:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 178:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:257
  LCD_WriteReg(R97,  0x0001); /* NDL,VLE, REV */
 17c:	2061      	movs	r0, #97	; 0x61
 17e:	2101      	movs	r1, #1
 180:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:258
  LCD_WriteReg(R106, 0x0000); /* set scrolling line */
 184:	206a      	movs	r0, #106	; 0x6a
 186:	2100      	movs	r1, #0
 188:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:260
  /* Partial Display Control -----------------------------------------------*/
  LCD_WriteReg(R128, 0x0000);
 18c:	2080      	movs	r0, #128	; 0x80
 18e:	2100      	movs	r1, #0
 190:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:261
  LCD_WriteReg(R129, 0x0000);
 194:	2081      	movs	r0, #129	; 0x81
 196:	2100      	movs	r1, #0
 198:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:262
  LCD_WriteReg(R130, 0x0000);
 19c:	2082      	movs	r0, #130	; 0x82
 19e:	2100      	movs	r1, #0
 1a0:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:263
  LCD_WriteReg(R131, 0x0000);
 1a4:	2083      	movs	r0, #131	; 0x83
 1a6:	2100      	movs	r1, #0
 1a8:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:264
  LCD_WriteReg(R132, 0x0000);
 1ac:	2084      	movs	r0, #132	; 0x84
 1ae:	2100      	movs	r1, #0
 1b0:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:265
  LCD_WriteReg(R133, 0x0000);
 1b4:	2100      	movs	r1, #0
 1b6:	2085      	movs	r0, #133	; 0x85
 1b8:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:267
  /* Panel Control ---------------------------------------------------------*/
  LCD_WriteReg(R144, 0x0010);
 1bc:	2090      	movs	r0, #144	; 0x90
 1be:	2110      	movs	r1, #16
 1c0:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:268
  LCD_WriteReg(R146, 0x0000);
 1c4:	2092      	movs	r0, #146	; 0x92
 1c6:	2100      	movs	r1, #0
 1c8:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:269
  LCD_WriteReg(R147, 0x0003);
 1cc:	2093      	movs	r0, #147	; 0x93
 1ce:	2103      	movs	r1, #3
 1d0:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:270
  LCD_WriteReg(R149, 0x0110);
 1d4:	2095      	movs	r0, #149	; 0x95
 1d6:	f44f 7188 	mov.w	r1, #272	; 0x110
 1da:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:271
  LCD_WriteReg(R151, 0x0000);
 1de:	2097      	movs	r0, #151	; 0x97
 1e0:	2100      	movs	r1, #0
 1e2:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:272
  LCD_WriteReg(R152, 0x0000);
 1e6:	2098      	movs	r0, #152	; 0x98
 1e8:	2100      	movs	r1, #0
 1ea:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:276
  /* Set GRAM write direction and BGR = 1 */
  /* I/D=01 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  LCD_WriteReg(R3, 0x1018);
 1ee:	2003      	movs	r0, #3
 1f0:	f241 0118 	movw	r1, #4120	; 0x1018
 1f4:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:277
  LCD_WriteReg(R7, 0x0173); /* 262K color and display ON */
 1f8:	2007      	movs	r0, #7
 1fa:	f240 1173 	movw	r1, #371	; 0x173
 1fe:	f7ff fffe 	bl	0 <LCD_Setup>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:279

  LCD_CtrlLinesWrite(LCD_BL_GPIO_PORT, LCD_BL_PIN, Bit_SET);
 202:	4803      	ldr	r0, [pc, #12]	; (210 <LCD_Setup+0x210>)
 204:	2180      	movs	r1, #128	; 0x80
 206:	2201      	movs	r2, #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:280
}
 208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:279
  /* I/D=01 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  LCD_WriteReg(R3, 0x1018);
  LCD_WriteReg(R7, 0x0173); /* 262K color and display ON */

  LCD_CtrlLinesWrite(LCD_BL_GPIO_PORT, LCD_BL_PIN, Bit_SET);
 20c:	f7ff bffe 	b.w	0 <LCD_Setup>
 210:	40011400 	.word	0x40011400

Disassembly of section .text.STM3210C_LCD_Init:

00000000 <STM3210C_LCD_Init>:
STM3210C_LCD_Init():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:291
  * @retval None
  */
void STM3210C_LCD_Init(void)
{
  /* Setups the LCD */
  LCD_Setup();
   0:	f7ff bffe 	b.w	0 <STM3210C_LCD_Init>

Disassembly of section .text.ET_STM32_TCS_Config:

00000000 <ET_STM32_TCS_Config>:
ET_STM32_TCS_Config():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1013
  * @brief  Configures the Touch Sensor interface.
  * @param  None
  * @retval None
  */
void ET_STM32_TCS_Config(void)
{
   0:	b537      	push	{r0, r1, r2, r4, r5, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1017
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIO clock */
  RCC_APB2PeriphClockCmd(TCS_GPIO_CLK, ENABLE);
   2:	2040      	movs	r0, #64	; 0x40
   4:	2101      	movs	r1, #1
   6:	f7ff fffe 	bl	0 <RCC_APB2PeriphClockCmd>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1021

  /* Configure CS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = TCS_CS_PIN;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   a:	2503      	movs	r5, #3
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1022
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   c:	2410      	movs	r4, #16
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1020

  /* Enable GPIO clock */
  RCC_APB2PeriphClockCmd(TCS_GPIO_CLK, ENABLE);

  /* Configure CS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = TCS_CS_PIN;
   e:	2340      	movs	r3, #64	; 0x40
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1023
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(TCS_GPIO_PORT, &GPIO_InitStructure);  
  10:	a901      	add	r1, sp, #4
  12:	481a      	ldr	r0, [pc, #104]	; (7c <ET_STM32_TCS_Config+0x7c>)
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1020

  /* Enable GPIO clock */
  RCC_APB2PeriphClockCmd(TCS_GPIO_CLK, ENABLE);

  /* Configure CS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = TCS_CS_PIN;
  14:	f8ad 3004 	strh.w	r3, [sp, #4]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1021
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  18:	f88d 5006 	strb.w	r5, [sp, #6]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1022
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  1c:	f88d 4007 	strb.w	r4, [sp, #7]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1023
  GPIO_Init(TCS_GPIO_PORT, &GPIO_InitStructure);  
  20:	f7ff fffe 	bl	0 <GPIO_Init>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1026

  /* Configure MOSI in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = TCS_MOSI_PIN;
  24:	2320      	movs	r3, #32
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1029
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(TCS_GPIO_PORT, &GPIO_InitStructure);
  26:	a901      	add	r1, sp, #4
  28:	4814      	ldr	r0, [pc, #80]	; (7c <ET_STM32_TCS_Config+0x7c>)
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1026
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(TCS_GPIO_PORT, &GPIO_InitStructure);  

  /* Configure MOSI in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = TCS_MOSI_PIN;
  2a:	f8ad 3004 	strh.w	r3, [sp, #4]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1027
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  2e:	f88d 5006 	strb.w	r5, [sp, #6]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1028
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  32:	f88d 4007 	strb.w	r4, [sp, #7]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1029
  GPIO_Init(TCS_GPIO_PORT, &GPIO_InitStructure);
  36:	f7ff fffe 	bl	0 <GPIO_Init>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1032

  /* Configure SCK in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = TCS_SCK_PIN;
  3a:	2380      	movs	r3, #128	; 0x80
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1033
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  3c:	f88d 5006 	strb.w	r5, [sp, #6]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1035
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(TCS_GPIO_PORT, &GPIO_InitStructure);
  40:	a901      	add	r1, sp, #4
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1039

  /* Configure PEN as input floating */
  GPIO_InitStructure.GPIO_Pin = TCS_PEN_PIN;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  42:	3501      	adds	r5, #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1035

  /* Configure SCK in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = TCS_SCK_PIN;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(TCS_GPIO_PORT, &GPIO_InitStructure);
  44:	480d      	ldr	r0, [pc, #52]	; (7c <ET_STM32_TCS_Config+0x7c>)
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1032
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(TCS_GPIO_PORT, &GPIO_InitStructure);

  /* Configure SCK in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = TCS_SCK_PIN;
  46:	f8ad 3004 	strh.w	r3, [sp, #4]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1034
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  4a:	f88d 4007 	strb.w	r4, [sp, #7]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1035
  GPIO_Init(TCS_GPIO_PORT, &GPIO_InitStructure);
  4e:	f7ff fffe 	bl	0 <GPIO_Init>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1038

  /* Configure PEN as input floating */
  GPIO_InitStructure.GPIO_Pin = TCS_PEN_PIN;
  52:	2308      	movs	r3, #8
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1040
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(TCS_GPIO_PORT, &GPIO_InitStructure);  
  54:	eb0d 0105 	add.w	r1, sp, r5
  58:	4808      	ldr	r0, [pc, #32]	; (7c <ET_STM32_TCS_Config+0x7c>)
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1038
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(TCS_GPIO_PORT, &GPIO_InitStructure);

  /* Configure PEN as input floating */
  GPIO_InitStructure.GPIO_Pin = TCS_PEN_PIN;
  5a:	f8ad 3004 	strh.w	r3, [sp, #4]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1039
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  5e:	f88d 5007 	strb.w	r5, [sp, #7]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1040
  GPIO_Init(TCS_GPIO_PORT, &GPIO_InitStructure);  
  62:	f7ff fffe 	bl	0 <GPIO_Init>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1045

  /* Configure MISO as input floating */
  GPIO_InitStructure.GPIO_Pin = TCS_MISO_PIN;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(TCS_GPIO_PORT, &GPIO_InitStructure); 
  66:	4805      	ldr	r0, [pc, #20]	; (7c <ET_STM32_TCS_Config+0x7c>)
  68:	eb0d 0105 	add.w	r1, sp, r5
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1043
  GPIO_InitStructure.GPIO_Pin = TCS_PEN_PIN;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(TCS_GPIO_PORT, &GPIO_InitStructure);  

  /* Configure MISO as input floating */
  GPIO_InitStructure.GPIO_Pin = TCS_MISO_PIN;
  6c:	f8ad 4004 	strh.w	r4, [sp, #4]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1044
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  70:	f88d 5007 	strb.w	r5, [sp, #7]
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1045
  GPIO_Init(TCS_GPIO_PORT, &GPIO_InitStructure); 
  74:	f7ff fffe 	bl	0 <GPIO_Init>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1046
}
  78:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
  7a:	bf00      	nop
  7c:	40011800 	.word	0x40011800

Disassembly of section .text.TCS_SPI_Write_Byte:

00000000 <TCS_SPI_Write_Byte>:
TCS_SPI_Write_Byte():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1054
  * @brief  Writes to Touch Sensor register.
  * @param  TCS_Data : address of the selected register.
  * @retval None
  */
unsigned char TCS_SPI_Write_Byte(unsigned char DataByte)
{
   0:	4606b570 	.word	0x4606b570
   4:	2508      	movs	r5, #8
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1055
  unsigned char Bit,result = 0 ;				 	   
   6:	2400      	movs	r4, #0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1059

  for (Bit = 0; Bit < 8; Bit++)              // 8 Bit Write
  {		
    GPIO_WriteBit(TCS_GPIO_PORT, TCS_SCK_PIN, Bit_SET); // Start Clock  High
   8:	2180      	movs	r1, #128	; 0x80
   a:	2201      	movs	r2, #1
   c:	4812      	ldr	r0, [pc, #72]	; (58 <TCS_SPI_Write_Byte+0x58>)
   e:	f7ff fffe 	bl	0 <GPIO_WriteBit>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1062

		//--------- write Data ---------
		if((DataByte & 0x80)== 0x80)
  12:	f016 0f80 	tst.w	r6, #128	; 0x80
  16:	d003      	beq.n	20 <TCS_SPI_Write_Byte+0x20>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1063
		   GPIO_WriteBit(TCS_GPIO_PORT, TCS_MOSI_PIN, Bit_SET); // Set bit data = 1
  18:	480f      	ldr	r0, [pc, #60]	; (58 <TCS_SPI_Write_Byte+0x58>)
  1a:	2120      	movs	r1, #32
  1c:	2201      	movs	r2, #1
  1e:	e002      	b.n	26 <TCS_SPI_Write_Byte+0x26>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1065
		else
		   GPIO_WriteBit(TCS_GPIO_PORT, TCS_MOSI_PIN, Bit_RESET);  // Clear bit data = 0
  20:	480d      	ldr	r0, [pc, #52]	; (58 <TCS_SPI_Write_Byte+0x58>)
  22:	2120      	movs	r1, #32
  24:	2200      	movs	r2, #0
  26:	f7ff fffe 	bl	0 <GPIO_WriteBit>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1067
		   	
		GPIO_WriteBit(TCS_GPIO_PORT, TCS_SCK_PIN, Bit_RESET);    // Clock low
  2a:	2180      	movs	r1, #128	; 0x80
  2c:	2200      	movs	r2, #0
  2e:	480a      	ldr	r0, [pc, #40]	; (58 <TCS_SPI_Write_Byte+0x58>)
  30:	f7ff fffe 	bl	0 <GPIO_WriteBit>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1074
		DataByte <<= 1;	 // Shift Next Bit Data
      
	  	//---------- Read Data -------
	    result <<= 1;	
	 											  	  
		if (GPIO_ReadInputDataBit(TCS_GPIO_PORT,TCS_MISO_PIN) == Bit_SET)
  34:	2110      	movs	r1, #16
  36:	4808      	ldr	r0, [pc, #32]	; (58 <TCS_SPI_Write_Byte+0x58>)
  38:	f7ff fffe 	bl	0 <GPIO_ReadInputDataBit>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1072
		GPIO_WriteBit(TCS_GPIO_PORT, TCS_SCK_PIN, Bit_RESET);    // Clock low

		DataByte <<= 1;	 // Shift Next Bit Data
      
	  	//---------- Read Data -------
	    result <<= 1;	
  3c:	0064      	lsls	r4, r4, #1
  3e:	b2e4      	uxtb	r4, r4
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1074
	 											  	  
		if (GPIO_ReadInputDataBit(TCS_GPIO_PORT,TCS_MISO_PIN) == Bit_SET)
  40:	2801      	cmp	r0, #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1076
        {
		  result |= 0x01;
  42:	bf08      	it	eq
  44:	f044 0401 	orreq.w	r4, r4, #1
  48:	3d01      	subs	r5, #1
  4a:	b2ed      	uxtb	r5, r5
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1057
  */
unsigned char TCS_SPI_Write_Byte(unsigned char DataByte)
{
  unsigned char Bit,result = 0 ;				 	   

  for (Bit = 0; Bit < 8; Bit++)              // 8 Bit Write
  4c:	b115      	cbz	r5, 54 <TCS_SPI_Write_Byte+0x54>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1069
		else
		   GPIO_WriteBit(TCS_GPIO_PORT, TCS_MOSI_PIN, Bit_RESET);  // Clear bit data = 0
		   	
		GPIO_WriteBit(TCS_GPIO_PORT, TCS_SCK_PIN, Bit_RESET);    // Clock low

		DataByte <<= 1;	 // Shift Next Bit Data
  4e:	0076      	lsls	r6, r6, #1
  50:	b2f6      	uxtb	r6, r6
  52:	e7d9      	b.n	8 <TCS_SPI_Write_Byte+0x8>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1082
		}

	  }

	  return (result);                    
}
  54:	4620      	mov	r0, r4
  56:	bd70      	pop	{r4, r5, r6, pc}
  58:	40011800 	.word	0x40011800

Disassembly of section .text.TCS_Read_X:

00000000 <TCS_Read_X>:
TCS_Read_X():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1113
  * @brief  Return Touch Screen X position value
  * @param  None
  * @retval X position.
  */
uint16_t TCS_Read_X(void)
{
   0:	b538      	push	{r3, r4, r5, lr}
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1119
  int32_t x, xr;

  long tcs_adc_X ,tcs_adc_Y;
  unsigned char buf_data[4]={0,0,0,0};

  if (GPIO_ReadInputDataBit(TCS_GPIO_PORT,TCS_PEN_PIN) == Bit_RESET)
   2:	481c      	ldr	r0, [pc, #112]	; (74 <TCS_Read_X+0x74>)
   4:	2108      	movs	r1, #8
   6:	f7ff fffe 	bl	0 <GPIO_ReadInputDataBit>
   a:	4604      	mov	r4, r0
   c:	bb18      	cbnz	r0, 56 <TCS_Read_X+0x56>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1121
  {
    GPIO_WriteBit(TCS_GPIO_PORT, TCS_CS_PIN, Bit_RESET);							// Enable Touch Interface
   e:	4622      	mov	r2, r4
  10:	2140      	movs	r1, #64	; 0x40
  12:	4818      	ldr	r0, [pc, #96]	; (74 <TCS_Read_X+0x74>)
  14:	f7ff fffe 	bl	0 <GPIO_WriteBit>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1123
	
    buf_data[0] = TCS_SPI_Write_Byte(0xD0);											// Write Command Measure X-Position 
  18:	20d0      	movs	r0, #208	; 0xd0
  1a:	f7ff fffe 	bl	0 <TCS_Read_X>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1124
	buf_data[0] = TCS_SPI_Write_Byte(0x00);											// Read ADC data X-Position (7-bit byte High) data: 0ddddddd	(bit) 
  1e:	4620      	mov	r0, r4
  20:	f7ff fffe 	bl	0 <TCS_Read_X>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1125
	buf_data[1] = TCS_SPI_Write_Byte(0x90);											// Write Command Measure Y-Position ; Read ADC data X-Position (5-bit byte Low)  data:ddddd000(bit)
  24:	2090      	movs	r0, #144	; 0x90
  26:	f7ff fffe 	bl	0 <TCS_Read_X>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1126
	buf_data[2] = TCS_SPI_Write_Byte(0x00);											// Read ADC data Y-Position(7-bit byte High) data: 0ddddddd (bit)
  2a:	4620      	mov	r0, r4
  2c:	f7ff fffe 	bl	0 <TCS_Read_X>
  30:	4605      	mov	r5, r0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1127
	buf_data[3] = TCS_SPI_Write_Byte(0x00);											// Read ADC data Y-Position(5-bit byte Low)  data: ddddd000 (bit)
  32:	4620      	mov	r0, r4
  34:	f7ff fffe 	bl	0 <TCS_Read_X>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1136
	tcs_adc_X |= buf_data[1] >> 3;
	tcs_adc_X  = tcs_adc_X & 0x00000FFF;
	 
	tcs_adc_Y  = buf_data[2];   													// Mark ADC Data Y-Position 12 bit
	tcs_adc_Y  = tcs_adc_Y << 5;   													// Shift 7 bit High
	tcs_adc_Y |= buf_data[3] >> 3;   												// Shift 5 bit low
  38:	08c4      	lsrs	r4, r0, #3
  3a:	b2e4      	uxtb	r4, r4
  3c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1137
	tcs_adc_Y  = tcs_adc_Y & 0x00000FFF;											// total ADC data 12 bit
  40:	0524      	lsls	r4, r4, #20
  42:	0d24      	lsrs	r4, r4, #20
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1139
	
	GPIO_WriteBit(TCS_GPIO_PORT, TCS_CS_PIN, Bit_SET);								// Disable Touch Interface			
  44:	480b      	ldr	r0, [pc, #44]	; (74 <TCS_Read_X+0x74>)
  46:	2140      	movs	r1, #64	; 0x40
  48:	2201      	movs	r2, #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1141
	
    x = 4095-tcs_adc_Y;  															// ADC 12 bit :LCD Start Landscape	
  4a:	f5c4 647e 	rsb	r4, r4, #4064	; 0xfe0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1139
	tcs_adc_Y  = buf_data[2];   													// Mark ADC Data Y-Position 12 bit
	tcs_adc_Y  = tcs_adc_Y << 5;   													// Shift 7 bit High
	tcs_adc_Y |= buf_data[3] >> 3;   												// Shift 5 bit low
	tcs_adc_Y  = tcs_adc_Y & 0x00000FFF;											// total ADC data 12 bit
	
	GPIO_WriteBit(TCS_GPIO_PORT, TCS_CS_PIN, Bit_SET);								// Disable Touch Interface			
  4e:	f7ff fffe 	bl	0 <GPIO_WriteBit>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1141
	
    x = 4095-tcs_adc_Y;  															// ADC 12 bit :LCD Start Landscape	
  52:	341f      	adds	r4, #31
  54:	e000      	b.n	58 <TCS_Read_X+0x58>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1145
  }
  else
  {
    x = 0;
  56:	2400      	movs	r4, #0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1149
  }
  
  /* first correction */
  xr =  (x * 320) >> 12;
  58:	f44f 70a0 	mov.w	r0, #320	; 0x140
  5c:	4360      	muls	r0, r4
  5e:	1300      	asrs	r0, r0, #12
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1152
 
  /* second correction */
  xr = ((xr * 32)/29) - 17;
  60:	0140      	lsls	r0, r0, #5
  62:	231d      	movs	r3, #29
  64:	fb90 f0f3 	sdiv	r0, r0, r3
  68:	3811      	subs	r0, #17
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1159
  if(xr <= 0)
  {
    xr = 0;
  }

  return (uint16_t)(xr); 
  6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1160
}
  6e:	b280      	uxth	r0, r0
  70:	bd38      	pop	{r3, r4, r5, pc}
  72:	bf00      	nop
  74:	40011800 	.word	0x40011800

Disassembly of section .text.TCS_Read_Y:

00000000 <TCS_Read_Y>:
TCS_Read_Y():
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1188
  * @brief  Return Touch Screen Y position value
  * @param  None
  * @retval Y position.
  */
uint16_t TCS_Read_Y(void)
{
   0:	481bb570 	.word	0x481bb570
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1196
  //long dif_adc_X,dif_adc_Y;

  long tcs_adc_X ,tcs_adc_Y;
  unsigned char buf_data[4]={0,0,0,0};

  if (GPIO_ReadInputDataBit(TCS_GPIO_PORT,TCS_PEN_PIN) == Bit_RESET)
   4:	2108      	movs	r1, #8
   6:	f7ff fffe 	bl	0 <GPIO_ReadInputDataBit>
   a:	4604      	mov	r4, r0
   c:	bb08      	cbnz	r0, 52 <TCS_Read_Y+0x52>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1198
  {    
    GPIO_WriteBit(TCS_GPIO_PORT, TCS_CS_PIN, Bit_RESET);									// Enable Touch Interface
   e:	2140      	movs	r1, #64	; 0x40
  10:	4622      	mov	r2, r4
  12:	4817      	ldr	r0, [pc, #92]	; (70 <TCS_Read_Y+0x70>)
  14:	f7ff fffe 	bl	0 <GPIO_WriteBit>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1200
	
    buf_data[0] = TCS_SPI_Write_Byte(0xD0);													// Write Command Measure X-Position 
  18:	20d0      	movs	r0, #208	; 0xd0
  1a:	f7ff fffe 	bl	0 <TCS_Read_Y>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1201
	buf_data[0] = TCS_SPI_Write_Byte(0x00);													// Read ADC data X-Position (7-bit byte High) data: 0ddddddd	(bit) 
  1e:	4620      	mov	r0, r4
  20:	f7ff fffe 	bl	0 <TCS_Read_Y>
  24:	4605      	mov	r5, r0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1202
	buf_data[1] = TCS_SPI_Write_Byte(0x90);													// Write Command Measure Y-Position ; Read ADC data X-Position (5-bit byte Low)  data:ddddd000(bit)
  26:	2090      	movs	r0, #144	; 0x90
  28:	f7ff fffe 	bl	0 <TCS_Read_Y>
  2c:	4606      	mov	r6, r0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1203
	buf_data[2] = TCS_SPI_Write_Byte(0x00);													// Read ADC data Y-Position(7-bit byte High) data: 0ddddddd (bit)
  2e:	4620      	mov	r0, r4
  30:	f7ff fffe 	bl	0 <TCS_Read_Y>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1204
	buf_data[3] = TCS_SPI_Write_Byte(0x00);													// Read ADC data Y-Position(5-bit byte Low)  data: ddddd000 (bit)
  34:	4620      	mov	r0, r4
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1208

	tcs_adc_X  = buf_data[0];																// Mark ADC Data X-Position 12 bit
	tcs_adc_X  = tcs_adc_X << 5;
	tcs_adc_X |= buf_data[1] >> 3;
  36:	08f4      	lsrs	r4, r6, #3
  38:	b2e4      	uxtb	r4, r4
  3a:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1204
	
    buf_data[0] = TCS_SPI_Write_Byte(0xD0);													// Write Command Measure X-Position 
	buf_data[0] = TCS_SPI_Write_Byte(0x00);													// Read ADC data X-Position (7-bit byte High) data: 0ddddddd	(bit) 
	buf_data[1] = TCS_SPI_Write_Byte(0x90);													// Write Command Measure Y-Position ; Read ADC data X-Position (5-bit byte Low)  data:ddddd000(bit)
	buf_data[2] = TCS_SPI_Write_Byte(0x00);													// Read ADC data Y-Position(7-bit byte High) data: 0ddddddd (bit)
	buf_data[3] = TCS_SPI_Write_Byte(0x00);													// Read ADC data Y-Position(5-bit byte Low)  data: ddddd000 (bit)
  3e:	f7ff fffe 	bl	0 <TCS_Read_Y>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1209

	tcs_adc_X  = buf_data[0];																// Mark ADC Data X-Position 12 bit
	tcs_adc_X  = tcs_adc_X << 5;
	tcs_adc_X |= buf_data[1] >> 3;
	tcs_adc_X  = tcs_adc_X & 0x00000FFF;
  42:	0524      	lsls	r4, r4, #20
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1216
	tcs_adc_Y  = buf_data[2];   															// Mark ADC Data Y-Position 12 bit
	tcs_adc_Y  = tcs_adc_Y << 5;   															// Shift 7 bit High
	tcs_adc_Y |= buf_data[3] >> 3;   														// Shift 5 bit low
	tcs_adc_Y  = tcs_adc_Y & 0x00000FFF;													// total ADC data 12 bit
	
	GPIO_WriteBit(TCS_GPIO_PORT, TCS_CS_PIN, Bit_SET);										// Disable Touch Interface				
  44:	480a      	ldr	r0, [pc, #40]	; (70 <TCS_Read_Y+0x70>)
  46:	2140      	movs	r1, #64	; 0x40
  48:	2201      	movs	r2, #1
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1209
	buf_data[3] = TCS_SPI_Write_Byte(0x00);													// Read ADC data Y-Position(5-bit byte Low)  data: ddddd000 (bit)

	tcs_adc_X  = buf_data[0];																// Mark ADC Data X-Position 12 bit
	tcs_adc_X  = tcs_adc_X << 5;
	tcs_adc_X |= buf_data[1] >> 3;
	tcs_adc_X  = tcs_adc_X & 0x00000FFF;
  4a:	0d24      	lsrs	r4, r4, #20
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1216
	tcs_adc_Y  = buf_data[2];   															// Mark ADC Data Y-Position 12 bit
	tcs_adc_Y  = tcs_adc_Y << 5;   															// Shift 7 bit High
	tcs_adc_Y |= buf_data[3] >> 3;   														// Shift 5 bit low
	tcs_adc_Y  = tcs_adc_Y & 0x00000FFF;													// total ADC data 12 bit
	
	GPIO_WriteBit(TCS_GPIO_PORT, TCS_CS_PIN, Bit_SET);										// Disable Touch Interface				
  4c:	f7ff fffe 	bl	0 <GPIO_WriteBit>
  50:	e000      	b.n	54 <TCS_Read_Y+0x54>
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1222

    y = tcs_adc_X;	 																		// ADC 12 bit :LCD Start Landscape	
  }
  else
  {
    y = 0;
  52:	2400      	movs	r4, #0
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1225
  }
  
  yr= (y * 240) >> 12;
  54:	23f0      	movs	r3, #240	; 0xf0
  56:	fb03 f004 	mul.w	r0, r3, r4
  5a:	1300      	asrs	r0, r0, #12
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1226
  yr = ((yr * 240) / 217) - 12;
  5c:	4358      	muls	r0, r3
  5e:	22d9      	movs	r2, #217	; 0xd9
  60:	fb90 f0f2 	sdiv	r0, r0, r2
  64:	380c      	subs	r0, #12
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1233
  if(yr <= 0)
  {
    yr = 0;
  }

  return (uint16_t)(yr); 
  66:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
D:\sunny\stm32\therme\Utilities\STM32_EVAL\STM3210C_EVAL/stm3210c_eval_lcd.c:1234
}
  6a:	b280      	uxth	r0, r0
  6c:	bd70      	pop	{r4, r5, r6, pc}
  6e:	bf00      	nop
  70:	40011800 	.word	0x40011800
