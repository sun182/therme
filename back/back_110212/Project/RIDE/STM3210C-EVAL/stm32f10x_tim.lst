
D:\sunny\stm32\therme\Project\RIDE\STM3210C-EVAL\stm32f10x_tim.o:     file format elf32-littlearm
D:\sunny\stm32\therme\Project\RIDE\STM3210C-EVAL\stm32f10x_tim.o


Disassembly of section .text.TI1_Config:

00000000 <TI1_Config>:
TI1_Config():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2657
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
   0:	b530      	push	{r4, r5, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2660
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
   2:	8c04      	ldrh	r4, [r0, #32]
   4:	f024 0401 	bic.w	r4, r4, #1
   8:	0424      	lsls	r4, r4, #16
   a:	0c24      	lsrs	r4, r4, #16
   c:	8404      	strh	r4, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2661
  tmpccmr1 = TIMx->CCMR1;
   e:	8b04      	ldrh	r4, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2662
  tmpccer = TIMx->CCER;
  10:	8c05      	ldrh	r5, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2664
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  12:	f024 04f3 	bic.w	r4, r4, #243	; 0xf3
  16:	0424      	lsls	r4, r4, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2667
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  18:	f025 0502 	bic.w	r5, r5, #2
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2664
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  1c:	0c24      	lsrs	r4, r4, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2667
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  1e:	042d      	lsls	r5, r5, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2665
  TIMx->CCER &= CCER_CC1E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  20:	ea42 0404 	orr.w	r4, r2, r4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2667
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  24:	0c2d      	lsrs	r5, r5, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2665
  TIMx->CCER &= CCER_CC1E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  26:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2668
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)CCER_CC1E_Set);
  2a:	f045 0501 	orr.w	r5, r5, #1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2665
  TIMx->CCER &= CCER_CC1E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  2e:	b2a4      	uxth	r4, r4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2668
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)CCER_CC1E_Set);
  30:	430d      	orrs	r5, r1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2670
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
  32:	8304      	strh	r4, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2671
  TIMx->CCER = tmpccer;
  34:	8405      	strh	r5, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2672
}
  36:	bd30      	pop	{r4, r5, pc}

Disassembly of section .text.TI2_Config:

00000000 <TI2_Config>:
TI2_Config():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2692
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
   0:	b530      	push	{r4, r5, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2695
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
   2:	8c04      	ldrh	r4, [r0, #32]
   4:	f024 0410 	bic.w	r4, r4, #16
   8:	0424      	lsls	r4, r4, #16
   a:	0c24      	lsrs	r4, r4, #16
   c:	8404      	strh	r4, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2696
  tmpccmr1 = TIMx->CCMR1;
   e:	8b04      	ldrh	r4, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2697
  tmpccer = TIMx->CCER;
  10:	8c05      	ldrh	r5, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2700
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  12:	f424 7440 	bic.w	r4, r4, #768	; 0x300
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2704
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  16:	f025 0520 	bic.w	r5, r5, #32
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2700
  TIMx->CCER &= CCER_CC2E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  1a:	0524      	lsls	r4, r4, #20
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2704
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  1c:	042d      	lsls	r5, r5, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2700
  TIMx->CCER &= CCER_CC2E_Reset;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  1e:	0d24      	lsrs	r4, r4, #20
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2704
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  20:	0c2d      	lsrs	r5, r5, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2701
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  22:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2705
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  (uint16_t)(tmp | (uint16_t)CCER_CC2E_Set);
  26:	f045 0510 	orr.w	r5, r5, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2702
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  2a:	ea44 3403 	orr.w	r4, r4, r3, lsl #12
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2705
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  (uint16_t)(tmp | (uint16_t)CCER_CC2E_Set);
  2e:	ea45 1501 	orr.w	r5, r5, r1, lsl #4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2702
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  32:	b2a4      	uxth	r4, r4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2705
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
  tmpccer |=  (uint16_t)(tmp | (uint16_t)CCER_CC2E_Set);
  34:	b2ad      	uxth	r5, r5
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2707
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
  36:	8304      	strh	r4, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2708
  TIMx->CCER = tmpccer;
  38:	8405      	strh	r5, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2709
}
  3a:	bd30      	pop	{r4, r5, pc}

Disassembly of section .text.TIM_DeInit:

00000000 <TIM_DeInit>:
TIM_DeInit():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:192
void TIM_DeInit(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
   0:	4b2a      	ldr	r3, [pc, #168]	; (ac <TIM_DeInit+0xac>)
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:188
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
   2:	b510      	push	{r4, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:192
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
   4:	4298      	cmp	r0, r3
   6:	d107      	bne.n	18 <TIM_DeInit+0x18>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:194
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
   8:	f44f 6000 	mov.w	r0, #2048	; 0x800
   c:	2101      	movs	r1, #1
   e:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:195
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  12:	f44f 6000 	mov.w	r0, #2048	; 0x800
  16:	e043      	b.n	a0 <TIM_DeInit+0xa0>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:197
  }     
  else if (TIMx == TIM2)
  18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  1c:	d105      	bne.n	2a <TIM_DeInit+0x2a>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:199
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
  1e:	2001      	movs	r0, #1
  20:	4601      	mov	r1, r0
  22:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:200
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  26:	2001      	movs	r0, #1
  28:	e007      	b.n	3a <TIM_DeInit+0x3a>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:202
  }
  else if (TIMx == TIM3)
  2a:	4b21      	ldr	r3, [pc, #132]	; (b0 <TIM_DeInit+0xb0>)
  2c:	4298      	cmp	r0, r3
  2e:	d109      	bne.n	44 <TIM_DeInit+0x44>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:204
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
  30:	2002      	movs	r0, #2
  32:	2101      	movs	r1, #1
  34:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:205
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  38:	2002      	movs	r0, #2
  3a:	2100      	movs	r1, #0
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:235
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
    }  
  }
}
  3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:205
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }
  else if (TIMx == TIM3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  40:	f7ff bffe 	b.w	0 <RCC_APB1PeriphResetCmd>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:207
  }
  else if (TIMx == TIM4)
  44:	4b1b      	ldr	r3, [pc, #108]	; (b4 <TIM_DeInit+0xb4>)
  46:	4298      	cmp	r0, r3
  48:	d105      	bne.n	56 <TIM_DeInit+0x56>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:209
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
  4a:	2004      	movs	r0, #4
  4c:	2101      	movs	r1, #1
  4e:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:210
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  52:	2004      	movs	r0, #4
  54:	e7f1      	b.n	3a <TIM_DeInit+0x3a>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:212
  } 
  else if (TIMx == TIM5)
  56:	4b18      	ldr	r3, [pc, #96]	; (b8 <TIM_DeInit+0xb8>)
  58:	4298      	cmp	r0, r3
  5a:	d105      	bne.n	68 <TIM_DeInit+0x68>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:214
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
  5c:	2008      	movs	r0, #8
  5e:	2101      	movs	r1, #1
  60:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:215
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  64:	2008      	movs	r0, #8
  66:	e7e8      	b.n	3a <TIM_DeInit+0x3a>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:217
  } 
  else if (TIMx == TIM6)
  68:	4b14      	ldr	r3, [pc, #80]	; (bc <TIM_DeInit+0xbc>)
  6a:	4298      	cmp	r0, r3
  6c:	d105      	bne.n	7a <TIM_DeInit+0x7a>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:219
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
  6e:	2010      	movs	r0, #16
  70:	2101      	movs	r1, #1
  72:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:220
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  76:	2010      	movs	r0, #16
  78:	e7df      	b.n	3a <TIM_DeInit+0x3a>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:222
  } 
  else if (TIMx == TIM7)
  7a:	4b11      	ldr	r3, [pc, #68]	; (c0 <TIM_DeInit+0xc0>)
  7c:	4298      	cmp	r0, r3
  7e:	d105      	bne.n	8c <TIM_DeInit+0x8c>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:224
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
  80:	2020      	movs	r0, #32
  82:	2101      	movs	r1, #1
  84:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:225
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  88:	2020      	movs	r0, #32
  8a:	e7d6      	b.n	3a <TIM_DeInit+0x3a>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:229
  } 
  else
  {
    if (TIMx == TIM8)
  8c:	4b0d      	ldr	r3, [pc, #52]	; (c4 <TIM_DeInit+0xc4>)
  8e:	4298      	cmp	r0, r3
  90:	d10b      	bne.n	aa <TIM_DeInit+0xaa>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:231
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
  92:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  96:	2101      	movs	r1, #1
  98:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:232
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
  9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  a0:	2100      	movs	r1, #0
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:235
    }  
  }
}
  a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:232
  else
  {
    if (TIMx == TIM8)
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
  a6:	f7ff bffe 	b.w	0 <RCC_APB2PeriphResetCmd>
  aa:	bd10      	pop	{r4, pc}
  ac:	40012c00 	.word	0x40012c00
  b0:	40000400 	.word	0x40000400
  b4:	40000800 	.word	0x40000800
  b8:	40000c00 	.word	0x40000c00
  bc:	40001000 	.word	0x40001000
  c0:	40001400 	.word	0x40001400
  c4:	40013400 	.word	0x40013400

Disassembly of section .text.TIM_TimeBaseInit:

00000000 <TIM_TimeBaseInit>:
TIM_TimeBaseInit():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:252
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
   0:	88ca8803 	.word	0x88ca8803
   4:	f003 038f 	and.w	r3, r3, #143	; 0x8f
   8:	8003      	strh	r3, [r0, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:253
  TIMx->CR1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision |
   a:	8803      	ldrh	r3, [r0, #0]
   c:	b29b      	uxth	r3, r3
   e:	4313      	orrs	r3, r2
  10:	884a      	ldrh	r2, [r1, #2]
  12:	4313      	orrs	r3, r2
  14:	b29b      	uxth	r3, r3
  16:	8003      	strh	r3, [r0, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:257
                TIM_TimeBaseInitStruct->TIM_CounterMode;
  
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
  18:	888b      	ldrh	r3, [r1, #4]
  1a:	8583      	strh	r3, [r0, #44]	; 0x2c
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:260
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
  1c:	880b      	ldrh	r3, [r1, #0]
  1e:	8503      	strh	r3, [r0, #40]	; 0x28
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:262
    
  if ((((uint32_t) TIMx) == TIM1_BASE) || (((uint32_t) TIMx) == TIM8_BASE))  
  20:	4b05      	ldr	r3, [pc, #20]	; (38 <TIM_TimeBaseInit+0x38>)
  22:	4298      	cmp	r0, r3
  24:	d002      	beq.n	2c <TIM_TimeBaseInit+0x2c>
  26:	4b05      	ldr	r3, [pc, #20]	; (3c <TIM_TimeBaseInit+0x3c>)
  28:	4298      	cmp	r0, r3
  2a:	d101      	bne.n	30 <TIM_TimeBaseInit+0x30>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:265
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  2c:	7a0b      	ldrb	r3, [r1, #8]
  2e:	8603      	strh	r3, [r0, #48]	; 0x30
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:269
  }

  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
  30:	2301      	movs	r3, #1
  32:	8283      	strh	r3, [r0, #20]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:270
}
  34:	4770      	bx	lr
  36:	bf00      	nop
  38:	40012c00 	.word	0x40012c00
  3c:	40013400 	.word	0x40013400

Disassembly of section .text.TIM_OC1Init:

00000000 <TIM_OC1Init>:
TIM_OC1Init():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:290
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
   0:	8c03      	ldrh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:281
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   2:	b570      	push	{r4, r5, r6, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:290
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
   4:	f023 0301 	bic.w	r3, r3, #1
   8:	041b      	lsls	r3, r3, #16
   a:	0c1b      	lsrs	r3, r3, #16
   c:	8403      	strh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:293
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
   e:	8c03      	ldrh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:295
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  10:	8884      	ldrh	r4, [r0, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:298
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
  12:	8b02      	ldrh	r2, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:304
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC13M_Mask & CCMR_CC13S_Mask;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  14:	880d      	ldrh	r5, [r1, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:301
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC13M_Mask & CCMR_CC13S_Mask;
  16:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  1a:	0412      	lsls	r2, r2, #16
  1c:	0c12      	lsrs	r2, r2, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:304
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  1e:	432a      	orrs	r2, r5
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:309
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  20:	884e      	ldrh	r6, [r1, #2]
  22:	890d      	ldrh	r5, [r1, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:307
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
  24:	f023 0302 	bic.w	r3, r3, #2
  28:	041b      	lsls	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:309
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  2a:	ea46 0505 	orr.w	r5, r6, r5
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:307
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
  2e:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:309
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  30:	b2ad      	uxth	r5, r5
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:312
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  32:	ea45 0303 	orr.w	r3, r5, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:314
 
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  36:	4d11      	ldr	r5, [pc, #68]	; (7c <TIM_OC1Init+0x7c>)
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:295
  TIMx->CCER &= CCER_CC1E_Reset;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  38:	b2a4      	uxth	r4, r4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:314
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  3a:	42a8      	cmp	r0, r5
  3c:	d002      	beq.n	44 <TIM_OC1Init+0x44>
  3e:	4d10      	ldr	r5, [pc, #64]	; (80 <TIM_OC1Init+0x80>)
  40:	42a8      	cmp	r0, r5
  42:	d115      	bne.n	70 <TIM_OC1Init+0x70>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:322
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;
  44:	f64f 75f7 	movw	r5, #65527	; 0xfff7
  48:	ea03 0505 	and.w	r5, r3, r5
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:324
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
  4c:	894b      	ldrh	r3, [r1, #10]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:334
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
  4e:	89ce      	ldrh	r6, [r1, #14]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:324
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
  50:	431d      	orrs	r5, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:326
    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
  52:	f64f 73fb 	movw	r3, #65531	; 0xfffb
  56:	ea05 0303 	and.w	r3, r5, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:329
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
  5a:	888d      	ldrh	r5, [r1, #4]
  5c:	432b      	orrs	r3, r5
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:332
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    tmpcr2 &= CR2_OIS1N_Reset;
  5e:	f647 45ff 	movw	r5, #31999	; 0x7cff
  62:	ea04 0505 	and.w	r5, r4, r5
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:334
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
  66:	898c      	ldrh	r4, [r1, #12]
  68:	ea46 0404 	orr.w	r4, r6, r4
  6c:	b2a4      	uxth	r4, r4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:336
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  6e:	432c      	orrs	r4, r5
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:339
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  70:	8084      	strh	r4, [r0, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:342
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  72:	8302      	strh	r2, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:345

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
  74:	88ca      	ldrh	r2, [r1, #6]
  76:	8682      	strh	r2, [r0, #52]	; 0x34
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:348
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  78:	8403      	strh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:349
}
  7a:	bd70      	pop	{r4, r5, r6, pc}
  7c:	40012c00 	.word	0x40012c00
  80:	40013400 	.word	0x40013400

Disassembly of section .text.TIM_OC2Init:

00000000 <TIM_OC2Init>:
TIM_OC2Init():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:369
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
   0:	8c03      	ldrh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:360
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   2:	b530      	push	{r4, r5, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:369
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
   4:	f023 0310 	bic.w	r3, r3, #16
   8:	041b      	lsls	r3, r3, #16
   a:	0c1b      	lsrs	r3, r3, #16
   c:	8403      	strh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:372
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
   e:	8c03      	ldrh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:374
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  10:	8882      	ldrh	r2, [r0, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:377
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
  12:	8b04      	ldrh	r4, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:383

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC24M_Mask & CCMR_CC24S_Mask;  
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  14:	880d      	ldrh	r5, [r1, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:380
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC24M_Mask & CCMR_CC24S_Mask;  
  16:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  1a:	0424      	lsls	r4, r4, #16
  1c:	0c24      	lsrs	r4, r4, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:386
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
  1e:	f023 0320 	bic.w	r3, r3, #32
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:383

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC24M_Mask & CCMR_CC24S_Mask;  
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  22:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:386
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
  26:	041b      	lsls	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:388
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  28:	890d      	ldrh	r5, [r1, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:386
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
  2a:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:388
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  2c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:391
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
  30:	884d      	ldrh	r5, [r1, #2]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:374
  TIMx->CCER &= CCER_CC2E_Reset;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  32:	b292      	uxth	r2, r2
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:391
  tmpccer &= CCER_CC2P_Reset;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
  34:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:393
    
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  38:	4d13      	ldr	r5, [pc, #76]	; (88 <TIM_OC2Init+0x88>)
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:383

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC24M_Mask & CCMR_CC24S_Mask;  
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  3a:	b2a4      	uxth	r4, r4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:393
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  3c:	42a8      	cmp	r0, r5
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:391
  tmpccer &= CCER_CC2P_Reset;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
  3e:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:393
    
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  40:	d002      	beq.n	48 <TIM_OC2Init+0x48>
  42:	4d12      	ldr	r5, [pc, #72]	; (8c <TIM_OC2Init+0x8c>)
  44:	42a8      	cmp	r0, r5
  46:	d119      	bne.n	7c <TIM_OC2Init+0x7c>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:401
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
  48:	f64f 757f 	movw	r5, #65407	; 0xff7f
  4c:	ea03 0505 	and.w	r5, r3, r5
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:403
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
  50:	894b      	ldrh	r3, [r1, #10]
  52:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:405
    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
  56:	f64f 73bf 	movw	r3, #65471	; 0xffbf
  5a:	ea05 0303 	and.w	r3, r5, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:408
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
  5e:	888d      	ldrh	r5, [r1, #4]
  60:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:411
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;
  64:	f247 35ff 	movw	r5, #29695	; 0x73ff
  68:	ea02 0505 	and.w	r5, r2, r5
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:413
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
  6c:	898a      	ldrh	r2, [r1, #12]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:408
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
  6e:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:413
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    tmpcr2 &= CR2_OIS2N_Reset;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
  70:	ea45 0582 	orr.w	r5, r5, r2, lsl #2
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:415
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  74:	89ca      	ldrh	r2, [r1, #14]
  76:	ea45 0282 	orr.w	r2, r5, r2, lsl #2
  7a:	b292      	uxth	r2, r2
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:418
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  7c:	8082      	strh	r2, [r0, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:424
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
  7e:	88ca      	ldrh	r2, [r1, #6]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:421
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  80:	8304      	strh	r4, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:424

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
  82:	8702      	strh	r2, [r0, #56]	; 0x38
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:427
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  84:	8403      	strh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:428
}
  86:	bd30      	pop	{r4, r5, pc}
  88:	40012c00 	.word	0x40012c00
  8c:	40013400 	.word	0x40013400

Disassembly of section .text.TIM_OC3Init:

00000000 <TIM_OC3Init>:
TIM_OC3Init():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:448
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
   0:	b5308c03 	.word	0xb5308c03
   4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   8:	041b      	lsls	r3, r3, #16
   a:	0c1b      	lsrs	r3, r3, #16
   c:	8403      	strh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:451
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
   e:	8c03      	ldrh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:453
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  10:	8882      	ldrh	r2, [r0, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:456
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
  12:	8b84      	ldrh	r4, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:462
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC13M_Mask & CCMR_CC13S_Mask;  
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  14:	880d      	ldrh	r5, [r1, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:459
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC13M_Mask & CCMR_CC13S_Mask;  
  16:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  1a:	0424      	lsls	r4, r4, #16
  1c:	0c24      	lsrs	r4, r4, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:465
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
  1e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  22:	041b      	lsls	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:462
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC13M_Mask & CCMR_CC13S_Mask;  
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  24:	432c      	orrs	r4, r5
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:467
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  26:	890d      	ldrh	r5, [r1, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:465
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
  28:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:467
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  2a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:470
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
  2e:	884d      	ldrh	r5, [r1, #2]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:453
  TIMx->CCER &= CCER_CC3E_Reset;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  30:	b292      	uxth	r2, r2
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:470
  tmpccer &= CCER_CC3P_Reset;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
  32:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:472
   
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  36:	4d13      	ldr	r5, [pc, #76]	; (84 <TIM_OC3Init+0x84>)
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:470
  tmpccer &= CCER_CC3P_Reset;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
  38:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:472
   
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  3a:	42a8      	cmp	r0, r5
  3c:	d002      	beq.n	44 <TIM_OC3Init+0x44>
  3e:	4d12      	ldr	r5, [pc, #72]	; (88 <TIM_OC3Init+0x88>)
  40:	42a8      	cmp	r0, r5
  42:	d119      	bne.n	78 <TIM_OC3Init+0x78>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:480
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
  44:	f24f 75ff 	movw	r5, #63487	; 0xf7ff
  48:	ea03 0505 	and.w	r5, r3, r5
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:482
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
  4c:	894b      	ldrh	r3, [r1, #10]
  4e:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:484
    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
  52:	f64f 33ff 	movw	r3, #64511	; 0xfbff
  56:	ea05 0303 	and.w	r3, r5, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:487
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
  5a:	888d      	ldrh	r5, [r1, #4]
  5c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:490
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;
  60:	f644 75ff 	movw	r5, #20479	; 0x4fff
  64:	ea02 0505 	and.w	r5, r2, r5
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:492
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
  68:	898a      	ldrh	r2, [r1, #12]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:487
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
  6a:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:492
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    tmpcr2 &= CR2_OIS3N_Reset;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
  6c:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:494
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  70:	89ca      	ldrh	r2, [r1, #14]
  72:	ea45 1202 	orr.w	r2, r5, r2, lsl #4
  76:	b292      	uxth	r2, r2
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:497
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  78:	8082      	strh	r2, [r0, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:503
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
  7a:	88ca      	ldrh	r2, [r1, #6]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:500
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  7c:	8384      	strh	r4, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:503

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
  7e:	8782      	strh	r2, [r0, #60]	; 0x3c
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:506
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  80:	8403      	strh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:507
}
  82:	bd30      	pop	{r4, r5, pc}
  84:	40012c00 	.word	0x40012c00
  88:	40013400 	.word	0x40013400

Disassembly of section .text.TIM_OC4Init:

00000000 <TIM_OC4Init>:
TIM_OC4Init():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:527
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
   0:	b5308c03 	.word	0xb5308c03
   4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8:	041b      	lsls	r3, r3, #16
   a:	0c1b      	lsrs	r3, r3, #16
   c:	8403      	strh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:530
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
   e:	8c03      	ldrh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:532
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  10:	8884      	ldrh	r4, [r0, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:535
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
  12:	8b82      	ldrh	r2, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:541
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC24M_Mask & CCMR_CC24S_Mask; 
   
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  14:	880d      	ldrh	r5, [r1, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:538
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC24M_Mask & CCMR_CC24S_Mask; 
  16:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  1a:	0412      	lsls	r2, r2, #16
  1c:	0c12      	lsrs	r2, r2, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:544
   
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
  1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:541
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC24M_Mask & CCMR_CC24S_Mask; 
   
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  22:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:544
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
  26:	041b      	lsls	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:546
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  28:	890d      	ldrh	r5, [r1, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:544
   
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
  2a:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:546
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  2c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:549
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  30:	884d      	ldrh	r5, [r1, #2]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:532
  TIMx->CCER &= CCER_CC4E_Reset;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  32:	b2a4      	uxth	r4, r4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:549
  tmpccer &= CCER_CC4P_Reset;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  34:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:551
    
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  38:	4d0a      	ldr	r5, [pc, #40]	; (64 <TIM_OC4Init+0x64>)
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:541
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC24M_Mask & CCMR_CC24S_Mask; 
   
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  3a:	b292      	uxth	r2, r2
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:551
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
    
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  3c:	42a8      	cmp	r0, r5
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:549
  tmpccer &= CCER_CC4P_Reset;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  3e:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:551
    
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  40:	d002      	beq.n	48 <TIM_OC4Init+0x48>
  42:	4d09      	ldr	r5, [pc, #36]	; (68 <TIM_OC4Init+0x68>)
  44:	42a8      	cmp	r0, r5
  46:	d105      	bne.n	54 <TIM_OC4Init+0x54>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:555
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;
  48:	04a4      	lsls	r4, r4, #18
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:557
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  4a:	898d      	ldrh	r5, [r1, #12]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:555
    
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;
  4c:	0ca4      	lsrs	r4, r4, #18
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:557
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  4e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  52:	b2a4      	uxth	r4, r4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:560
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  54:	8084      	strh	r4, [r0, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:563
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
  56:	8382      	strh	r2, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:566

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
  58:	88ca      	ldrh	r2, [r1, #6]
  5a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:569
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  5e:	8403      	strh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:570
}
  60:	bd30      	pop	{r4, r5, pc}
  62:	bf00      	nop
  64:	40012c00 	.word	0x40012c00
  68:	40013400 	.word	0x40013400

Disassembly of section .text.TIM_BDTRConfig:

00000000 <TIM_BDTRConfig>:
TIM_BDTRConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:706
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
   0:	884a      	ldrh	r2, [r1, #2]
   2:	880b      	ldrh	r3, [r1, #0]
   4:	ea42 0303 	orr.w	r3, r2, r3
   8:	888a      	ldrh	r2, [r1, #4]
   a:	4313      	orrs	r3, r2
   c:	88ca      	ldrh	r2, [r1, #6]
   e:	4313      	orrs	r3, r2
  10:	890a      	ldrh	r2, [r1, #8]
  12:	4313      	orrs	r3, r2
  14:	894a      	ldrh	r2, [r1, #10]
  16:	4313      	orrs	r3, r2
  18:	898a      	ldrh	r2, [r1, #12]
  1a:	4313      	orrs	r3, r2
  1c:	b29b      	uxth	r3, r3
  1e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:710
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
  22:	4770      	bx	lr

Disassembly of section .text.TIM_TimeBaseStructInit:

00000000 <TIM_TimeBaseStructInit>:
TIM_TimeBaseStructInit():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:721
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
   0:	f04f 33ff 	mov.w	r3, #4294967295
   4:	8083      	strh	r3, [r0, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:722
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
   6:	2300      	movs	r3, #0
   8:	8003      	strh	r3, [r0, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:723
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
   a:	80c3      	strh	r3, [r0, #6]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:724
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
   c:	8043      	strh	r3, [r0, #2]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:725
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
   e:	7203      	strb	r3, [r0, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:726
}
  10:	4770      	bx	lr

Disassembly of section .text.TIM_OCStructInit:

00000000 <TIM_OCStructInit>:
TIM_OCStructInit():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:737
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
   0:	2300      	movs	r3, #0
   2:	8003      	strh	r3, [r0, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:738
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
   4:	8043      	strh	r3, [r0, #2]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:739
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
   6:	8083      	strh	r3, [r0, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:740
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
   8:	80c3      	strh	r3, [r0, #6]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:741
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
   a:	8103      	strh	r3, [r0, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:742
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
   c:	8143      	strh	r3, [r0, #10]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:743
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
   e:	8183      	strh	r3, [r0, #12]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:744
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
  10:	81c3      	strh	r3, [r0, #14]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:745
}
  12:	4770      	bx	lr

Disassembly of section .text.TIM_ICStructInit:

00000000 <TIM_ICStructInit>:
TIM_ICStructInit():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:756
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
   0:	2300      	movs	r3, #0
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:758
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
   2:	2201      	movs	r2, #1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:756
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
   4:	8003      	strh	r3, [r0, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:757
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
   6:	8043      	strh	r3, [r0, #2]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:758
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
   8:	8082      	strh	r2, [r0, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:759
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
   a:	80c3      	strh	r3, [r0, #6]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:760
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
   c:	8103      	strh	r3, [r0, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:761
}
   e:	4770      	bx	lr

Disassembly of section .text.TIM_BDTRStructInit:

00000000 <TIM_BDTRStructInit>:
TIM_BDTRStructInit():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:772
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
   0:	2300      	movs	r3, #0
   2:	8003      	strh	r3, [r0, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:773
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
   4:	8043      	strh	r3, [r0, #2]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:774
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
   6:	8083      	strh	r3, [r0, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:775
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
   8:	80c3      	strh	r3, [r0, #6]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:776
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
   a:	8103      	strh	r3, [r0, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:777
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
   c:	8143      	strh	r3, [r0, #10]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:778
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
   e:	8183      	strh	r3, [r0, #12]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:779
}
  10:	4770      	bx	lr

Disassembly of section .text.TIM_Cmd:

00000000 <TIM_Cmd>:
TIM_Cmd():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:794
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <TIM_Cmd+0xc>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:797
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= CR1_CEN_Set;
   2:	8803      	ldrh	r3, [r0, #0]
   4:	b29b      	uxth	r3, r3
   6:	f043 0301 	orr.w	r3, r3, #1
   a:	e004      	b.n	16 <TIM_Cmd+0x16>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:802
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= CR1_CEN_Reset;
   c:	8803      	ldrh	r3, [r0, #0]
   e:	f023 0301 	bic.w	r3, r3, #1
  12:	059b      	lsls	r3, r3, #22
  14:	0d9b      	lsrs	r3, r3, #22
  16:	8003      	strh	r3, [r0, #0]
  18:	4770      	bx	lr

Disassembly of section .text.TIM_CtrlPWMOutputs:

00000000 <TIM_CtrlPWMOutputs>:
TIM_CtrlPWMOutputs():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:818
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   0:	b139      	cbz	r1, 12 <TIM_CtrlPWMOutputs+0x12>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:821
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= BDTR_MOE_Set;
   2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
   a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
   e:	b29b      	uxth	r3, r3
  10:	e003      	b.n	1a <TIM_CtrlPWMOutputs+0x1a>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:826
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= BDTR_MOE_Reset;
  12:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
  16:	045b      	lsls	r3, r3, #17
  18:	0c5b      	lsrs	r3, r3, #17
  1a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  1e:	4770      	bx	lr

Disassembly of section .text.TIM_ITConfig:

00000000 <TIM_ITConfig>:
TIM_ITConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:857
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
   0:	b11a      	cbz	r2, a <TIM_ITConfig+0xa>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:860
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
   2:	8983      	ldrh	r3, [r0, #12]
   4:	b29b      	uxth	r3, r3
   6:	4319      	orrs	r1, r3
   8:	e003      	b.n	12 <TIM_ITConfig+0x12>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:865
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
   a:	8983      	ldrh	r3, [r0, #12]
   c:	b29b      	uxth	r3, r3
   e:	ea23 0101 	bic.w	r1, r3, r1
  12:	8181      	strh	r1, [r0, #12]
  14:	4770      	bx	lr

Disassembly of section .text.TIM_GenerateEvent:

00000000 <TIM_GenerateEvent>:
TIM_GenerateEvent():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:894
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
   0:	8281      	strh	r1, [r0, #20]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:895
}
   2:	4770      	bx	lr

Disassembly of section .text.TIM_DMAConfig:

00000000 <TIM_DMAConfig>:
TIM_DMAConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:921
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
   0:	430a      	orrs	r2, r1
   2:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:922
}
   6:	4770      	bx	lr

Disassembly of section .text.TIM_DMACmd:

00000000 <TIM_DMACmd>:
TIM_DMACmd():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:947
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
   0:	b11a      	cbz	r2, a <TIM_DMACmd+0xa>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:950
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
   2:	8983      	ldrh	r3, [r0, #12]
   4:	b29b      	uxth	r3, r3
   6:	4319      	orrs	r1, r3
   8:	e003      	b.n	12 <TIM_DMACmd+0x12>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:955
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
   a:	8983      	ldrh	r3, [r0, #12]
   c:	b29b      	uxth	r3, r3
   e:	ea23 0101 	bic.w	r1, r3, r1
  12:	8181      	strh	r1, [r0, #12]
  14:	4770      	bx	lr

Disassembly of section .text.TIM_InternalClockConfig:

00000000 <TIM_InternalClockConfig>:
TIM_InternalClockConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:969
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  SMCR_SMS_Mask;
   0:	8903      	ldrh	r3, [r0, #8]
   2:	f023 0307 	bic.w	r3, r3, #7
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8103      	strh	r3, [r0, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:970
}
   c:	4770      	bx	lr

Disassembly of section .text.TIM_ETRConfig:

00000000 <TIM_ETRConfig>:
TIM_ETRConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1125
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
   0:	b510      	push	{r4, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1132
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
   2:	8904      	ldrh	r4, [r0, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1134
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
   4:	b2e4      	uxtb	r4, r4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1136
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
   6:	ea41 0404 	orr.w	r4, r1, r4
   a:	ea42 0404 	orr.w	r4, r2, r4
   e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  12:	b2a4      	uxth	r4, r4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1138
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  14:	8104      	strh	r4, [r0, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1139
}
  16:	bd10      	pop	{r4, pc}

Disassembly of section .text.TIM_ETRClockMode2Config:

00000000 <TIM_ETRClockMode2Config>:
TIM_ETRClockMode2Config():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1094
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1101
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
   4:	f7ff fffe 	bl	0 <TIM_ETRClockMode2Config>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1103
  /* Enable the External clock mode2 */
  TIMx->SMCR |= SMCR_ECE_Set;
   8:	8923      	ldrh	r3, [r4, #8]
   a:	b29b      	uxth	r3, r3
   c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  10:	8123      	strh	r3, [r4, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1104
}
  12:	bd10      	pop	{r4, pc}

Disassembly of section .text.TIM_ETRClockMode1Config:

00000000 <TIM_ETRClockMode1Config>:
TIM_ETRClockMode1Config():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1052
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1060
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
   4:	f7ff fffe 	bl	0 <TIM_ETRClockMode1Config>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1063
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
   8:	8923      	ldrh	r3, [r4, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1067
  /* Reset the SMS Bits */
  tmpsmcr &= SMCR_SMS_Mask;
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
   a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
   e:	041b      	lsls	r3, r3, #16
  10:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1070
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= SMCR_TS_Mask;
  tmpsmcr |= TIM_TS_ETRF;
  12:	f043 0377 	orr.w	r3, r3, #119	; 0x77
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1072
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  16:	8123      	strh	r3, [r4, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1073
}
  18:	bd10      	pop	{r4, pc}

Disassembly of section .text.TIM_PrescalerConfig:

00000000 <TIM_PrescalerConfig>:
TIM_PrescalerConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1157
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
   0:	8501      	strh	r1, [r0, #40]	; 0x28
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1159
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
   2:	8282      	strh	r2, [r0, #20]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1160
}
   4:	4770      	bx	lr

Disassembly of section .text.TIM_CounterModeConfig:

00000000 <TIM_CounterModeConfig>:
TIM_CounterModeConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1180
{
  uint16_t tmpcr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
   0:	8803      	ldrh	r3, [r0, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1182
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= CR1_CounterMode_Mask;
   2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   6:	059b      	lsls	r3, r3, #22
   8:	0d9b      	lsrs	r3, r3, #22
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1184
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
   a:	ea41 0303 	orr.w	r3, r1, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1186
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
   e:	8003      	strh	r3, [r0, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1187
}
  10:	4770      	bx	lr

Disassembly of section .text.TIM_SelectInputTrigger:

00000000 <TIM_SelectInputTrigger>:
TIM_SelectInputTrigger():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1211
  uint16_t tmpsmcr = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
   0:	8903      	ldrh	r3, [r0, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1213
  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
   2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1215
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
   a:	ea41 0303 	orr.w	r3, r1, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1217
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
   e:	8103      	strh	r3, [r0, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1218
}
  10:	4770      	bx	lr

Disassembly of section .text.TIM_TIxExternalClockConfig:

00000000 <TIM_TIxExternalClockConfig>:
TIM_TIxExternalClockConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1012
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
   0:	b538      	push	{r3, r4, r5, lr}
   2:	460d      	mov	r5, r1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1019
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
   4:	2d60      	cmp	r5, #96	; 0x60
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1012
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
   6:	4604      	mov	r4, r0
   8:	4611      	mov	r1, r2
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1019
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
   a:	d103      	bne.n	14 <TIM_TIxExternalClockConfig+0x14>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1021
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
   c:	2201      	movs	r2, #1
   e:	f7ff fffe 	bl	0 <TIM_TIxExternalClockConfig>
  12:	e002      	b.n	1a <TIM_TIxExternalClockConfig+0x1a>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1025
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  14:	2201      	movs	r2, #1
  16:	f7ff fffe 	bl	0 <TIM_TIxExternalClockConfig>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1028
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  1a:	4620      	mov	r0, r4
  1c:	4629      	mov	r1, r5
  1e:	f7ff fffe 	bl	0 <TIM_TIxExternalClockConfig>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1030
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
  22:	8923      	ldrh	r3, [r4, #8]
  24:	b29b      	uxth	r3, r3
  26:	f043 0307 	orr.w	r3, r3, #7
  2a:	8123      	strh	r3, [r4, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1031
}
  2c:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section .text.TIM_ITRxExternalClockConfig:

00000000 <TIM_ITRxExternalClockConfig>:
TIM_ITRxExternalClockConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:984
  * @param  TIM_TS_ITR2: Internal Trigger 2
  * @param  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:989
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
   4:	f7ff fffe 	bl	0 <TIM_ITRxExternalClockConfig>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:991
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
   8:	8923      	ldrh	r3, [r4, #8]
   a:	b29b      	uxth	r3, r3
   c:	f043 0307 	orr.w	r3, r3, #7
  10:	8123      	strh	r3, [r4, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:992
}
  12:	bd10      	pop	{r4, pc}

Disassembly of section .text.TIM_EncoderInterfaceConfig:

00000000 <TIM_EncoderInterfaceConfig>:
TIM_EncoderInterfaceConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1241
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
   0:	b570      	push	{r4, r5, r6, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1253
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
   2:	8904      	ldrh	r4, [r0, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1256

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
   4:	8b06      	ldrh	r6, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1259

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
   6:	8c05      	ldrh	r5, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1266
  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
   8:	f426 7640 	bic.w	r6, r6, #768	; 0x300
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1270
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
   c:	f025 0522 	bic.w	r5, r5, #34	; 0x22
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1266
  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  10:	f026 0603 	bic.w	r6, r6, #3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1270
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  14:	042d      	lsls	r5, r5, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1262

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  16:	f024 0407 	bic.w	r4, r4, #7
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1266
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  1a:	0436      	lsls	r6, r6, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1270
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  1c:	0c2d      	lsrs	r5, r5, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1262

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  1e:	0424      	lsls	r4, r4, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1266
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  20:	0c36      	lsrs	r6, r6, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1271
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
  22:	ea42 0505 	orr.w	r5, r2, r5
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1262

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  26:	0c24      	lsrs	r4, r4, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1267
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
  28:	f446 7680 	orr.w	r6, r6, #256	; 0x100
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1271

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
  2c:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1263
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
  tmpsmcr |= TIM_EncoderMode;
  30:	4321      	orrs	r1, r4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1267

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
  32:	f046 0601 	orr.w	r6, r6, #1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1271

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
  36:	b2ad      	uxth	r5, r5
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1274

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  38:	8101      	strh	r1, [r0, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1277

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
  3a:	8306      	strh	r6, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1280

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  3c:	8405      	strh	r5, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1281
}
  3e:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section .text.TIM_ForcedOC1Config:

00000000 <TIM_ForcedOC1Config>:
TIM_ForcedOC1Config():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1298
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
   0:	8b03      	ldrh	r3, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1300
  /* Reset the OC1M Bits */
  tmpccmr1 &= CCMR_OC13M_Mask;
   2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1302
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
   a:	ea41 0303 	orr.w	r3, r1, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1304
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
   e:	8303      	strh	r3, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1305
}
  10:	4770      	bx	lr

Disassembly of section .text.TIM_ForcedOC2Config:

00000000 <TIM_ForcedOC2Config>:
TIM_ForcedOC2Config():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1322
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
   0:	8b03      	ldrh	r3, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1324
  /* Reset the OC2M Bits */
  tmpccmr1 &= CCMR_OC24M_Mask;
   2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1326
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
   a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   e:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1328
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  10:	8303      	strh	r3, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1329
}
  12:	4770      	bx	lr

Disassembly of section .text.TIM_ForcedOC3Config:

00000000 <TIM_ForcedOC3Config>:
TIM_ForcedOC3Config():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1346
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
   0:	8b83      	ldrh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1348
  /* Reset the OC1M Bits */
  tmpccmr2 &= CCMR_OC13M_Mask;
   2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1350
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
   a:	ea41 0303 	orr.w	r3, r1, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1352
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
   e:	8383      	strh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1353
}
  10:	4770      	bx	lr

Disassembly of section .text.TIM_ForcedOC4Config:

00000000 <TIM_ForcedOC4Config>:
TIM_ForcedOC4Config():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1370
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
   0:	8b83      	ldrh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1372
  /* Reset the OC2M Bits */
  tmpccmr2 &= CCMR_OC24M_Mask;
   2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1374
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
   a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   e:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1376
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  10:	8383      	strh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1377
}
  12:	4770      	bx	lr

Disassembly of section .text.TIM_ARRPreloadConfig:

00000000 <TIM_ARRPreloadConfig>:
TIM_ARRPreloadConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1391
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <TIM_ARRPreloadConfig+0xc>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1394
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= CR1_ARPE_Set;
   2:	8803      	ldrh	r3, [r0, #0]
   4:	b29b      	uxth	r3, r3
   6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a:	e004      	b.n	16 <TIM_ARRPreloadConfig+0x16>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1399
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= CR1_ARPE_Reset;
   c:	8803      	ldrh	r3, [r0, #0]
   e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  12:	059b      	lsls	r3, r3, #22
  14:	0d9b      	lsrs	r3, r3, #22
  16:	8003      	strh	r3, [r0, #0]
  18:	4770      	bx	lr

Disassembly of section .text.TIM_SelectCOM:

00000000 <TIM_SelectCOM>:
TIM_SelectCOM():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1415
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <TIM_SelectCOM+0xc>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1418
  {
    /* Set the COM Bit */
    TIMx->CR2 |= CR2_CCUS_Set;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	b29b      	uxth	r3, r3
   6:	f043 0304 	orr.w	r3, r3, #4
   a:	e004      	b.n	16 <TIM_SelectCOM+0x16>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1423
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= CR2_CCUS_Reset;
   c:	8883      	ldrh	r3, [r0, #4]
   e:	f023 0304 	bic.w	r3, r3, #4
  12:	041b      	lsls	r3, r3, #16
  14:	0c1b      	lsrs	r3, r3, #16
  16:	8083      	strh	r3, [r0, #4]
  18:	4770      	bx	lr

Disassembly of section .text.TIM_SelectCCDMA:

00000000 <TIM_SelectCCDMA>:
TIM_SelectCCDMA():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1439
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <TIM_SelectCCDMA+0xc>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1442
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= CR2_CCDS_Set;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	b29b      	uxth	r3, r3
   6:	f043 0308 	orr.w	r3, r3, #8
   a:	e004      	b.n	16 <TIM_SelectCCDMA+0x16>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1447
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= CR2_CCDS_Reset;
   c:	8883      	ldrh	r3, [r0, #4]
   e:	f023 0308 	bic.w	r3, r3, #8
  12:	041b      	lsls	r3, r3, #16
  14:	0c1b      	lsrs	r3, r3, #16
  16:	8083      	strh	r3, [r0, #4]
  18:	4770      	bx	lr

Disassembly of section .text.TIM_CCPreloadControl:

00000000 <TIM_CCPreloadControl>:
TIM_CCPreloadControl():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1463
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <TIM_CCPreloadControl+0xc>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1466
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= CR2_CCPC_Set;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	b29b      	uxth	r3, r3
   6:	f043 0301 	orr.w	r3, r3, #1
   a:	e004      	b.n	16 <TIM_CCPreloadControl+0x16>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1471
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= CR2_CCPC_Reset;
   c:	8883      	ldrh	r3, [r0, #4]
   e:	f023 0301 	bic.w	r3, r3, #1
  12:	041b      	lsls	r3, r3, #16
  14:	0c1b      	lsrs	r3, r3, #16
  16:	8083      	strh	r3, [r0, #4]
  18:	4770      	bx	lr

Disassembly of section .text.TIM_OC1PreloadConfig:

00000000 <TIM_OC1PreloadConfig>:
TIM_OC1PreloadConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1490
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
   0:	8b03      	ldrh	r3, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1492
  /* Reset the OC1PE Bit */
  tmpccmr1 &= CCMR_OC13PE_Reset;
   2:	f023 0308 	bic.w	r3, r3, #8
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1494
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
   a:	ea41 0303 	orr.w	r3, r1, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1496
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
   e:	8303      	strh	r3, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1497
}
  10:	4770      	bx	lr

Disassembly of section .text.TIM_OC2PreloadConfig:

00000000 <TIM_OC2PreloadConfig>:
TIM_OC2PreloadConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1514
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
   0:	8b03      	ldrh	r3, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1516
  /* Reset the OC2PE Bit */
  tmpccmr1 &= CCMR_OC24PE_Reset;
   2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1518
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
   a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   e:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1520
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  10:	8303      	strh	r3, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1521
}
  12:	4770      	bx	lr

Disassembly of section .text.TIM_OC3PreloadConfig:

00000000 <TIM_OC3PreloadConfig>:
TIM_OC3PreloadConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1538
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
   0:	8b83      	ldrh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1540
  /* Reset the OC3PE Bit */
  tmpccmr2 &= CCMR_OC13PE_Reset;
   2:	f023 0308 	bic.w	r3, r3, #8
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1542
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
   a:	ea41 0303 	orr.w	r3, r1, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1544
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
   e:	8383      	strh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1545
}
  10:	4770      	bx	lr

Disassembly of section .text.TIM_OC4PreloadConfig:

00000000 <TIM_OC4PreloadConfig>:
TIM_OC4PreloadConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1562
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
   0:	8b83      	ldrh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1564
  /* Reset the OC4PE Bit */
  tmpccmr2 &= CCMR_OC24PE_Reset;
   2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1566
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
   a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   e:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1568
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  10:	8383      	strh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1569
}
  12:	4770      	bx	lr

Disassembly of section .text.TIM_OC1FastConfig:

00000000 <TIM_OC1FastConfig>:
TIM_OC1FastConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1587
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
   0:	8b03      	ldrh	r3, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1589
  /* Reset the OC1FE Bit */
  tmpccmr1 &= CCMR_OC13FE_Reset;
   2:	f023 0304 	bic.w	r3, r3, #4
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1591
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
   a:	ea41 0303 	orr.w	r3, r1, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1593
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
   e:	8303      	strh	r3, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1594
}
  10:	4770      	bx	lr

Disassembly of section .text.TIM_OC2FastConfig:

00000000 <TIM_OC2FastConfig>:
TIM_OC2FastConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1612
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
   0:	8b03      	ldrh	r3, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1614
  /* Reset the OC2FE Bit */
  tmpccmr1 &= CCMR_OC24FE_Reset;
   2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1616
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
   a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   e:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1618
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
  10:	8303      	strh	r3, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1619
}
  12:	4770      	bx	lr

Disassembly of section .text.TIM_OC3FastConfig:

00000000 <TIM_OC3FastConfig>:
TIM_OC3FastConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1637
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
   0:	8b83      	ldrh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1639
  /* Reset the OC3FE Bit */
  tmpccmr2 &= CCMR_OC13FE_Reset;
   2:	f023 0304 	bic.w	r3, r3, #4
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1641
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
   a:	ea41 0303 	orr.w	r3, r1, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1643
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
   e:	8383      	strh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1644
}
  10:	4770      	bx	lr

Disassembly of section .text.TIM_OC4FastConfig:

00000000 <TIM_OC4FastConfig>:
TIM_OC4FastConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1662
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
   0:	8b83      	ldrh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1664
  /* Reset the OC4FE Bit */
  tmpccmr2 &= CCMR_OC24FE_Reset;
   2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1666
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
   a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   e:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1668
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
  10:	8383      	strh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1669
}
  12:	4770      	bx	lr

Disassembly of section .text.TIM_ClearOC1Ref:

00000000 <TIM_ClearOC1Ref>:
TIM_ClearOC1Ref():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1686
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
   0:	8b03      	ldrh	r3, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1688
  /* Reset the OC1CE Bit */
  tmpccmr1 &= CCMR_OC13CE_Reset;
   2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1690
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
   a:	ea41 0303 	orr.w	r3, r1, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1692
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
   e:	8303      	strh	r3, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1693
}
  10:	4770      	bx	lr

Disassembly of section .text.TIM_ClearOC2Ref:

00000000 <TIM_ClearOC2Ref>:
TIM_ClearOC2Ref():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1710
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
   0:	8b03      	ldrh	r3, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1712
  /* Reset the OC2CE Bit */
  tmpccmr1 &= CCMR_OC24CE_Reset;
   2:	045b      	lsls	r3, r3, #17
   4:	0c5b      	lsrs	r3, r3, #17
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1714
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
   6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   a:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1716
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
   c:	8303      	strh	r3, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1717
}
   e:	4770      	bx	lr

Disassembly of section .text.TIM_ClearOC3Ref:

00000000 <TIM_ClearOC3Ref>:
TIM_ClearOC3Ref():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1734
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
   0:	8b83      	ldrh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1736
  /* Reset the OC3CE Bit */
  tmpccmr2 &= CCMR_OC13CE_Reset;
   2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1738
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
   a:	ea41 0303 	orr.w	r3, r1, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1740
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
   e:	8383      	strh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1741
}
  10:	4770      	bx	lr

Disassembly of section .text.TIM_ClearOC4Ref:

00000000 <TIM_ClearOC4Ref>:
TIM_ClearOC4Ref():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1758
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
   0:	8b83      	ldrh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1760
  /* Reset the OC4CE Bit */
  tmpccmr2 &= CCMR_OC24CE_Reset;
   2:	045b      	lsls	r3, r3, #17
   4:	0c5b      	lsrs	r3, r3, #17
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1762
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
   6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   a:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1764
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
   c:	8383      	strh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1765
}
   e:	4770      	bx	lr

Disassembly of section .text.TIM_OC1PolarityConfig:

00000000 <TIM_OC1PolarityConfig>:
TIM_OC1PolarityConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1782
{
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
   0:	8c03      	ldrh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1784
  /* Set or Reset the CC1P Bit */
  tmpccer &= CCER_CC1P_Reset;
   2:	f023 0302 	bic.w	r3, r3, #2
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1785
  tmpccer |= TIM_OCPolarity;
   a:	ea41 0303 	orr.w	r3, r1, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1787
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
   e:	8403      	strh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1788
}
  10:	4770      	bx	lr

Disassembly of section .text.TIM_OC1NPolarityConfig:

00000000 <TIM_OC1NPolarityConfig>:
TIM_OC1NPolarityConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1806
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
   0:	8c03      	ldrh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1808
  /* Set or Reset the CC1NP Bit */
  tmpccer &= CCER_CC1NP_Reset;
   2:	f023 0308 	bic.w	r3, r3, #8
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1809
  tmpccer |= TIM_OCNPolarity;
   a:	ea41 0303 	orr.w	r3, r1, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1811
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
   e:	8403      	strh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1812
}
  10:	4770      	bx	lr

Disassembly of section .text.TIM_OC2PolarityConfig:

00000000 <TIM_OC2PolarityConfig>:
TIM_OC2PolarityConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1829
{
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
   0:	8c03      	ldrh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1831
  /* Set or Reset the CC2P Bit */
  tmpccer &= CCER_CC2P_Reset;
   2:	f023 0320 	bic.w	r3, r3, #32
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1832
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
   a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
   e:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1834
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  10:	8403      	strh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1835
}
  12:	4770      	bx	lr

Disassembly of section .text.TIM_OC2NPolarityConfig:

00000000 <TIM_OC2NPolarityConfig>:
TIM_OC2NPolarityConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1853
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
   0:	8c03      	ldrh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1855
  /* Set or Reset the CC2NP Bit */
  tmpccer &= CCER_CC2NP_Reset;
   2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1856
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
   a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
   e:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1858
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  10:	8403      	strh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1859
}
  12:	4770      	bx	lr

Disassembly of section .text.TIM_OC3PolarityConfig:

00000000 <TIM_OC3PolarityConfig>:
TIM_OC3PolarityConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1876
{
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
   0:	8c03      	ldrh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1878
  /* Set or Reset the CC3P Bit */
  tmpccer &= CCER_CC3P_Reset;
   2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1879
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
   a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   e:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1881
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  10:	8403      	strh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1882
}
  12:	4770      	bx	lr

Disassembly of section .text.TIM_OC3NPolarityConfig:

00000000 <TIM_OC3NPolarityConfig>:
TIM_OC3NPolarityConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1901
 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
   0:	8c03      	ldrh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1903
  /* Set or Reset the CC3NP Bit */
  tmpccer &= CCER_CC3NP_Reset;
   2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1904
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
   a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   e:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1906
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  10:	8403      	strh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1907
}
  12:	4770      	bx	lr

Disassembly of section .text.TIM_OC4PolarityConfig:

00000000 <TIM_OC4PolarityConfig>:
TIM_OC4PolarityConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1924
{
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
   0:	8c03      	ldrh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1926
  /* Set or Reset the CC4P Bit */
  tmpccer &= CCER_CC4P_Reset;
   2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1927
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
   a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   e:	b29b      	uxth	r3, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1929
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  10:	8403      	strh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1930
}
  12:	4770      	bx	lr

Disassembly of section .text.TIM_CCxCmd:

00000000 <TIM_CCxCmd>:
TIM_CCxCmd():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1954
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
   0:	2301      	movs	r3, #1
   2:	408b      	lsls	r3, r1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1960

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
   4:	fa12 f101 	lsls.w	r1, r2, r1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1946
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
   8:	b510      	push	{r4, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1957
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
   a:	8c04      	ldrh	r4, [r0, #32]
   c:	b2a4      	uxth	r4, r4
   e:	ea24 0303 	bic.w	r3, r4, r3
  12:	8403      	strh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1960

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
  14:	8c03      	ldrh	r3, [r0, #32]
  16:	ea41 0303 	orr.w	r3, r1, r3
  1a:	b29b      	uxth	r3, r3
  1c:	8403      	strh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1961
}
  1e:	bd10      	pop	{r4, pc}

Disassembly of section .text.TIM_CCxNCmd:

00000000 <TIM_CCxNCmd>:
TIM_CCxNCmd():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1984
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
   0:	2304      	movs	r3, #4
   2:	408b      	lsls	r3, r1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1990

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
   4:	fa12 f101 	lsls.w	r1, r2, r1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1976
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
   8:	b510      	push	{r4, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1987
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
   a:	8c04      	ldrh	r4, [r0, #32]
   c:	b2a4      	uxth	r4, r4
   e:	ea24 0303 	bic.w	r3, r4, r3
  12:	8403      	strh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1990

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
  14:	8c03      	ldrh	r3, [r0, #32]
  16:	ea41 0303 	orr.w	r3, r1, r3
  1a:	b29b      	uxth	r3, r3
  1c:	8403      	strh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:1991
}
  1e:	bd10      	pop	{r4, pc}

Disassembly of section .text.TIM_SelectOCxM:

00000000 <TIM_SelectOCxM>:
TIM_SelectOCxM():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2017
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
   0:	b530      	push	{r4, r5, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2029
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_Offset;

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
   2:	2401      	movs	r4, #1
   4:	408c      	lsls	r4, r1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2032

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
   6:	8c05      	ldrh	r5, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2027
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_Offset;
   8:	f100 0318 	add.w	r3, r0, #24
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2032

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
   c:	b2ad      	uxth	r5, r5
   e:	ea25 0404 	bic.w	r4, r5, r4
  12:	8404      	strh	r4, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2034

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  14:	b109      	cbz	r1, 1a <TIM_SelectOCxM+0x1a>
  16:	2908      	cmp	r1, #8
  18:	d108      	bne.n	2c <TIM_SelectOCxM+0x2c>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2036
  {
    tmp += (TIM_Channel>>1);
  1a:	0849      	lsrs	r1, r1, #1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2039

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_Mask;
  1c:	58cc      	ldr	r4, [r1, r3]
  1e:	f64f 708f 	movw	r0, #65423	; 0xff8f
  22:	ea04 0000 	and.w	r0, r4, r0
  26:	50c8      	str	r0, [r1, r3]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2042
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
  28:	58c8      	ldr	r0, [r1, r3]
  2a:	e00b      	b.n	44 <TIM_SelectOCxM+0x44>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2046
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
  2c:	3904      	subs	r1, #4
  2e:	b289      	uxth	r1, r1
  30:	0849      	lsrs	r1, r1, #1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2049

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_Mask;
  32:	58cc      	ldr	r4, [r1, r3]
  34:	f648 70ff 	movw	r0, #36863	; 0x8fff
  38:	ea04 0000 	and.w	r0, r4, r0
  3c:	50c8      	str	r0, [r1, r3]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2052
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
  3e:	0212      	lsls	r2, r2, #8
  40:	58c8      	ldr	r0, [r1, r3]
  42:	b292      	uxth	r2, r2
  44:	ea40 0202 	orr.w	r2, r0, r2
  48:	50ca      	str	r2, [r1, r3]
  4a:	bd30      	pop	{r4, r5, pc}

Disassembly of section .text.TIM_UpdateDisableConfig:

00000000 <TIM_UpdateDisableConfig>:
TIM_UpdateDisableConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2068
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <TIM_UpdateDisableConfig+0xc>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2071
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= CR1_UDIS_Set;
   2:	8803      	ldrh	r3, [r0, #0]
   4:	b29b      	uxth	r3, r3
   6:	f043 0302 	orr.w	r3, r3, #2
   a:	e004      	b.n	16 <TIM_UpdateDisableConfig+0x16>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2076
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= CR1_UDIS_Reset;
   c:	8803      	ldrh	r3, [r0, #0]
   e:	f023 0302 	bic.w	r3, r3, #2
  12:	059b      	lsls	r3, r3, #22
  14:	0d9b      	lsrs	r3, r3, #22
  16:	8003      	strh	r3, [r0, #0]
  18:	4770      	bx	lr

Disassembly of section .text.TIM_UpdateRequestConfig:

00000000 <TIM_UpdateRequestConfig>:
TIM_UpdateRequestConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2096
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
   0:	b121      	cbz	r1, c <TIM_UpdateRequestConfig+0xc>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2099
  {
    /* Set the URS Bit */
    TIMx->CR1 |= CR1_URS_Set;
   2:	8803      	ldrh	r3, [r0, #0]
   4:	b29b      	uxth	r3, r3
   6:	f043 0304 	orr.w	r3, r3, #4
   a:	e004      	b.n	16 <TIM_UpdateRequestConfig+0x16>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2104
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= CR1_URS_Reset;
   c:	8803      	ldrh	r3, [r0, #0]
   e:	f023 0304 	bic.w	r3, r3, #4
  12:	059b      	lsls	r3, r3, #22
  14:	0d9b      	lsrs	r3, r3, #22
  16:	8003      	strh	r3, [r0, #0]
  18:	4770      	bx	lr

Disassembly of section .text.TIM_SelectHallSensor:

00000000 <TIM_SelectHallSensor>:
TIM_SelectHallSensor():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2120
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <TIM_SelectHallSensor+0xc>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2123
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= CR2_TI1S_Set;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	b29b      	uxth	r3, r3
   6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a:	e004      	b.n	16 <TIM_SelectHallSensor+0x16>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2128
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= CR2_TI1S_Reset;
   c:	8883      	ldrh	r3, [r0, #4]
   e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  12:	041b      	lsls	r3, r3, #16
  14:	0c1b      	lsrs	r3, r3, #16
  16:	8083      	strh	r3, [r0, #4]
  18:	4770      	bx	lr

Disassembly of section .text.TIM_SelectOnePulseMode:

00000000 <TIM_SelectOnePulseMode>:
TIM_SelectOnePulseMode():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2147
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= CR1_OPM_Reset;
   0:	8803      	ldrh	r3, [r0, #0]
   2:	f023 0308 	bic.w	r3, r3, #8
   6:	059b      	lsls	r3, r3, #22
   8:	0d9b      	lsrs	r3, r3, #22
   a:	8003      	strh	r3, [r0, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2149
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
   c:	8803      	ldrh	r3, [r0, #0]
   e:	b29b      	uxth	r3, r3
  10:	ea41 0303 	orr.w	r3, r1, r3
  14:	8003      	strh	r3, [r0, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2150
}
  16:	4770      	bx	lr

Disassembly of section .text.TIM_SelectOutputTrigger:

00000000 <TIM_SelectOutputTrigger>:
TIM_SelectOutputTrigger():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2179
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= CR2_MMS_Mask;
   0:	8883      	ldrh	r3, [r0, #4]
   2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8083      	strh	r3, [r0, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2181
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
   c:	8883      	ldrh	r3, [r0, #4]
   e:	b29b      	uxth	r3, r3
  10:	ea41 0303 	orr.w	r3, r1, r3
  14:	8083      	strh	r3, [r0, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2182
}
  16:	4770      	bx	lr

Disassembly of section .text.TIM_SelectSlaveMode:

00000000 <TIM_SelectSlaveMode>:
TIM_SelectSlaveMode():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2202
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
  /* Reset the SMS Bits */
  TIMx->SMCR &= SMCR_SMS_Mask;
   0:	8903      	ldrh	r3, [r0, #8]
   2:	f023 0307 	bic.w	r3, r3, #7
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8103      	strh	r3, [r0, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2204
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
   c:	8903      	ldrh	r3, [r0, #8]
   e:	b29b      	uxth	r3, r3
  10:	ea41 0303 	orr.w	r3, r1, r3
  14:	8103      	strh	r3, [r0, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2205
}
  16:	4770      	bx	lr

Disassembly of section .text.TIM_SelectMasterSlaveMode:

00000000 <TIM_SelectMasterSlaveMode>:
TIM_SelectMasterSlaveMode():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2223
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= SMCR_MSM_Reset;
   0:	8903      	ldrh	r3, [r0, #8]
   2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8103      	strh	r3, [r0, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2226
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
   c:	8903      	ldrh	r3, [r0, #8]
   e:	b29b      	uxth	r3, r3
  10:	ea41 0303 	orr.w	r3, r1, r3
  14:	8103      	strh	r3, [r0, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2227
}
  16:	4770      	bx	lr

Disassembly of section .text.TIM_SetCounter:

00000000 <TIM_SetCounter>:
TIM_SetCounter():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2240
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
   0:	8481      	strh	r1, [r0, #36]	; 0x24
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2241
}
   2:	4770      	bx	lr

Disassembly of section .text.TIM_SetAutoreload:

00000000 <TIM_SetAutoreload>:
TIM_SetAutoreload():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2254
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
   0:	8581      	strh	r1, [r0, #44]	; 0x2c
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2255
}
   2:	4770      	bx	lr

Disassembly of section .text.TIM_SetCompare1:

00000000 <TIM_SetCompare1>:
TIM_SetCompare1():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2268
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
   0:	8681      	strh	r1, [r0, #52]	; 0x34
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2269
}
   2:	4770      	bx	lr

Disassembly of section .text.TIM_SetCompare2:

00000000 <TIM_SetCompare2>:
TIM_SetCompare2():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2282
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
   0:	8701      	strh	r1, [r0, #56]	; 0x38
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2283
}
   2:	4770      	bx	lr

Disassembly of section .text.TIM_SetCompare3:

00000000 <TIM_SetCompare3>:
TIM_SetCompare3():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2296
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
   0:	8781      	strh	r1, [r0, #60]	; 0x3c
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2297
}
   2:	4770      	bx	lr

Disassembly of section .text.TIM_SetCompare4:

00000000 <TIM_SetCompare4>:
TIM_SetCompare4():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2310
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
   0:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2311
}
   4:	4770      	bx	lr

Disassembly of section .text.TIM_SetIC1Prescaler:

00000000 <TIM_SetIC1Prescaler>:
TIM_SetIC1Prescaler():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2330
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
   0:	8b03      	ldrh	r3, [r0, #24]
   2:	f023 030c 	bic.w	r3, r3, #12
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8303      	strh	r3, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2332
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
   c:	8b03      	ldrh	r3, [r0, #24]
   e:	b29b      	uxth	r3, r3
  10:	ea41 0303 	orr.w	r3, r1, r3
  14:	8303      	strh	r3, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2333
}
  16:	4770      	bx	lr

Disassembly of section .text.TIM_SetIC2Prescaler:

00000000 <TIM_SetIC2Prescaler>:
TIM_SetIC2Prescaler():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2352
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
   0:	8b03      	ldrh	r3, [r0, #24]
   2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8303      	strh	r3, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2354
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
   c:	8b03      	ldrh	r3, [r0, #24]
   e:	b29b      	uxth	r3, r3
  10:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  14:	b29b      	uxth	r3, r3
  16:	8303      	strh	r3, [r0, #24]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2355
}
  18:	4770      	bx	lr

Disassembly of section .text.TIM_PWMIConfig:

00000000 <TIM_PWMIConfig>:
TIM_PWMIConfig():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:637
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
   0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4:	460c      	mov	r4, r1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:652
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
   6:	88a2      	ldrh	r2, [r4, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:643
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
   8:	8849      	ldrh	r1, [r1, #2]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:660
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
   a:	f8b4 e000 	ldrh.w	lr, [r4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:637
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
   e:	4605      	mov	r5, r0
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:645
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
  10:	2900      	cmp	r1, #0
  12:	bf0c      	ite	eq
  14:	2702      	moveq	r7, #2
  16:	2700      	movne	r7, #0
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:654
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
  18:	2a01      	cmp	r2, #1
  1a:	bf14      	ite	ne
  1c:	2601      	movne	r6, #1
  1e:	2602      	moveq	r6, #2
  20:	8923      	ldrh	r3, [r4, #8]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:660
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  22:	f1be 0f00 	cmp.w	lr, #0
  26:	d111      	bne.n	26 <TIM_PWMIConfig+0x26>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:663
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
  28:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:666
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  2c:	4628      	mov	r0, r5
  2e:	88e1      	ldrh	r1, [r4, #6]
  30:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:668
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
  34:	4628      	mov	r0, r5
  36:	4639      	mov	r1, r7
  38:	4632      	mov	r2, r6
  3a:	8923      	ldrh	r3, [r4, #8]
  3c:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:670
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  40:	88e1      	ldrh	r1, [r4, #6]
  42:	4628      	mov	r0, r5
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:684
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
  44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:670
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  48:	f7ff bffe 	b.w	0 <TIM_PWMIConfig>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:675
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
  4c:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:678
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  50:	4628      	mov	r0, r5
  52:	88e1      	ldrh	r1, [r4, #6]
  54:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:680
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
  58:	4628      	mov	r0, r5
  5a:	4639      	mov	r1, r7
  5c:	4632      	mov	r2, r6
  5e:	8923      	ldrh	r3, [r4, #8]
  60:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:682
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  64:	88e1      	ldrh	r1, [r4, #6]
  66:	4628      	mov	r0, r5
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:684
  }
}
  68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:682
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  6c:	f7ff bffe 	b.w	0 <TIM_PWMIConfig>

Disassembly of section .text.TIM_SetIC3Prescaler:

00000000 <TIM_SetIC3Prescaler>:
TIM_SetIC3Prescaler():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2374
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
   0:	8b83      	ldrh	r3, [r0, #28]
   2:	f023 030c 	bic.w	r3, r3, #12
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8383      	strh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2376
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
   c:	8b83      	ldrh	r3, [r0, #28]
   e:	b29b      	uxth	r3, r3
  10:	ea41 0303 	orr.w	r3, r1, r3
  14:	8383      	strh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2377
}
  16:	4770      	bx	lr

Disassembly of section .text.TIM_SetIC4Prescaler:

00000000 <TIM_SetIC4Prescaler>:
TIM_SetIC4Prescaler():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2396
{  
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
   0:	8b83      	ldrh	r3, [r0, #28]
   2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8383      	strh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2398
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
   c:	8b83      	ldrh	r3, [r0, #28]
   e:	b29b      	uxth	r3, r3
  10:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  14:	b29b      	uxth	r3, r3
  16:	8383      	strh	r3, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2399
}
  18:	4770      	bx	lr

Disassembly of section .text.TIM_ICInit:

00000000 <TIM_ICInit>:
TIM_ICInit():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:590
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
   0:	880b      	ldrh	r3, [r1, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:581
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
   2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   6:	460d      	mov	r5, r1
   8:	4604      	mov	r4, r0
   a:	8849      	ldrh	r1, [r1, #2]
   c:	88aa      	ldrh	r2, [r5, #4]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:590
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
   e:	b943      	cbnz	r3, 22 <TIM_ICInit+0x22>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:593
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  10:	892b      	ldrh	r3, [r5, #8]
  12:	f7ff fffe 	bl	0 <TIM_ICInit>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:597
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  16:	88e9      	ldrh	r1, [r5, #6]
  18:	4620      	mov	r0, r4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:626
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
  1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:597
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  1e:	f7ff bffe 	b.w	0 <TIM_ICInit>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:599
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  22:	2b04      	cmp	r3, #4
  24:	d108      	bne.n	38 <TIM_ICInit+0x38>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:602
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  26:	892b      	ldrh	r3, [r5, #8]
  28:	f7ff fffe 	bl	0 <TIM_ICInit>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:606
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  2c:	88e9      	ldrh	r1, [r5, #6]
  2e:	4620      	mov	r0, r4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:626
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
  30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:606
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  34:	f7ff bffe 	b.w	0 <TIM_ICInit>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:608
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  38:	2b08      	cmp	r3, #8
  3a:	f8b5 8008 	ldrh.w	r8, [r5, #8]
  3e:	d124      	bne.n	8a <TIM_ICInit+0x8a>
TI3_Config():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2732
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
  40:	f8b0 c020 	ldrh.w	ip, [r0, #32]
  44:	f42c 7c80 	bic.w	ip, ip, #256	; 0x100
  48:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
  4c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  50:	f8a0 c020 	strh.w	ip, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2733
  tmpccmr2 = TIMx->CCMR2;
  54:	8b87      	ldrh	r7, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2734
  tmpccer = TIMx->CCER;
  56:	8c06      	ldrh	r6, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2737
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  58:	f027 07f3 	bic.w	r7, r7, #243	; 0xf3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2740
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  5c:	f426 7600 	bic.w	r6, r6, #512	; 0x200
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2737
  TIMx->CCER &= CCER_CC3E_Reset;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  60:	043f      	lsls	r7, r7, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2740
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  62:	0436      	lsls	r6, r6, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2737
  TIMx->CCER &= CCER_CC3E_Reset;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  64:	0c3f      	lsrs	r7, r7, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2740
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  66:	0c36      	lsrs	r6, r6, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2738
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  68:	ea47 1708 	orr.w	r7, r7, r8, lsl #4
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2741
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC3E_Set);
  6c:	ea46 2101 	orr.w	r1, r6, r1, lsl #8
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2738
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  70:	b2bf      	uxth	r7, r7
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2741
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC3E_Set);
  72:	b289      	uxth	r1, r1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2738
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  74:	ea47 0202 	orr.w	r2, r7, r2
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2741
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC3E_Set);
  78:	f441 7180 	orr.w	r1, r1, #256	; 0x100
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2743
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  7c:	8382      	strh	r2, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2744
  TIMx->CCER = tmpccer;
  7e:	8401      	strh	r1, [r0, #32]
TIM_ICInit():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:615
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  80:	88e9      	ldrh	r1, [r5, #6]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:626
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
  82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:615
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  86:	f7ff bffe 	b.w	0 <TIM_ICInit>
TI4_Config():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2769
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
  8a:	8c07      	ldrh	r7, [r0, #32]
  8c:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
  90:	043f      	lsls	r7, r7, #16
  92:	0c3f      	lsrs	r7, r7, #16
  94:	8407      	strh	r7, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2770
  tmpccmr2 = TIMx->CCMR2;
  96:	8b86      	ldrh	r6, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2771
  tmpccer = TIMx->CCER;
  98:	8c03      	ldrh	r3, [r0, #32]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2775
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  9a:	f426 7640 	bic.w	r6, r6, #768	; 0x300
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2780
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2775
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  a2:	0536      	lsls	r6, r6, #20
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2780
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  a4:	041b      	lsls	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2775
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  a6:	0d36      	lsrs	r6, r6, #20
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2780
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  a8:	0c1b      	lsrs	r3, r3, #16
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2776
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  aa:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2781
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC4E_Set);
  ae:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2777
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
  b2:	ea42 3208 	orr.w	r2, r2, r8, lsl #12
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2781

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC4E_Set);
  b6:	b29b      	uxth	r3, r3
TIM_ICInit():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:624
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  b8:	88e9      	ldrh	r1, [r5, #6]
TI4_Config():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2777
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
  ba:	b292      	uxth	r2, r2
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2781

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC4E_Set);
  bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2783
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  c0:	8382      	strh	r2, [r0, #28]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2784
  TIMx->CCER = tmpccer ;
  c2:	8403      	strh	r3, [r0, #32]
TIM_ICInit():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:626
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
  c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:624
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  c8:	f7ff bffe 	b.w	0 <TIM_ICInit>

Disassembly of section .text.TIM_SetClockDivision:

00000000 <TIM_SetClockDivision>:
TIM_SetClockDivision():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2417
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= CR1_CKD_Mask;
   0:	8803      	ldrh	r3, [r0, #0]
   2:	b2db      	uxtb	r3, r3
   4:	8003      	strh	r3, [r0, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2419
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
   6:	8803      	ldrh	r3, [r0, #0]
   8:	b29b      	uxth	r3, r3
   a:	ea41 0303 	orr.w	r3, r1, r3
   e:	8003      	strh	r3, [r0, #0]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2420
}
  10:	4770      	bx	lr

Disassembly of section .text.TIM_GetCapture1:

00000000 <TIM_GetCapture1>:
TIM_GetCapture1():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2432
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
   0:	8e80      	ldrh	r0, [r0, #52]	; 0x34
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2433
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr

Disassembly of section .text.TIM_GetCapture2:

00000000 <TIM_GetCapture2>:
TIM_GetCapture2():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2445
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
   0:	8f00      	ldrh	r0, [r0, #56]	; 0x38
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2446
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr

Disassembly of section .text.TIM_GetCapture3:

00000000 <TIM_GetCapture3>:
TIM_GetCapture3():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2458
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
   0:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2459
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr

Disassembly of section .text.TIM_GetCapture4:

00000000 <TIM_GetCapture4>:
TIM_GetCapture4():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2471
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
   0:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2472
}
   4:	b280      	uxth	r0, r0
   6:	4770      	bx	lr

Disassembly of section .text.TIM_GetCounter:

00000000 <TIM_GetCounter>:
TIM_GetCounter():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2484
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
   0:	8c80      	ldrh	r0, [r0, #36]	; 0x24
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2485
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr

Disassembly of section .text.TIM_GetPrescaler:

00000000 <TIM_GetPrescaler>:
TIM_GetPrescaler():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2497
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
   0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2498
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr

Disassembly of section .text.TIM_GetFlagStatus:

00000000 <TIM_GetFlagStatus>:
TIM_GetFlagStatus():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2529
  ITStatus bitstatus = RESET;  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
   0:	8a03      	ldrh	r3, [r0, #16]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2531
  {
    bitstatus = SET;
   2:	4219      	tst	r1, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2538
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
   4:	bf0c      	ite	eq
   6:	2000      	moveq	r0, #0
   8:	2001      	movne	r0, #1
   a:	4770      	bx	lr

Disassembly of section .text.TIM_ClearFlag:

00000000 <TIM_ClearFlag>:
TIM_ClearFlag():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2569
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
   0:	43c9      	mvns	r1, r1
   2:	b289      	uxth	r1, r1
   4:	8201      	strh	r1, [r0, #16]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2570
}
   6:	4770      	bx	lr

Disassembly of section .text.TIM_GetITStatus:

00000000 <TIM_GetITStatus>:
TIM_GetITStatus():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2598
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
   0:	8a03      	ldrh	r3, [r0, #16]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2600
  
  itenable = TIMx->DIER & TIM_IT;
   2:	8982      	ldrh	r2, [r0, #12]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2601
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
   4:	ea11 0003 	ands.w	r0, r1, r3
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2600
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
   8:	b292      	uxth	r2, r2
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2601
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
   a:	d003      	beq.n	14 <TIM_GetITStatus+0x14>
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2603
  {
    bitstatus = SET;
   c:	4211      	tst	r1, r2
   e:	bf0c      	ite	eq
  10:	2000      	moveq	r0, #0
  12:	2001      	movne	r0, #1
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2610
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
  14:	4770      	bx	lr

Disassembly of section .text.TIM_ClearITPendingBit:

00000000 <TIM_ClearITPendingBit>:
TIM_ClearITPendingBit():
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2636
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
   0:	43c9      	mvns	r1, r1
   2:	b289      	uxth	r1, r1
   4:	8201      	strh	r1, [r0, #16]
D:\sunny\stm32\therme\Libraries\STM32F10x_StdPeriph_Driver\src/stm32f10x_tim.c:2637
}
   6:	4770      	bx	lr
