
D:\sunny\stm32\therme\Project\RIDE\STM3210C-EVAL\stm32f10x_it.o:     file format elf32-littlearm
D:\sunny\stm32\therme\Project\RIDE\STM3210C-EVAL\stm32f10x_it.o


Disassembly of section .text.NMI_Handler:

00000000 <NMI_Handler>:
NMI_Handler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:67
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{}
   0:	4770      	bx	lr

Disassembly of section .text.HardFault_Handler:

00000000 <HardFault_Handler>:
HardFault_Handler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:75
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
   0:	e7fe      	b.n	0 <HardFault_Handler>

Disassembly of section .text.MemManage_Handler:

00000000 <MemManage_Handler>:
MemManage_Handler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:87
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
   0:	e7fe      	b.n	0 <MemManage_Handler>

Disassembly of section .text.BusFault_Handler:

00000000 <BusFault_Handler>:
BusFault_Handler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:99
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
   0:	e7fe      	b.n	0 <BusFault_Handler>

Disassembly of section .text.UsageFault_Handler:

00000000 <UsageFault_Handler>:
UsageFault_Handler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:111
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
   0:	e7fe      	b.n	0 <UsageFault_Handler>

Disassembly of section .text.SVC_Handler:

00000000 <SVC_Handler>:
SVC_Handler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:123
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{}
   0:	4770      	bx	lr

Disassembly of section .text.DebugMon_Handler:

00000000 <DebugMon_Handler>:
DebugMon_Handler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:131
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{}
   0:	4770      	bx	lr

Disassembly of section .text.PendSV_Handler:

00000000 <PendSV_Handler>:
PendSV_Handler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:139
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{}
   0:	4770      	bx	lr

Disassembly of section .text.SysTick_Handler:

00000000 <SysTick_Handler>:
SysTick_Handler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:149
  * @retval None
  */
void SysTick_Handler(void)
{
  /* Update the LocalTime by adding SYSTEMTICK_PERIOD_MS each SysTick interrupt */
  Time_Update();
   0:	f7ff bffe 	b.w	0 <Time_Update>

Disassembly of section .text.RTC_IRQHandler:

00000000 <RTC_IRQHandler>:
RTC_IRQHandler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:239
      // RTC_SetCounter(0x0);
      // /* Wait until last write operation on RTC registers has finished */
      // RTC_WaitForLastTask();
    // }
  // }
}
   0:	4770      	bx	lr

Disassembly of section .text.ETH_IRQHandler:

00000000 <ETH_IRQHandler>:
ETH_IRQHandler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:254
  * @brief  This function handles ETH interrupt request.
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
   0:	b510      	push	{r4, lr}
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:256
  /* Handles all the received frames */
  while(ETH_GetRxPktSize() != 0) 
   2:	e001      	b.n	8 <ETH_IRQHandler+0x8>
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:258
  {		
    LwIP_Pkt_Handle();
   4:	f7ff fffe 	bl	0 <LwIP_Pkt_Handle>
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:256
  * @retval None
  */
void ETH_IRQHandler(void)
{
  /* Handles all the received frames */
  while(ETH_GetRxPktSize() != 0) 
   8:	f7ff fffe 	bl	0 <ETH_GetRxPktSize>
   c:	2800      	cmp	r0, #0
   e:	d1f9      	bne.n	4 <ETH_IRQHandler+0x4>
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:262
  {		
    LwIP_Pkt_Handle();
  }

  /* Clear the Eth DMA Rx IT pending bits */
  ETH_DMAClearITPendingBit(ETH_DMA_IT_R);
  10:	3040      	adds	r0, #64	; 0x40
  12:	f7ff fffe 	bl	0 <ETH_DMAClearITPendingBit>
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:263
  ETH_DMAClearITPendingBit(ETH_DMA_IT_NIS);
  16:	f44f 3080 	mov.w	r0, #65536	; 0x10000
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:264
}
  1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:263
    LwIP_Pkt_Handle();
  }

  /* Clear the Eth DMA Rx IT pending bits */
  ETH_DMAClearITPendingBit(ETH_DMA_IT_R);
  ETH_DMAClearITPendingBit(ETH_DMA_IT_NIS);
  1e:	f7ff bffe 	b.w	0 <ETH_DMAClearITPendingBit>

Disassembly of section .text.EXTI15_10_IRQHandler:

00000000 <EXTI15_10_IRQHandler>:
EXTI15_10_IRQHandler():
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:273
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
   0:	b510      	push	{r4, lr}
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:274
if(EXTI_GetITStatus(EXTI_Line14) != RESET)
   2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   6:	f7ff fffe 	bl	0 <EXTI_GetITStatus>
   a:	b128      	cbz	r0, 18 <EXTI15_10_IRQHandler+0x18>
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:277
  {   

   EXTI_ClearITPendingBit(EXTI_Line14);
   c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:280
  }   
 
}
  10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
D:\sunny\stm32\therme\Project\src/stm32f10x_it.c:277
void EXTI15_10_IRQHandler(void)
{
if(EXTI_GetITStatus(EXTI_Line14) != RESET)
  {   

   EXTI_ClearITPendingBit(EXTI_Line14);
  14:	f7ff bffe 	b.w	0 <EXTI_ClearITPendingBit>
  18:	bd10      	pop	{r4, pc}
